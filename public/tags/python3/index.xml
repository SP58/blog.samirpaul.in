<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python3 on Samir Paul</title>
    <link>https://samirpaul1.github.io/blog/tags/python3/</link>
    <description>Recent content in python3 on Samir Paul</description>
    <image>
      <title>Samir Paul</title>
      <url>https://samirpaulb.github.io/assets/blog-featured-image-samirpaul-in-blog.webp</url>
      <link>https://samirpaulb.github.io/assets/blog-featured-image-samirpaul-in-blog.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Oct 2022 15:58:26 +0800</lastBuildDate><atom:link href="https://samirpaul1.github.io/blog/tags/python3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Online PDF Compression Tool</title>
      <link>https://samirpaul1.github.io/blog/posts/online-pdf-compression-tool/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/online-pdf-compression-tool/</guid>
      <description>Online PDF Compression Tool</description>
      <content:encoded><![CDATA[<h3 id="about-the-project">About The Project:</h3>
<p>An online PDF file compression tool to reduce the size of a .pdf file. Python Flask is used to upload the file to a temporary location on the server.
In the backend, using the <code>PDFNetPython</code> library that file gets reduced and saved to its final location. After download, the files are automatically deleted from the server after 1 hour. Technologies used in this project: <code>Python3</code>, <code>Flask</code>, <code>C</code>, <code>Shell</code>, <code>Nix</code>, <code>Replit</code>, <code>Git</code>, <code>HTML</code>, <code>CSS</code>, <code>JavaScript</code>.</p>
<ul>
<li><a href="https://filecompressor.samirpaul1.repl.co" target="_blank" >Live Demo ðŸš€ </a>
</li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172896703-9e4998c1-40da-46ae-810e-780e47a391f9.mp4" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li>Landing Page:
<img loading="lazy" src="https://samirpaulb.github.io/assets/filecompressor-samirpaul1-repl-co-landing-page.webp" alt="Landing Page"  />
</li>
</ul>
<h3 id="flask-file-uploading">Flask File Uploading:</h3>
<p>In HTML form, the enctype property is set to <code>&quot;multipart/form-data&quot;</code> to publish the file to the URL.The URL handler extracts the file from the <code>request.files []</code> object and saves it to the required location. The path to the upload folder is defined as <code>app.config['UPLOAD_FOLDER']</code> and maximum size (in bytes) as
<code>maximum size (in bytes)</code>.
The server-side flask script fetches the file from the request object using <code>name = request.files['file'].filename</code>.
On successfully uploading the file, it is saved to the desired location on the server.
Hereâ€™s the Python code for the Flask application.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug</span> <span class="kn">import</span> <span class="n">secure_filename</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;upload.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/uploader&#39;</span><span class="p">,</span> <span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">secure_filename</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">filename</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s1">&#39;file uploaded successfully&#39;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="how-pdf-is-compressed-in-backend">How PDF is compressed in backend:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PDFNetPython3.PDFNetPython</span> <span class="kn">import</span> <span class="n">PDFDoc</span><span class="p">,</span> <span class="n">Optimizer</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="p">,</span> <span class="n">PDFNet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">output_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">output_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_file</span> <span class="o">=</span> <span class="n">input_file</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">PDFNet</span><span class="o">.</span><span class="n">Initialize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span> <span class="o">=</span> <span class="n">PDFDoc</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">InitSecurityHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">Optimizer</span><span class="o">.</span><span class="n">Optimize</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Save</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="o">.</span><span class="n">e_linearized</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">input_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="file-download">File Download:</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">response</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fname</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&#34;static/resource/&#34;</span> <span class="o">+</span> <span class="nx">fname</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">blob</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">blob</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	      <span class="kr">const</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nx">fname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	  <span class="p">})</span>
</span></span><span class="line"><span class="cl">	  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="-how-to-contribute">ðŸ¤” How to contribute</h2>
<ul>
<li><input checked="" disabled="" type="checkbox"> Fork this repository;</li>
<li><input checked="" disabled="" type="checkbox"> Create a branch with your feature: <code>git checkout -b my-feature</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Commit your changes: <code>git commit -m &quot;feat: my new feature&quot;</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Push to your branch: <code>git push origin my-feature</code>.</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
