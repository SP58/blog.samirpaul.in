<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>computer-science on Blog - Samir Paul</title>
    <link>https://samirpaul1.github.io/blog/tags/computer-science/</link>
    <description>Recent content in computer-science on Blog - Samir Paul</description>
    <image>
      <url>https://samirpaul1.github.io/blog/assets/banner-min.webp</url>
      <link>https://samirpaul1.github.io/blog/assets/banner-min.webp</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 12 Dec 2022 14:24:31 +0530</lastBuildDate><atom:link href="https://samirpaul1.github.io/blog/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some of My Online Courses Certificates</title>
      <link>https://samirpaul1.github.io/blog/posts/some-of-my-online-courses-certificates/</link>
      <pubDate>Mon, 12 Dec 2022 14:24:31 +0530</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/some-of-my-online-courses-certificates/</guid>
      <description>Some of My Online Courses Certificates</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000757-d9920eef-d5bf-4ef9-a043-ef28d66cf2a2.jpg" alt="Adobe Photoshop CC Fundamentals and Essentials Training Udemy UC-c9524150-649d-4ed2-bdcc-9fcfd284297a-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000775-21a04da5-4241-4d4d-a91f-fd32c1008a09.jpg" alt="Advanced Algorithms and Complexity Coursera GLMMPEBLCU9Q-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000778-885a11c9-c3b0-40cd-86ca-a0cd016e100e.jpg" alt="AI Fundamentals DataCamp Certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000784-28a09b2d-cd63-4575-81c1-f1127d4ec6f5.jpg" alt="AI ON JETSON NANO Nvidia-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000789-2a660c46-d8d1-4d07-9d09-b1df9882a63e.jpg" alt="Algorithmic Toolbox Coursera MA4KKNFEU7MB-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000791-6763e718-6b72-4db4-a893-1f4d683e5d5f.jpg" alt="C&#43;&#43; Programming Udemy UC-c58957c7-3ae3-4f83-b4b1-2f69b2df48fa-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000796-e5091489-1644-4aa0-b17c-95db71b158d4.jpg" alt="Codegoda 2022 organised by Agoda-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000801-4f9cedc2-9e04-4d80-8766-2645dd3310ac.jpg" alt="Data Analytics Real-World Projects in Python Udemy UC-75332da1-4725-4f60-80ab-41f640046e3e-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000807-5527fa2f-1812-4bdf-85af-b9b1c237580f.jpg" alt="Data Science for Everyone DateCamp Certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000814-229550c2-e13b-4377-a2ac-bdb101ab40d2.jpg" alt="Data Structures Coursera 394N5RVDD2EU-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000819-7e707391-c1f8-44ac-9b1f-a41716c3c469.jpg" alt="Database Foundations Database Management-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000823-1eff258f-483e-40cb-8b46-d4535960add6.jpg" alt="Databases_ Relational Databases and SQL StanfordOnline SOE YDB-SQL0001 Certificate _ edX-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000825-fca0038a-1b87-44e0-ba5c-78219c7e9007.jpg" alt="Divide and Conquer, Sorting and Searching, and Randomized Algorithms Coursera V58E5TWMYGTV-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000830-a24369f8-fbba-445b-908e-84024a1d03aa.jpg" alt="Introduction to IoT_Cisco -certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000834-fbb4181f-05b2-4ca5-a102-5ae0984edd9b.jpg" alt="Introduction to Opensource, Git and Github Microsoft Learn Student  2102001215000100   Github-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000839-3f4158ba-3993-43f0-befa-65fd769060fb.jpg" alt="Introduction to SQL Data Camp certificate-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000841-68c9007b-4e86-4892-9eb3-a38022703889.jpg" alt="IoT Foundations Operating Systems Fundamentals-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000846-d0da3ea5-9d18-40b6-a4ac-7eecf8c0d95f.jpg" alt="Linux Shells and Processes - LinkedIn learning-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000849-c222d1f0-3856-4fad-8f59-380a503665b5.jpg" alt="Machine Learning Coursera VJHQ4C2F8LDA-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000857-a0b600ce-8063-47bf-84ea-204c1fdbbfa2.jpg" alt="Microsoft SQL Server 2019_ For Beginners Udemy UC-93630ce4-c301-401f-a935-a38155ba79aa-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000863-558e99d7-c318-4e2a-b4be-b7ff04828f07.jpg" alt="Networking Foundations Network Media LANs-1"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000865-807a964f-77d7-46e1-b05b-fc5ed76b39df.png" alt="Python Assessment for skill HackerRank Certificate"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000868-12b8d203-0fb8-4b55-b09e-1ccb847a2e7b.png" alt="Deep Learning Fundamentals TV ML0115EN Certificate Cognitive Class"  />

<img loading="lazy" src="https://user-images.githubusercontent.com/77569653/207000869-a38af34d-a5f5-4eea-afe9-9b4fba238402.png" alt="Problem Solving (Basic) HackerRank Certificate"  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Complete Computer Science Study Plan to Become a Software Engineer</title>
      <link>https://samirpaul1.github.io/blog/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</guid>
      <description>Complete Computer Science Study Plan to Become a Software Engineer</description>
      <content:encoded><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<h3 id="the-study-plan">The Study Plan</h3>
<ul>
<li><a href="#">What is it?</a></li>
<li><a href="#why-use-it">Why use it?</a></li>
<li><a href="#how-to-use-it">How to use it</a></li>
<li><a href="#dont-feel-you-arent-smart-enough">Don&rsquo;t feel you aren&rsquo;t smart enough</a></li>
<li><a href="#a-note-about-video-resources">A Note About Video Resources</a></li>
<li><a href="#choose-a-programming-language">Choose a Programming Language</a></li>
<li><a href="#books-for-data-structures-and-algorithms">Books for Data Structures and Algorithms</a></li>
<li><a href="#interview-prep-books">Interview Prep Books</a></li>
<li><a href="#dont-make-my-mistakes">Don&rsquo;t Make My Mistakes</a></li>
<li><a href="#what-you-wont-see-covered">What you Won&rsquo;t See Covered</a></li>
<li><a href="#the-daily-plan">The Daily Plan</a></li>
<li><a href="#coding-question-practice">Coding Question Practice</a></li>
<li><a href="#coding-problems">Coding Problems</a></li>
</ul>
<h3 id="topics-of-study">Topics of Study</h3>
<ul>
<li><a href="#algorithmic-complexity--big-o--asymptotic-analysis">Algorithmic complexity / Big-O / Asymptotic analysis</a></li>
<li><a href="#data-structures">Data Structures</a>
<ul>
<li><a href="#arrays">Arrays</a></li>
<li><a href="#linked-lists">Linked Lists</a></li>
<li><a href="#stack">Stack</a></li>
<li><a href="#queue">Queue</a></li>
<li><a href="#hash-table">Hash table</a></li>
</ul>
</li>
<li><a href="#more-knowledge">More Knowledge</a>
<ul>
<li><a href="#binary-search">Binary search</a></li>
<li><a href="#bitwise-operations">Bitwise operations</a></li>
</ul>
</li>
<li><a href="#trees">Trees</a>
<ul>
<li><a href="#trees---intro">Trees - Intro</a></li>
<li><a href="#binary-search-trees-bsts">Binary search trees: BSTs</a></li>
<li><a href="#heap--priority-queue--binary-heap">Heap / Priority Queue / Binary Heap</a></li>
<li>balanced search trees (general concept, not details)</li>
<li>traversals: preorder, inorder, postorder, BFS, DFS</li>
</ul>
</li>
<li><a href="#sorting">Sorting</a>
<ul>
<li>selection</li>
<li>insertion</li>
<li>heapsort</li>
<li>quicksort</li>
<li>merge sort</li>
</ul>
</li>
<li><a href="#graphs">Graphs</a>
<ul>
<li>directed</li>
<li>undirected</li>
<li>adjacency matrix</li>
<li>adjacency list</li>
<li>traversals: BFS, DFS</li>
</ul>
</li>
<li><a href="#even-more-knowledge">Even More Knowledge</a>
<ul>
<li><a href="#recursion">Recursion</a></li>
<li><a href="#dynamic-programming">Dynamic Programming</a></li>
<li><a href="#design-patterns">Design Patterns</a></li>
<li><a href="#combinatorics-n-choose-k--probability">Combinatorics (n choose k) &amp; Probability</a></li>
<li><a href="#np-np-complete-and-approximation-algorithms">NP, NP-Complete and Approximation Algorithms</a></li>
<li><a href="#how-computers-process-a-program">How computers process a program</a></li>
<li><a href="#caches">Caches</a></li>
<li><a href="#processes-and-threads">Processes and Threads</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#string-searching--manipulations">String searching &amp; manipulations</a></li>
<li><a href="#tries">Tries</a></li>
<li><a href="#floating-point-numbers">Floating Point Numbers</a></li>
<li><a href="#unicode">Unicode</a></li>
<li><a href="#endianness">Endianness</a></li>
<li><a href="#networking">Networking</a></li>
</ul>
</li>
<li><a href="#final-review">Final Review</a></li>
</ul>
<h3 id="getting-the-job">Getting the Job</h3>
<ul>
<li><a href="#update-your-resume">Update Your Resume</a></li>
<li><a href="#find-a-job">Find a Job</a></li>
<li><a href="#interview-process--general-interview-prep">Interview Process &amp; General Interview Prep</a></li>
<li><a href="#be-thinking-of-for-when-the-interview-comes">Be thinking of for when the interview comes</a></li>
<li><a href="#have-questions-for-the-interviewer">Have questions for the interviewer</a></li>
<li><a href="#once-youve-got-the-job">Once You&rsquo;ve Got The Job</a></li>
</ul>
<p><strong>&mdash;&mdash;&mdash;&mdash;&mdash;- Everything below this point is optional &mdash;&mdash;&mdash;&mdash;&mdash;-</strong></p>
<h3 id="optional-extra-topics--resources">Optional Extra Topics &amp; Resources</h3>
<ul>
<li><a href="#additional-books">Additional Books</a></li>
<li><a href="#system-design-scalability-data-handling">System Design, Scalability, Data Handling</a> (if you have 4+ years experience)</li>
<li><a href="#additional-learning">Additional Learning</a>
<ul>
<li><a href="#compilers">Compilers</a></li>
<li><a href="#emacs-and-vim">Emacs and vi(m)</a></li>
<li><a href="#unix-command-line-tools">Unix command line tools</a></li>
<li><a href="#information-theory-videos">Information theory</a></li>
<li><a href="#parity--hamming-code-videos">Parity &amp; Hamming Code</a></li>
<li><a href="#entropy">Entropy</a></li>
<li><a href="#cryptography">Cryptography</a></li>
<li><a href="#compression">Compression</a></li>
<li><a href="#computer-security">Computer Security</a></li>
<li><a href="#garbage-collection">Garbage collection</a></li>
<li><a href="#parallel-programming">Parallel Programming</a></li>
<li><a href="#messaging-serialization-and-queueing-systems">Messaging, Serialization, and Queueing Systems</a></li>
<li><a href="#a">A*</a></li>
<li><a href="#fast-fourier-transform">Fast Fourier Transform</a></li>
<li><a href="#bloom-filter">Bloom Filter</a></li>
<li><a href="#hyperloglog">HyperLogLog</a></li>
<li><a href="#locality-sensitive-hashing">Locality-Sensitive Hashing</a></li>
<li><a href="#van-emde-boas-trees">van Emde Boas Trees</a></li>
<li><a href="#augmented-data-structures">Augmented Data Structures</a></li>
<li><a href="#balanced-search-trees">Balanced search trees</a>
<ul>
<li>AVL trees</li>
<li>Splay trees</li>
<li>Red/black trees</li>
<li>2-3 search trees</li>
<li>2-3-4 Trees (aka 2-4 trees)</li>
<li>N-ary (K-ary, M-ary) trees</li>
<li>B-Trees</li>
</ul>
</li>
<li><a href="#k-d-trees">k-D Trees</a></li>
<li><a href="#skip-lists">Skip lists</a></li>
<li><a href="#network-flows">Network Flows</a></li>
<li><a href="#disjoint-sets--union-find">Disjoint Sets &amp; Union Find</a></li>
<li><a href="#math-for-fast-processing">Math for Fast Processing</a></li>
<li><a href="#treap">Treap</a></li>
<li><a href="#linear-programming-videos">Linear Programming</a></li>
<li><a href="#geometry-convex-hull-videos">Geometry, Convex hull</a></li>
<li><a href="#discrete-math">Discrete math</a></li>
</ul>
</li>
<li><a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a></li>
<li><a href="#video-series">Video Series</a></li>
<li><a href="#computer-science-courses">Computer Science Courses</a></li>
<li><a href="#papers">Papers</a></li>
</ul>
<hr>
<h2 id="why-use-it">Why use it?</h2>
<p>If you want to work as a software engineer for a large company, these are the things you have to know.</p>
<p>If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.</p>
<p>When I started this project, I didn&rsquo;t know a stack from a heap, didn&rsquo;t know Big-O anything, or anything about trees, or how to
traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.
Every data structure I had ever used was built into the language, and I didn&rsquo;t know how they worked
under the hood at all. I never had to manage memory unless a process I was running would give an &ldquo;out of
memory&rdquo; error, and then I&rsquo;d have to find a workaround. I used a few multidimensional arrays in my life and
thousands of associative arrays, but I never created data structures from scratch.</p>
<p>It&rsquo;s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.</p>
<h2 id="how-to-use-it">How to use it</h2>
<p>Everything below is an outline, and you should tackle the items in order from top to bottom.</p>
<p>I&rsquo;m using GitHub&rsquo;s special markdown flavor, including tasks lists to track progress.</p>
<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown">More about GitHub-flavored markdown</a></li>
</ul>
<h3 id="if-you-dont-want-to-use-git">If you don&rsquo;t want to use git</h3>
<p>On this page, click the Code button near the top, then click &ldquo;Download ZIP&rdquo;. Unzip the file and you can work with the text files.</p>
<p>If you&rsquo;re open in a code editor that understands markdown, you&rsquo;ll see everything formatted nicely.</p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png" alt="How to download the repo as a zip file"  />
</p>
<h3 id="if-youre-comfortable-with-git">If you&rsquo;re comfortable with git</h3>
<p>Create a new branch so you can check items like this, just put an x in the brackets: [x]</p>
<ol>
<li>
<p><em><strong>Fork the GitHub repo:</strong></em> <code>https://github.com/jwasham/coding-interview-university</code> by clicking on the Fork button.</p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png" alt="Fork the GitHub repo"  />
</p>
</li>
<li>
<p>Clone to your local repo:</p>
<pre tabindex="0"><code>git clone git@github.com:&lt;your_github_username&gt;/coding-interview-university.git
cd coding-interview-university
git checkout -b progress
git remote add jwasham https://github.com/jwasham/coding-interview-university
git fetch --all
</code></pre></li>
<li>
<p>Mark all boxes with X after you completed your changes:</p>
<pre tabindex="0"><code>git add .
git commit -m &#34;Marked x&#34;
git rebase jwasham/main
git push --set-upstream origin progress
git push --force
</code></pre></li>
</ol>
<h2 id="dont-feel-you-arent-smart-enough">Don&rsquo;t feel you aren&rsquo;t smart enough</h2>
<ul>
<li>Successful software engineers are smart, but many have an insecurity that they aren&rsquo;t smart enough.</li>
<li>Following videos may help you overcome this insecurity:
<ul>
<li><a href="https://www.youtube.com/watch?v=0SARbwvhupQ">The myth of the Genius Programmer</a></li>
<li><a href="https://www.youtube.com/watch?v=1i8ylq4j_EY">It&rsquo;s Dangerous to Go Alone: Battling the Invisible Monsters in Tech</a></li>
</ul>
</li>
</ul>
<h2 id="a-note-about-video-resources">A Note About Video Resources</h2>
<p>Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.
Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.</p>
<p>It would be great to replace the online course resources with free and always-available public sources,
such as YouTube videos (preferably university lectures), so that you people can study these anytime,
not just when a specific online course is in session.</p>
<h2 id="choose-a-programming-language">Choose a Programming Language</h2>
<p>You&rsquo;ll need to choose a programming language for the coding interviews you do,
but you&rsquo;ll also need to find a language that you can use to study computer science concepts.</p>
<p>Preferably the language would be the same, so that you only need to be proficient in one.</p>
<h3 id="for-this-study-plan">For this Study Plan</h3>
<p>When I did the study plan, I used 2 languages for most of it: C and Python</p>
<ul>
<li>C: Very low level. Allows you to deal with pointers and memory allocation/deallocation, so you feel the data structures
and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that&rsquo;s terrific,
but when you&rsquo;re learning how these low-level data structures are built, it&rsquo;s great to feel close to the metal.
<ul>
<li>C is everywhere. You&rsquo;ll see examples in books, lectures, videos, <em>everywhere</em> while you&rsquo;re studying.</li>
<li><a href="https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628">The C Programming Language, Vol 2</a>
<ul>
<li>This is a short book, but it will give you a great handle on the C language and if you practice it a little
you&rsquo;ll quickly get proficient. Understanding C helps you understand how programs and memory work.</li>
<li>You don&rsquo;t need to go super deep in the book (or even finish it). Just get to where you&rsquo;re comfortable reading and writing in C.</li>
<li><a href="https://github.com/lekkas/c-algorithms">Answers to questions in the book</a></li>
</ul>
</li>
</ul>
</li>
<li>Python: Modern and very expressive, I learned it because it&rsquo;s just super useful and also allows me to write less code in an interview.</li>
</ul>
<p>This is my preference. You do what you like, of course.</p>
<p>You may not need it, but here are some sites for learning a new language:</p>
<ul>
<li><a href="https://exercism.org/tracks">Exercism</a></li>
<li><a href="http://www.codewars.com">Codewars</a></li>
<li><a href="https://www.hackerearth.com/for-developers/">HackerEarth</a></li>
<li><a href="https://www.scaler.com/topics/">Scaler Topics (Java, C++)</a></li>
</ul>
<h3 id="for-your-coding-interview">For your Coding Interview</h3>
<p>You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:</p>
<ul>
<li>C++</li>
<li>Java</li>
<li>Python</li>
</ul>
<p>You could also use these, but read around first. There may be caveats:</p>
<ul>
<li>JavaScript</li>
<li>Ruby</li>
</ul>
<p>Here is an article I wrote about choosing a language for the interview:
<a href="https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/">Pick One Language for the Coding Interview</a>.
This is the original article my post was based on: <a href="https://web.archive.org/web/20210516054124/http://blog.codingforinterviews.com/best-programming-language-jobs/">Choosing a Programming Language for Interviews</a></p>
<p>You need to be very comfortable in the language and be knowledgeable.</p>
<p>Read more about choices:</p>
<ul>
<li><a href="http://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/">Choose the Right Language for Your Coding Interview</a></li>
</ul>
<h2 id="books-for-data-structures-and-algorithms">Books for Data Structures and Algorithms</h2>
<p>This book will form your foundation for computer science.</p>
<p>Just choose one, in a language that you will be comfortable with. You&rsquo;ll be doing a lot of reading and coding.</p>
<h3 id="c">C</h3>
<ul>
<li><a href="https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080">Algorithms in C, Parts 1-5 (Bundle), 3rd Edition</a>
<ul>
<li>Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms</li>
</ul>
</li>
</ul>
<h3 id="python">Python</h3>
<ul>
<li><a href="https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/">Data Structures and Algorithms in Python</a>
<ul>
<li>by Goodrich, Tamassia, Goldwasser</li>
<li>I loved this book. It covered everything and more.</li>
<li>Pythonic code</li>
<li>my glowing book report: <a href="https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/">https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/</a></li>
</ul>
</li>
</ul>
<h3 id="java">Java</h3>
<p>Your choice:</p>
<ul>
<li>Goodrich, Tamassia, Goldwasser
<ul>
<li><a href="https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/">Data Structures and Algorithms in Java</a></li>
</ul>
</li>
<li>Sedgewick and Wayne:
<ul>
<li><a href="https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/">Algorithms</a></li>
<li>Free Coursera course that covers the book (taught by the authors!):
<ul>
<li><a href="https://www.coursera.org/learn/algorithms-part1">Algorithms I</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-part2">Algorithms II</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="c-1">C++</h3>
<p>Your choice:</p>
<ul>
<li>Goodrich, Tamassia, and Mount
<ul>
<li><a href="https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275">Data Structures and Algorithms in C++, 2nd Edition</a></li>
</ul>
</li>
<li>Sedgewick and Wayne
<ul>
<li><a href="https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/">Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching</a></li>
<li><a href="https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/">Algorithms in C++ Part 5: Graph Algorithms</a></li>
</ul>
</li>
</ul>
<h2 id="interview-prep-books">Interview Prep Books</h2>
<p>You don&rsquo;t need to buy a bunch of these. Honestly &ldquo;Cracking the Coding Interview&rdquo; is probably enough,
but I bought more to give myself more practice. But I always do too much.</p>
<p>I bought both of these. They gave me plenty of practice.</p>
<ul>
<li><a href="https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/">Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition</a>
<ul>
<li>Answers in C++ and Java</li>
<li>This is a good warm-up for Cracking the Coding Interview</li>
<li>Not too difficult. Most problems may be easier than what you&rsquo;ll see in an interview (from what I&rsquo;ve read)</li>
</ul>
</li>
<li><a href="http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/">Cracking the Coding Interview, 6th Edition</a>
<ul>
<li>answers in Java</li>
</ul>
</li>
</ul>
<h3 id="if-you-have-tons-of-extra-time">If you have tons of extra time:</h3>
<p>Choose one:</p>
<ul>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836">Elements of Programming Interviews (C++ version)</a></li>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/">Elements of Programming Interviews in Python</a></li>
<li><a href="https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/">Elements of Programming Interviews (Java version)</a>
- <a href="https://github.com/gardncl/elements-of-programming-interviews">Companion Project - Method Stub and Test Cases for Every Problem in the Book</a></li>
</ul>
<h2 id="dont-make-my-mistakes">Don&rsquo;t Make My Mistakes</h2>
<p>This list grew over many months, and yes, it got out of hand.</p>
<p>Here are some mistakes I made so you&rsquo;ll have a better experience. And you&rsquo;ll save months of time.</p>
<h3 id="1-you-wont-remember-it-all">1. You Won&rsquo;t Remember it All</h3>
<p>I watched hours of videos and took copious notes, and months later there was much I didn&rsquo;t remember. I spent 3 days going
through my notes and making flashcards, so I could review. I didn&rsquo;t need all of that knowledge.</p>
<p>Please, read so you won&rsquo;t make my mistakes:</p>
<p><a href="https://startupnextdoor.com/retaining-computer-science-knowledge/">Retaining Computer Science Knowledge</a>.</p>
<h3 id="2-use-flashcards">2. Use Flashcards</h3>
<p>To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.
Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.</p>
<p>Make your own for free:</p>
<ul>
<li><a href="https://github.com/jwasham/computer-science-flash-cards">Flashcards site repo</a></li>
</ul>
<p><strong>I DON&rsquo;T RECOMMEND using my flashcards.</strong> There are too many and most of them are trivia that you don&rsquo;t need.</p>
<p>But if you don&rsquo;t want to listen to me, here you go:</p>
<ul>
<li><a href="https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db">My flash cards database (1200 cards)</a>:</li>
<li><a href="https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db">My flash cards database (extreme - 1800 cards)</a>:</li>
</ul>
<p>Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.
It&rsquo;s way too much for what&rsquo;s required.</p>
<p><strong>Note on flashcards:</strong> The first time you recognize you know the answer, don&rsquo;t mark it as known. You have to see the
same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in
your brain.</p>
<p>An alternative to using my flashcard site is <a href="http://ankisrs.net/">Anki</a>, which has been recommended to me numerous times.
It uses a repetition system to help you remember. It&rsquo;s user-friendly, available on all platforms and has a cloud sync system.
It costs $25 on iOS but is free on other platforms.</p>
<p>My flashcard database in Anki format: <a href="https://ankiweb.net/shared/info/25173560">https://ankiweb.net/shared/info/25173560</a> (thanks <a href="https://github.com/xiewenya">@xiewenya</a>).</p>
<p>Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the &ldquo;styling&rdquo; radio button, add the member &ldquo;white-space: pre;&rdquo; to the card class.</p>
<h3 id="3-do-coding-interview-questions-while-youre-learning">3. Do Coding Interview Questions While You&rsquo;re Learning</h3>
<p>THIS IS VERY IMPORTANT.</p>
<p>Start doing coding interview questions while you&rsquo;re learning data structures and algorithms.</p>
<p>You need to apply what you&rsquo;re learning to solving problems, or you&rsquo;ll forget. I made this mistake.</p>
<p>Once you&rsquo;ve learned a topic, and feel somewhat comfortable with it, for example, <strong>linked lists</strong>:</p>
<ol>
<li>Open one of the <a href="#interview-prep-books">coding interview books</a> (or coding problem websites, listed below)</li>
<li>Do 2 or 3 questions regarding linked lists.</li>
<li>Move on to the next learning topic.</li>
<li>Later, go back and do another 2 or 3 linked list problems.</li>
<li>Do this with each new topic you learn.</li>
</ol>
<p><strong>Keep doing problems while you&rsquo;re learning all this stuff, not after.</strong></p>
<p>You&rsquo;re not being hired for knowledge, but how you apply the knowledge.</p>
<p>There are many resources for this, listed below. Keep going.</p>
<h3 id="4-focus">4. Focus</h3>
<p>There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music
without lyrics and you&rsquo;ll be able to focus pretty well.</p>
<h2 id="what-you-wont-see-covered">What you won&rsquo;t see covered</h2>
<p>These are prevalent technologies but not part of this study plan:</p>
<ul>
<li>SQL</li>
<li>Javascript</li>
<li>HTML, CSS, and other front-end technologies</li>
</ul>
<h2 id="the-daily-plan">The Daily Plan</h2>
<p>This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.</p>
<p>Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation
of that data structure or algorithm in the language you chose for this course.</p>
<p>You can see my code here:</p>
<ul>
<li><a href="https://github.com/jwasham/practice-c">C</a></li>
<li><a href="https://github.com/jwasham/practice-cpp">C++</a></li>
<li><a href="https://github.com/jwasham/practice-python">Python</a></li>
</ul>
<p>You don&rsquo;t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.</p>
<h2 id="coding-question-practice">Coding Question Practice</h2>
<p>🤔 Why is this here? I&rsquo;m not ready to interview.</p>
<p><a href="#3-do-coding-interview-questions-while-youre-learning">Then go back and read this.</a></p>
<p>Why you need to practice doing programming problems:</p>
<ul>
<li>Problem recognition, and where the right data structures and algorithms fit in</li>
<li>Gathering requirements for the problem</li>
<li>Talking your way through the problem like you will in the interview</li>
<li>Coding on a whiteboard or paper, not a computer</li>
<li>Coming up with time and space complexity for your solutions (see Big-O below)</li>
<li>Testing your solutions</li>
</ul>
<p>There is a great intro for methodical, communicative problem solving in an interview. You&rsquo;ll get this from the programming
interview books, too, but I found this outstanding:
<a href="http://www.hiredintech.com/algorithm-design/">Algorithm design canvas</a></p>
<p>Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.</p>
<p>If you don&rsquo;t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.
This is my &ldquo;sofa whiteboard&rdquo;. I added the pen in the photo just for scale. If you use a pen, you&rsquo;ll wish you could erase.
Gets messy quick. <strong>I use a pencil and eraser.</strong></p>
<p><img loading="lazy" src="https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg" alt="my sofa whiteboard"  />
</p>
<p><strong>Coding question practice is not about memorizing answers to programming problems.</strong></p>
<h2 id="coding-problems">Coding Problems</h2>
<p>Don&rsquo;t forget your key coding interview books <a href="#interview-prep-books">here</a>.</p>
<p>Solving Problems:</p>
<ul>
<li><a href="https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution">How to Find a Solution</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content">How to Dissect a Topcoder Problem Statement</a></li>
</ul>
<p>Coding Interview Question Videos:</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI">IDeserve (88 videos)</a></li>
<li><a href="https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&amp;view=50&amp;sort=dd">Tushar Roy (5 playlists)</a>
<ul>
<li>Super for walkthroughs of problem solutions</li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-">Nick White - LeetCode Solutions (187 Videos)</a>
<ul>
<li>Good explanations of solution and the code</li>
<li>You can watch several in a short time</li>
</ul>
</li>
<li><a href="https://youtube.com/FisherCoder">FisherCoder - LeetCode Solutions</a></li>
</ul>
<p>Challenge/Practice sites:</p>
<ul>
<li><a href="https://leetcode.com/">LeetCode</a>
<ul>
<li>My favorite coding problem site. It&rsquo;s worth the subscription money for the 1-2 months you&rsquo;ll likely be preparing.</li>
<li>See Nick White and FisherCoder Videos above for code walk-throughs.</li>
</ul>
</li>
<li><a href="https://www.hackerrank.com/">HackerRank</a></li>
<li><a href="https://www.topcoder.com/">TopCoder</a></li>
<li><a href="https://codeforces.com/">Codeforces</a></li>
<li><a href="https://codility.com/programmers/">Codility</a></li>
<li><a href="https://practice.geeksforgeeks.org/explore/?page=1">Geeks for Geeks</a></li>
<li><a href="https://www.interviewbit.com/">InterviewBit</a></li>
<li><a href="https://www.algoexpert.io/product">AlgoExpert</a>
<ul>
<li>Created by Google engineers, this is also an excellent resource to hone your skills.</li>
</ul>
</li>
<li><a href="https://projecteuler.net/">Project Euler</a>
<ul>
<li>very math focused, and not really suited for coding interviews</li>
</ul>
</li>
</ul>
<h2 id="lets-get-started">Let&rsquo;s Get Started</h2>
<p>Alright, enough talk, let&rsquo;s learn!</p>
<p>But don&rsquo;t forget to do coding problems from above while you learn!</p>
<h2 id="algorithmic-complexity--big-o--asymptotic-analysis">Algorithmic complexity / Big-O / Asymptotic analysis</h2>
<ul>
<li>Nothing to implement here, you&rsquo;re just watching videos and taking notes! Yay!</li>
<li>There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.</li>
<li>Don&rsquo;t worry if you don&rsquo;t understand all the math behind it.</li>
<li>You just need to understand how to express the complexity of an algorithm in terms of Big-O.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=iOq5kSKqeR4">Harvard CS50 - Asymptotic Notation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=V6mKVRU1evU">Big O Notations (general quick tutorial) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ei-A_wy5Yxw&amp;index=2&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN">Big O Notation (and Omega and Theta) - best mathematical explanation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=z1mkCe3kVUA">Skiena (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98">UC Berkeley Big O (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B3SpQZaAZP4&amp;index=10&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN">Amortized Analysis (video)</a></li>
<li><input disabled="" type="checkbox"> TopCoder (includes recurrence relations and master theorem):
<ul>
<li><a href="https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one">Computational Complexity: Section 1</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two">Computational Complexity: Section 2</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://bigocheatsheet.com/">Cheat sheet</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/__vX2sjlpXU">[Review] Big-O notation in 5 minutes (video)</a></li>
</ul>
<p>Well, that&rsquo;s about enough of that.</p>
<p>When you go through &ldquo;Cracking the Coding Interview&rdquo;, there is a chapter on this, and at the end there is a quiz to see
if you can identify the runtime complexity of different algorithms. It&rsquo;s a super review and test.</p>
<h2 id="data-structures">Data Structures</h2>
<ul>
<li>
<h3 id="arrays">Arrays</h3>
<ul>
<li><input disabled="" type="checkbox"> About Arrays:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/arrays-OsBSF">Arrays (video)</a></li>
<li><a href="https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE">UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)</a> (Start watching from 15m 32s)</li>
<li><a href="https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV">Dynamic Arrays (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=1jtrQqYpt7g">Jagged Arrays (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement a vector (mutable array with automatic resizing):
<ul>
<li><input disabled="" type="checkbox"> Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.</li>
<li><input disabled="" type="checkbox"> New raw data array with allocated memory
<ul>
<li>can allocate int array under the hood, just not use its features</li>
<li>start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> size() - number of items</li>
<li><input disabled="" type="checkbox"> capacity() - number of items it can hold</li>
<li><input disabled="" type="checkbox"> is_empty()</li>
<li><input disabled="" type="checkbox"> at(index) - returns item at given index, blows up if index out of bounds</li>
<li><input disabled="" type="checkbox"> push(item)</li>
<li><input disabled="" type="checkbox"> insert(index, item) - inserts item at index, shifts that index&rsquo;s value and trailing elements to the right</li>
<li><input disabled="" type="checkbox"> prepend(item) - can use insert above at index 0</li>
<li><input disabled="" type="checkbox"> pop() - remove from end, return value</li>
<li><input disabled="" type="checkbox"> delete(index) - delete item at index, shifting all trailing elements left</li>
<li><input disabled="" type="checkbox"> remove(item) - looks for value and removes index holding it (even if in multiple places)</li>
<li><input disabled="" type="checkbox"> find(item) - looks for value and returns first index with that value, -1 if not found</li>
<li><input disabled="" type="checkbox"> resize(new_capacity) // private function
<ul>
<li>when you reach capacity, resize to double the size</li>
<li>when popping an item, if size is 1/4 of capacity, resize to half</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Time
<ul>
<li>O(1) to add/remove at end (amortized for allocations for more space), index, or update</li>
<li>O(n) to insert/remove elsewhere</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Space
<ul>
<li>contiguous in memory, so proximity helps performance</li>
<li>space needed = (array capacity, which is &gt;= n) * size of item, but even if 2n, still O(n)</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="linked-lists">Linked Lists</h3>
<ul>
<li><input disabled="" type="checkbox"> Description:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK">Singly Linked Lists (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0">CS 61B - Linked Lists 1 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w">CS 61B - Linked Lists 2 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/F8AbOfQwl1c">[Review] Linked lists in 4 minutes (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=QN6FPiD0Gzo">C Code (video)</a>
- not the whole video, just portions about Node struct and memory allocation</li>
<li><input disabled="" type="checkbox"> Linked List vs Arrays:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9">Core Linked Lists Vs Arrays (video)</a></li>
<li><a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd">In The Real World Linked Lists Vs Arrays (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=YQs6IC-vgmo">Why you should avoid linked lists (video)</a></li>
<li><input disabled="" type="checkbox"> Gotcha: you need pointer to pointer knowledge:
(for when you pass a pointer to a function that may change the address where that pointer points)
This page is just to get a grasp on ptr to ptr. I don&rsquo;t recommend this list traversal style. Readability and maintainability suffer due to cleverness.
<ul>
<li><a href="https://www.eskimo.com/~scs/cclass/int/sx8.html">Pointers to Pointers</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement (I did with tail pointer &amp; without):
<ul>
<li><input disabled="" type="checkbox"> size() - returns number of data elements in list</li>
<li><input disabled="" type="checkbox"> empty() - bool returns true if empty</li>
<li><input disabled="" type="checkbox"> value_at(index) - returns the value of the nth item (starting at 0 for first)</li>
<li><input disabled="" type="checkbox"> push_front(value) - adds an item to the front of the list</li>
<li><input disabled="" type="checkbox"> pop_front() - remove front item and return its value</li>
<li><input disabled="" type="checkbox"> push_back(value) - adds an item at the end</li>
<li><input disabled="" type="checkbox"> pop_back() - removes end item and returns its value</li>
<li><input disabled="" type="checkbox"> front() - get value of front item</li>
<li><input disabled="" type="checkbox"> back() - get value of end item</li>
<li><input disabled="" type="checkbox"> insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index</li>
<li><input disabled="" type="checkbox"> erase(index) - removes node at given index</li>
<li><input disabled="" type="checkbox"> value_n_from_end(n) - returns the value of the node at nth position from the end of the list</li>
<li><input disabled="" type="checkbox"> reverse() - reverses the list</li>
<li><input disabled="" type="checkbox"> remove_value(value) - removes the first item in the list with this value</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Doubly-linked List
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD">Description (video)</a></li>
<li>No need to implement</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="stack">Stack</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/stacks-UdKzQ">Stacks (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/KcT3aVgrrpU">[Review] Stacks in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Will not implement. Implementing with array is trivial</li>
</ul>
</li>
<li>
<h3 id="queue">Queue</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/queues-EShpq">Queue (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Circular_buffer">Circular buffer/FIFO</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/D6gu-_tmEpQ">[Review] Queues in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement using linked-list, with tail pointer:
<ul>
<li>enqueue(value) - adds value at position at tail</li>
<li>dequeue() - returns value and removes least recently added element (front)</li>
<li>empty()</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement using fixed-sized array:
<ul>
<li>enqueue(value) - adds item at end of available storage</li>
<li>dequeue() - returns value and removes least recently added element</li>
<li>empty()</li>
<li>full()</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cost:
<ul>
<li>a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)
because you&rsquo;d need the next to last element, causing a full traversal each dequeue</li>
<li>enqueue: O(1) (amortized, linked list and array [probing])</li>
<li>dequeue: O(1) (linked list and array)</li>
<li>empty: O(1) (linked list and array)</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="hash-table">Hash table</h3>
<ul>
<li>
<p><input disabled="" type="checkbox"> Videos:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0M_kIqhwbFo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=8">Hashing with Chaining (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=BRO7mVIFt08&amp;index=9&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Table Doubling, Karp-Rabin (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=rvdJDijO2Ro&amp;index=10&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Open Addressing, Cryptographic Hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=C4Kc8xzcA68">PyCon 2010: The Mighty Dictionary (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=66P5FMkWoVU">PyCon 2017: The Dictionary Even Mightier (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=z0lJ2k0sl1g&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=11">(Advanced) Randomization: Universal &amp; Perfect Hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=N0COwN14gt0&amp;list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&amp;index=4">(Advanced) Perfect hashing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/knV86FlSXJ8">[Review] Hash tables in 4 minutes (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Online Courses:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP">Core Hash Tables (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/home/week/4">Data Structures (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP">Phone Book Problem (video)</a></li>
<li><input disabled="" type="checkbox"> distributed hash tables:
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb">Instant Uploads And Storage Optimization In Dropbox (video)</a></li>
<li><a href="https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H">Distributed Hash Tables (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Implement with array using linear probing</p>
<ul>
<li>hash(k, m) - m is size of hash table</li>
<li>add(key, value) - if key already exists, update value</li>
<li>exists(key)</li>
<li>get(key)</li>
<li>remove(key)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="more-knowledge">More Knowledge</h2>
<ul>
<li>
<h3 id="binary-search">Binary search</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=D5SrAga1pno">Binary Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">Binary Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/Binary%20Search">detail</a></li>
<li><input disabled="" type="checkbox"> <a href="https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems">blueprint</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/fDKIpRe8GW4">[Review] Binary search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement:
<ul>
<li>binary search (on sorted array of integers)</li>
<li>binary search using recursion</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="bitwise-operations">Bitwise operations</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf">Bits cheat sheet</a> - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)</li>
<li><input disabled="" type="checkbox"> Get a really good understanding of manipulating bits with: &amp;, |, ^, ~, &raquo;, &laquo;
<ul>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Word_(computer_architecture)">words</a></li>
<li><input disabled="" type="checkbox"> Good intro:
<a href="https://www.youtube.com/watch?v=7jkIUgLC29I">Bit Manipulation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=d0AwjSpNXR0">C Programming Tutorial 2-10: Bitwise Operators (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Bit_manipulation">Bit Manipulation</a></li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Bitwise_operation">Bitwise Operation</a></li>
<li><input disabled="" type="checkbox"> <a href="https://graphics.stanford.edu/~seander/bithacks.html">Bithacks</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bits.stephan-brumme.com/">The Bit Twiddler</a></li>
<li><input disabled="" type="checkbox"> <a href="https://bits.stephan-brumme.com/interactive.html">The Bit Twiddler Interactive</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZusiKXcz_ac">Bit Hacks (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/">Practice Operations</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 2s and 1s complement
<ul>
<li><a href="https://www.youtube.com/watch?v=lKTsv6iVxV4">Binary: Plusses &amp; Minuses (Why We Use Two&rsquo;s Complement) (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ones%27_complement">1s Complement</a></li>
<li><a href="https://en.wikipedia.org/wiki/Two%27s_complement">2s Complement</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Count set bits
<ul>
<li><a href="https://youtu.be/Hzuzo9NJrlc">4 ways to count bits in a byte (video)</a></li>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan">Count Bits</a></li>
<li><a href="http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer">How To Count The Number Of Set Bits In a 32 Bit Integer</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Swap values:
<ul>
<li><a href="https://bits.stephan-brumme.com/swap.html">Swap</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Absolute value:
<ul>
<li><a href="https://bits.stephan-brumme.com/absInteger.html">Absolute Integer</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="trees">Trees</h2>
<ul>
<li>
<h3 id="trees---intro">Trees - Intro</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/trees-95qda">Intro to Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b">Tree Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uWL6FJhq5fM">BFS(breadth-first search) and DFS(depth-first search) (video)</a>
<ul>
<li>BFS notes:
<ul>
<li>level order (BFS, using queue)</li>
<li>time complexity: O(n)</li>
<li>space complexity: best: O(1), worst: O(n/2)=O(n)</li>
</ul>
</li>
<li>DFS notes:
<ul>
<li>time complexity: O(n)</li>
<li>space complexity:
best: O(log n) - avg. height of tree
worst: O(n)</li>
<li>inorder (DFS: left, self, right)</li>
<li>postorder (DFS: left, right, self)</li>
<li>preorder (DFS: self, left, right)</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/HZ5YTanv5QE">[Review] Breadth-first search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/Urx87-NMm6c">[Review] Depth-first search in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b">[Review] Tree Traversal (playlist) in 11 minutes (video)</a></li>
</ul>
</li>
<li>
<h3 id="binary-search-trees-bsts">Binary search trees: BSTs</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=x6At0nzX92o&amp;index=1&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Binary Search Tree Review (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction">Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=76dhtgZt38A&amp;ab_channel=MITOpenCourseWare">MIT (video)</a></li>
<li>C/C++:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=COZK7NATh4k&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=28">Binary search tree - Implementation in C/C++ (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=hWokyBoo0aI&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=29">BST implementation - memory allocation in stack and heap (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Ut90klNN264&amp;index=30&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Find min and max element in a binary search tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=_pnqMz5nrRs&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=31">Find height of a binary tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=9RHO6jU--GU&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=32">Binary tree traversal - breadth-first and depth-first strategies (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=86g8jAQug04&amp;index=33&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Binary tree: Level Order Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gm8DUJJhmY4&amp;index=34&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Binary tree traversal: Preorder, Inorder, Postorder (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=yEwSGhSsT0U&amp;index=35&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Check if a binary tree is binary search tree or not (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gcULXE7ViZw&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=36">Delete a node from Binary Search Tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=5cPbNCrdotA&amp;index=37&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P">Inorder Successor in a binary search tree (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Implement:
<ul>
<li><input disabled="" type="checkbox"> insert    // insert value into tree</li>
<li><input disabled="" type="checkbox"> get_node_count // get count of values stored</li>
<li><input disabled="" type="checkbox"> print_values // prints the values in the tree, from min to max</li>
<li><input disabled="" type="checkbox"> delete_tree</li>
<li><input disabled="" type="checkbox"> is_in_tree // returns true if given value exists in the tree</li>
<li><input disabled="" type="checkbox"> get_height // returns the height in nodes (single node&rsquo;s height is 1)</li>
<li><input disabled="" type="checkbox"> get_min   // returns the minimum value stored in the tree</li>
<li><input disabled="" type="checkbox"> get_max   // returns the maximum value stored in the tree</li>
<li><input disabled="" type="checkbox"> is_binary_search_tree</li>
<li><input disabled="" type="checkbox"> delete_value</li>
<li><input disabled="" type="checkbox"> get_successor // returns next-highest value in tree after given value, -1 if none</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="heap--priority-queue--binary-heap">Heap / Priority Queue / Binary Heap</h3>
<ul>
<li>visualized as a tree, but is usually linear in storage (array, linked list)</li>
<li><input disabled="" type="checkbox"> <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/introduction-2OpTs">Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees">Binary Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark">Tree Height Remark (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations">Basic Operations (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees">Complete Binary Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode">Pseudocode (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3291">Heap Sort - jumps to start (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO">Heap Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS">Building a heap (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM&amp;index=4&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">MIT: Heaps and Heap Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE">CS 61B Lecture 24: Priority Queues (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MiyLo8adrWw">Linear Time BuildHeap (max-heap)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6">[Review] Heap (playlist) in 13 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> Implement a max-heap:
<ul>
<li><input disabled="" type="checkbox"> insert</li>
<li><input disabled="" type="checkbox"> sift_up - needed for insert</li>
<li><input disabled="" type="checkbox"> get_max - returns the max item, without removing it</li>
<li><input disabled="" type="checkbox"> get_size() - return number of elements stored</li>
<li><input disabled="" type="checkbox"> is_empty() - returns true if heap contains no elements</li>
<li><input disabled="" type="checkbox"> extract_max - returns the max item, removing it</li>
<li><input disabled="" type="checkbox"> sift_down - needed for extract_max</li>
<li><input disabled="" type="checkbox"> remove(x) - removes item at index x</li>
<li><input disabled="" type="checkbox"> heapify - create a heap from an array of elements, needed for heap_sort</li>
<li><input disabled="" type="checkbox"> heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="sorting">Sorting</h2>
<ul>
<li>
<p><input disabled="" type="checkbox"> Notes:</p>
<ul>
<li>Implement sorts &amp; know best case/worst case, average complexity of each:
<ul>
<li>no bubble sort - it&rsquo;s terrible - O(n^2), except when n &lt;= 16</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Stability in sorting algorithms (&ldquo;Is Quicksort stable?&rdquo;)
<ul>
<li><a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">Sorting Algorithm Stability</a></li>
<li><a href="http://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms">Stability In Sorting Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/stability-in-sorting-algorithms/">Stability In Sorting Algorithms</a></li>
<li><a href="http://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf">Sorting Algorithms - Stability</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Which algorithms can be used on linked lists? Which on arrays? Which on both?
<ul>
<li>I wouldn&rsquo;t recommend sorting a linked list, but merge sort is doable.</li>
<li><a href="http://www.geeksforgeeks.org/merge-sort-for-linked-list/">Merge Sort For Linked List</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>For heapsort, see Heap data structure above. Heap sort is great, but not stable</p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/home/week/3">Sedgewick - Mergesort (5 videos)</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq">1. Mergesort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort">2. Bottom up Mergesort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF">3. Sorting Complexity</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS">4. Comparators</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability">5. Stability</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1/home/week/3">Sedgewick - Quicksort (4 videos)</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC">1. Quicksort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT">2. Selection</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd">3. Duplicate Keys</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7">4. System Sorts</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> UC Berkeley:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I">CS 61B Lecture 29: Sorting I (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk">CS 61B Lecture 30: Sorting II (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc">CS 61B Lecture 32: Sorting III (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4">CS 61B Lecture 33: Sorting V (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI">CS 61B 2014-04-21: Radix Sort(video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=P00xJgWzz2c&amp;index=1&amp;list=PL89B61F78B552C1AB">Bubble Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ni_zk257Nqo&amp;index=7&amp;list=PL89B61F78B552C1AB">Analyzing Bubble Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Kg4bqzAqRBM&amp;index=3&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Insertion Sort, Merge Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=c4BRHC7kTaQ&amp;index=2&amp;list=PL89B61F78B552C1AB">Insertion Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=GCae1WNvnZM&amp;index=3&amp;list=PL89B61F78B552C1AB">Merge Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=y_G9BkAm6B8&amp;index=4&amp;list=PL89B61F78B552C1AB">Quicksort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6nDMgr0-Yyo&amp;index=8&amp;list=PL89B61F78B552C1AB">Selection Sort (video)</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> Merge sort code:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="http://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c">Using output array (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py">Using output array (Python)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc">In-place (C++)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Quick sort code:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c">Implementation (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c">Implementation (C)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py">Implementation (Python)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl">[Review] Sorting (playlist) in 18 minutes</a></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/Hoixgm4-P4M">Quick sort in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/2DmK_H7IdTo">Heap sort in 4 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/4VqmGXwpLqc">Merge sort in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/xli_FI7CuzA">Bubble sort in 2 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/g-PGLbMth_g">Selection sort in 3 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/JU767SDMDvA">Insertion sort in 2 minutes (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Implement:</p>
<ul>
<li><input disabled="" type="checkbox"> Mergesort: O(n log n) average and worst case</li>
<li><input disabled="" type="checkbox"> Quicksort O(n log n) average case</li>
<li>Selection sort and insertion sort are both O(n^2) average and worst case</li>
<li>For heapsort, see Heap data structure above</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Not required, but I recommended them:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/3">Sedgewick - Radix Sorts (6 videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java">1. Strings in Java</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z">2. Key Indexed Counting</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort">3. Least Significant Digit First String Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort">4. Most Significant Digit First String Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5">5. 3 Way Radix Quicksort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays">6. Suffix Arrays</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort">Radix Sort</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=xhr26ia4k38">Radix Sort (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;index=7&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Radix Sort, Counting Sort (linear time given constraints) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=cNB2lADK3_s&amp;index=8&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Randomization: Matrix Multiply, Quicksort, Freivalds&rsquo; algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=pOKy3RZbSws&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=14">Sorting in Linear Time (video)</a></li>
</ul>
</li>
</ul>
<p>As a summary, here is a visual representation of <a href="https://www.youtube.com/watch?v=kPRA0W1kECg">15 sorting algorithms</a>.
If you need more detail on this subject, see &ldquo;Sorting&rdquo; section in <a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a></p>
<h2 id="graphs">Graphs</h2>
<p>Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.</p>
<ul>
<li>
<p>Notes:</p>
<ul>
<li>There are 4 basic ways to represent a graph in memory:
<ul>
<li>objects and pointers</li>
<li>adjacency matrix</li>
<li>adjacency list</li>
<li>adjacency map</li>
</ul>
</li>
<li>Familiarize yourself with each representation and its pros &amp; cons</li>
<li>BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code</li>
<li>When asked a question, look for a graph-based solution first, then move on if none</li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> MIT(videos):</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oFVYVzlvk9c&amp;t=14s&amp;ab_channel=MITOpenCourseWare">Breadth-First Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=IBfWDYSffUU&amp;t=32s&amp;ab_channel=MITOpenCourseWare">Depth-First Search</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Skiena Lectures - great intro:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Sjk0xqWWPCc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=10">CSE373 2020 - Lecture 10 - Graph Data Structures (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZTwjXj81NVY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=11">CSE373 2020 - Lecture 11 - Graph Traversal (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=KyordYB3BOs&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=12">CSE373 2020 - Lecture 12 - Depth First Search (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oolm2VnJUKw&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=13">CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=RktgPx0MarY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=14">CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con&rsquo;t) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MUe5DXRhyAo&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=15">CSE373 2020 - Lecture 15 - Graph Algorithms (con&rsquo;t 2) (video)</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Graphs (review and more):</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Aa2sqUhIn-E&amp;index=15&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">6.006 Single-Source Shortest Paths Problem (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NSHizBK9JD8&amp;t=1731s&amp;ab_channel=MITOpenCourseWare">6.006 Dijkstra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=f9cVS_URPc0&amp;ab_channel=MITOpenCourseWare">6.006 Bellman-Ford (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=CHvQ3q_gJ7E&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=18">6.006 Speeding Up Dijkstra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=i_AQT_XfvD8&amp;index=6&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim&rsquo;s Algorithm -  Lecture 6 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ufj5_bppBsA&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=7">Aduni: Graph Algorithms II - DFS, BFS, Kruskal&rsquo;s Algorithm, Union Find Data Structure - Lecture 7 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=DiedsPsMKXc&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=8">Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=XIAQRlNkJAw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=9">Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k">CS 61B 2014: Weighted graphs (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=tKwnms5iRBU&amp;index=16&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Greedy Algorithms: Minimum Spanning Tree (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=RpgcYiky7uw">Strongly Connected Components Kosaraju&rsquo;s Algorithm Graph Algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw">[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV">[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)</a></li>
</ul>
</li>
<li>
<p>Full Coursera Course:</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-on-graphs/home/welcome">Algorithms on Graphs (video)</a></li>
</ul>
</li>
<li>
<p>I&rsquo;ll implement:</p>
<ul>
<li><input disabled="" type="checkbox"> DFS with adjacency list (recursive)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency list (iterative with stack)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency matrix (recursive)</li>
<li><input disabled="" type="checkbox"> DFS with adjacency matrix (iterative with stack)</li>
<li><input disabled="" type="checkbox"> BFS with adjacency list</li>
<li><input disabled="" type="checkbox"> BFS with adjacency matrix</li>
<li><input disabled="" type="checkbox"> single-source shortest path (Dijkstra)</li>
<li><input disabled="" type="checkbox"> minimum spanning tree</li>
<li>DFS-based algorithms (see Aduni videos above):
<ul>
<li><input disabled="" type="checkbox"> check for cycle (needed for topological sort, since we&rsquo;ll check for cycle before starting)</li>
<li><input disabled="" type="checkbox"> topological sort</li>
<li><input disabled="" type="checkbox"> count connected components in a graph</li>
<li><input disabled="" type="checkbox"> list strongly connected components</li>
<li><input disabled="" type="checkbox"> check for bipartite graph</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="even-more-knowledge">Even More Knowledge</h2>
<ul>
<li>
<h3 id="recursion">Recursion</h3>
<ul>
<li><input disabled="" type="checkbox"> Stanford lectures on recursion &amp; backtracking:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=gl3emqCuueQ&amp;list=PLFE6E58F856038C69&amp;index=8">Lecture 8 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uFJhEPrbycQ&amp;list=PLFE6E58F856038C69&amp;index=9">Lecture 9 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NdF1QDTRkck&amp;index=10&amp;list=PLFE6E58F856038C69">Lecture 10 | Programming Abstractions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=p-gpaIGRCQI&amp;list=PLFE6E58F856038C69&amp;index=11">Lecture 11 | Programming Abstractions (video)</a></li>
</ul>
</li>
<li>When it is appropriate to use it?</li>
<li>How is tail recursion better than not?
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad">What Is Tail Recursion Why Is It So Bad?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1">Tail Recursion (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/ngCos392W4w">5 Simple Steps for Solving Any Recursive Problem(video)</a></li>
</ul>
<p>Backtracking Blueprint: <a href="https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)">Java</a>
<a href="https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A">Python</a></p>
</li>
<li>
<h3 id="dynamic-programming">Dynamic Programming</h3>
<ul>
<li>You probably won&rsquo;t see any dynamic programming problems in your interview, but it&rsquo;s worth being able to recognize a
problem as being a candidate for dynamic programming.</li>
<li>This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.</li>
<li>I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.</li>
<li><input disabled="" type="checkbox"> Videos:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=wAA0AMfcJHQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=18">Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=T3A4jlHlhtA&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=19">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=iPnPVcZmRbE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=20">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3558">Simonson: Dynamic Programming 0 (starts at 59:18) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0EzHjQ_SOeU&amp;index=11&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Simonson: Dynamic Programming I - Lecture 11 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=v1qiRwuJU7g&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=12">Simonson: Dynamic programming II - Lecture 12 (video)</a></li>
<li><input disabled="" type="checkbox"> List of individual DP problems (each is short):
<a href="https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr">Dynamic Programming (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Yale Lecture notes:
<ul>
<li><input disabled="" type="checkbox"> <a href="http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming">Dynamic Programming</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Coursera:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem">The RNA secondary structure problem (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq">A dynamic programming algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2">Illustrating the DP algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm">Running time of the DP algorithm (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation">DP vs. recursive implementation (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6">Global pairwise sequence alignment (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment">Local pairwise sequence alignment (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="design-patterns">Design patterns</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=3cmzqZzwNDM&amp;list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&amp;index=3">Quick UML review (video)</a></li>
<li><input disabled="" type="checkbox"> Learn these patterns:
<ul>
<li><input disabled="" type="checkbox"> strategy</li>
<li><input disabled="" type="checkbox"> singleton</li>
<li><input disabled="" type="checkbox"> adapter</li>
<li><input disabled="" type="checkbox"> prototype</li>
<li><input disabled="" type="checkbox"> decorator</li>
<li><input disabled="" type="checkbox"> visitor</li>
<li><input disabled="" type="checkbox"> factory, abstract factory</li>
<li><input disabled="" type="checkbox"> facade</li>
<li><input disabled="" type="checkbox"> observer</li>
<li><input disabled="" type="checkbox"> proxy</li>
<li><input disabled="" type="checkbox"> delegate</li>
<li><input disabled="" type="checkbox"> command</li>
<li><input disabled="" type="checkbox"> state</li>
<li><input disabled="" type="checkbox"> memento</li>
<li><input disabled="" type="checkbox"> iterator</li>
<li><input disabled="" type="checkbox"> composite</li>
<li><input disabled="" type="checkbox"> flyweight</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLF206E906175C7E07">Series of videos (27 videos)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124">Book: Head First Design Patterns</a>
<ul>
<li>I know the canonical book is &ldquo;Design Patterns: Elements of Reusable Object-Oriented Software&rdquo;, but Head First is great for beginners to OO.</li>
</ul>
</li>
<li><a href="https://sourcemaking.com/design-patterns-and-tips">Handy reference: 101 Design Patterns &amp; Tips for Developers</a></li>
</ul>
</li>
<li>
<h3 id="combinatorics-n-choose-k--probability">Combinatorics (n choose k) &amp; Probability</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=8RRo6Ti9d0U">Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=sZkAAk9Wwa4">Make School: Probability (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=dNaJg-mLobQ">Make School: More Probability and Markov Chains (video)</a></li>
<li><input disabled="" type="checkbox"> Khan Academy:
<ul>
<li>Course layout:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic">Basic Theoretical Probability</a></li>
</ul>
</li>
<li>Just the videos - 41 (each are simple and each are short):
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=uzkc-qNVoOk&amp;list=PLC58778F28211FA19">Probability Explained (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="np-np-complete-and-approximation-algorithms">NP, NP-Complete and Approximation Algorithms</h3>
<ul>
<li>Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,
and be able to recognize them when an interviewer asks you them in disguise.</li>
<li>Know what NP-complete means.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=moPtwq_cVH8&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=23">Computational Complexity (video)</a></li>
<li><input disabled="" type="checkbox"> Simonson:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=2939">Greedy Algs. II &amp; Intro to NP Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=e0tGC6ZQdQE&amp;index=16&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">NP Completeness II &amp; Reductions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=fCX1BGT3wjE&amp;index=17&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">NP Completeness III (Video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NKLDp3Rch3M&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=18">NP Completeness IV (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Skiena:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ItHp5laE1VE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=23">CSE373 2020 - Lecture 23 - NP-Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=inaFJeCzGxU&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=24">CSE373 2020 - Lecture 24 - Satisfiability (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=B-bhKxjZLlc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=25">CSE373 2020 - Lecture 25 - More NP-Completeness (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=_EzetTkG_Cc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=26">CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=eHZifpgyH_4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=22">Complexity: P, NP, NP-completeness, Reductions (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MEz1J9wY2iM&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=24">Complexity: Approximation Algorithms (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=4q-jmGrmxKs&amp;index=25&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Complexity: Fixed-Parameter Algorithms (video)</a></li>
<li>Peter Norvig discusses near-optimal solutions to traveling salesman problem:
<ul>
<li><a href="http://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb">Jupyter Notebook</a></li>
</ul>
</li>
<li>Pages 1048 - 1140 in CLRS if you have it.</li>
</ul>
</li>
<li>
<h3 id="how-computers-process-a-program">How computers process a program</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=XM4lGflQFvA">How CPU executes a program (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/1I5ZMmrOfnA">How computers calculate - ALU (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/fpnE6UAfbtU">Registers and RAM (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/FZGugFqdr60">The Central Processing Unit (CPU) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://youtu.be/zltgXvg6r3k">Instructions and Programs (video)</a></li>
</ul>
</li>
<li>
<h3 id="caches">Caches</h3>
<ul>
<li><input disabled="" type="checkbox"> LRU cache:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=R5ON3iwx78M">The Magic of LRU Cache (100 Days of Google Dev) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=bq6N7Ym81iI">Implementing LRU (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=8-FZRAjR7qU">LeetCode - 146 LRU Cache (C++) (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> CPU cache:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=vjYF_fAZI5E&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&amp;index=24">MIT 6.004 L15: The Memory Hierarchy (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ajgC3-pyGlk&amp;index=25&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-">MIT 6.004 L16: Cache Issues (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="processes-and-threads">Processes and Threads</h3>
<ul>
<li><input disabled="" type="checkbox"> Computer Science 162 - Operating Systems (25 videos):
<ul>
<li>for processes and threads see videos 1-11</li>
<li><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c">Operating Systems and System Programming (video)</a></li>
</ul>
</li>
<li><a href="https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread">What Is The Difference Between A Process And A Thread?</a></li>
<li>Covers:
<ul>
<li>Processes, Threads, Concurrency issues
<ul>
<li>Difference between processes and threads</li>
<li>Processes</li>
<li>Threads</li>
<li>Locks</li>
<li>Mutexes</li>
<li>Semaphores</li>
<li>Monitors</li>
<li>How they work?</li>
<li>Deadlock</li>
<li>Livelock</li>
</ul>
</li>
<li>CPU activity, interrupts, context switching</li>
<li>Modern concurrency constructs with multicore processors</li>
<li><a href="https://youtu.be/O4nwUqQodAg">Paging, segmentation and virtual memory (video)</a></li>
<li><a href="https://youtu.be/iKlAWIKEyuw">Interrupts (video)</a></li>
<li>Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o)</li>
<li>Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)</li>
<li>Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.</li>
<li>Context switching
<ul>
<li>How context switching is initiated by the operating system and underlying hardware?</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M">threads in C++ (series - 10 videos)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k">CS 377 Spring &lsquo;14: Operating Systems from University of Massachusetts</a></li>
<li><input disabled="" type="checkbox"> concurrency in Python (videos):
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1">Short series on threads</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Bs7vPNbB9JM">Python Threads</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Obt-vMVdM8s">Understanding the Python GIL (2010)</a>
<ul>
<li><a href="http://www.dabeaz.com/GIL">reference</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ZzfHjytDceU">Keynote David Beazley - Topics of Interest (Python Asyncio)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=0zaPs8OtyKY">Mutex in Python</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="testing">Testing</h3>
<ul>
<li>To cover:
<ul>
<li>how unit testing works</li>
<li>what are mock objects</li>
<li>what is integration testing</li>
<li>what is dependency injection</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=SAhJf36_u5U">Agile Software Testing with James Bach (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=ILkT_HV9DVU">Open Lecture by James Bach on Software Testing (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://vimeo.com/83960706">Steve Freeman - Test-Driven Development (that’s not what we meant) (video)</a>
<ul>
<li><a href="http://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf">slides</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Dependency injection:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=IKD2-MAkXyQ">video</a></li>
<li><input disabled="" type="checkbox"> <a href="http://jasonpolites.github.io/tao-of-testing/ch3-1.1.html">Tao Of Testing</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://jasonpolites.github.io/tao-of-testing/ch4-1.1.html">How to write tests</a></li>
</ul>
</li>
<li>
<h3 id="string-searching--manipulations">String searching &amp; manipulations</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays">Sedgewick - Suffix Arrays (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/4">Sedgewick - Substring Search (videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG">1. Introduction to Substring Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search">2. Brute-Force Substring Search</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt">3. Knuth-Morris Pratt</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore">4. Boyer-Moore</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT">5. Rabin-Karp</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text">Search pattern in text (video)</a></li>
</ul>
<p>If you need more detail on this subject, see &ldquo;String Matching&rdquo; section in <a href="#additional-detail-on-some-subjects">Additional Detail on Some Subjects</a>.</p>
</li>
<li>
<h3 id="tries">Tries</h3>
<ul>
<li>Note there are different kinds of tries. Some have prefixes, some don&rsquo;t, and some use string instead of bits
to track the path</li>
<li>I read through code, but will not implement</li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/home/week/4">Sedgewick - Tries (3 videos)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries">1. R Way Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries">2. Ternary Search Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations">3. Character Based Operations</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries">Notes on Data Structures and Programming Techniques</a></li>
<li><input disabled="" type="checkbox"> Short course videos:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries">Introduction To Tries (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries">Performance Of Tries (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie">Implementing A Trie (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="https://www.toptal.com/java/the-trie-a-neglected-data-structure">The Trie: A Neglected Data Structure</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/Using%20Tries">TopCoder - Using Tries</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=TJ8SkcUSdbU">Stanford Lecture (real world use case) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=NinWEPPrkDQ&amp;index=16&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf">MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)</a></li>
</ul>
</li>
<li>
<h3 id="floating-point-numbers">Floating Point Numbers</h3>
<ul>
<li><input disabled="" type="checkbox"> simple 8-bit: <a href="https://www.youtube.com/watch?v=ji3SfClm8TU">Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)</a></li>
</ul>
</li>
<li>
<h3 id="unicode">Unicode</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="http://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a></li>
<li><input disabled="" type="checkbox"> <a href="http://kunststube.net/encoding/">What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text</a></li>
</ul>
</li>
<li>
<h3 id="endianness">Endianness</h3>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://web.archive.org/web/20180107141940/http://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html">Big And Little Endian</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=JrNF0KRAlyo">Big Endian Vs Little Endian (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=oBSuXP-1Tc0">Big And Little Endian Inside/Out (video)</a>
<ul>
<li>Very technical talk for kernel devs. Don&rsquo;t worry if most is over your head.</li>
<li>The first half is enough.</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="networking">Networking</h3>
<ul>
<li><strong>If you have networking experience or want to be a reliability engineer or operations engineer, expect questions</strong></li>
<li>Otherwise, this is just good to know</li>
<li><input disabled="" type="checkbox"> <a href="https://www.khanacademy.org/computing/code-org/computers-and-the-internet">Khan Academy</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Vdc8TCESIg8">UDP and TCP: Comparison of Transport Protocols (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=e5DEVa9eSN0">TCP/IP and the OSI Model Explained! (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=nomyRJehhnM">Packet Transmission across the Internet. Networking &amp; TCP/IP tutorial. (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=WGJrLqtX7As">HTTP (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=S2iBR2ZlZf0">SSL and HTTPS (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=Rp3iZUvXWlM">SSL/TLS (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=E9FxNzv1Tr8">HTTP 2.0 (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j">Video Series (21 videos) (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=t5xYI0jzOf4">Subnetting Demystified - Part 5 CIDR Notation (video)</a></li>
<li><input disabled="" type="checkbox"> Sockets:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6G_W54zuadg&amp;t=6s">Java - Sockets - Introduction (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=G75vN2mnJeQ">Socket Programming (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="final-review">Final Review</h2>
<ul>
<li>
<p>This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.
It&rsquo;s nice if you want a refresher often.</p>
</li>
<li>
<p><input disabled="" type="checkbox"> Series of 2-3 minutes short subject videos (23 videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=r4r1DZcx1cM&amp;list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&amp;index=22">Videos</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> Series of 2-5 minutes short subject videos - Michael Sambol (38 videos):</p>
<ul>
<li><a href="https://www.youtube.com/channel/UCzDJwLWoYCUQowF_nG3m5OQ">Videos</a></li>
</ul>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part1">Sedgewick Videos - Algorithms I</a></p>
</li>
<li>
<p><input disabled="" type="checkbox"> <a href="https://www.coursera.org/learn/algorithms-part2">Sedgewick Videos - Algorithms II</a></p>
</li>
</ul>
<hr>
<h2 id="update-your-resume">Update Your Resume</h2>
<ul>
<li>See Resume prep information in the books: &ldquo;Cracking The Coding Interview&rdquo; and &ldquo;Programming Interviews Exposed&rdquo;</li>
<li>I don&rsquo;t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant:
<ul>
<li><a href="https://ayedot.com/97/MiniBlog/Meaning-of-ATS-compliant-resume-and-How-to-create-ATS-Resume-for-Free">How to Create or Check if your Resume is ATS Compliant</a></li>
</ul>
</li>
<li><a href="https://www.careercup.com/resume">&ldquo;This Is What A GOOD Resume Should Look Like&rdquo; by Gayle McDowell (author of Cracking the Coding Interview)</a>,
<ul>
<li>Note by the author: &ldquo;This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.&rdquo;</li>
</ul>
</li>
<li><a href="https://www.techinterviewhandbook.org/resume/guide">&ldquo;Step-by-step resume guide&rdquo; by Tech Interview Handbook</a>
<ul>
<li>Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume</li>
</ul>
</li>
</ul>
<h2 id="find-a-job">Find a Job</h2>
<ul>
<li><a href="https://ayedot.com/151/MiniBlog/Top-10-Best-Websites-for-Careers--Jobs">Sites for Finding Jobs</a></li>
</ul>
<h2 id="interview-process--general-interview-prep">Interview Process &amp; General Interview Prep</h2>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1">How to Pass the Engineering Interview in 2021</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=N233T0epWTs">Demystifying Tech Recruiting</a></li>
<li><input disabled="" type="checkbox"> How to Get a Job at the Big 4:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=YJZCUhxNCv8">How to Get a Job at the Big 4 - Amazon, Facebook, Google &amp; Microsoft (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=6790FVXWBw8&amp;feature=youtu.be">How to Get a Job at the Big 4.1 (Follow-up video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cracking The Coding Interview Set 1:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=rEJzOhC5ZtQ">Gayle L McDowell - Cracking The Coding Interview (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=aClxtDcdpsQ">Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Cracking the Facebook Coding Interview:
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=wCl9kvQGHPI">The Approach</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=4UWDyJq8jZg">Problem Walkthrough</a></li>
</ul>
</li>
<li>Prep Courses:
<ul>
<li><a href="https://www.udemy.com/software-engineer-interview-unleashed">Software Engineer Interview Unleashed (paid course)</a>:
<ul>
<li>Learn how to make yourself ready for software engineer interviews from a former Google interviewer.</li>
</ul>
</li>
<li><a href="https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/">Python for Data Structures, Algorithms, and Interviews (paid course)</a>:
<ul>
<li>A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.</li>
</ul>
</li>
<li><a href="https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513">Intro to Data Structures and Algorithms using Python (Udacity free course)</a>:
<ul>
<li>A free Python centric data structures and algorithms course.</li>
</ul>
</li>
<li><a href="https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256">Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)</a>:
<ul>
<li>Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.</li>
</ul>
</li>
<li><a href="https://www.educative.io/courses/grokking-the-behavioral-interview">Grokking the Behavioral Interview (Educative free course)</a>:
<ul>
<li>Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Mock Interviews:</p>
<ul>
<li><a href="http://www.gainlo.co/#!/">Gainlo.co: Mock interviewers from big companies</a> - I used this and it helped me relax for the phone screen and on-site interview</li>
<li><a href="https://www.pramp.com/">Pramp: Mock interviews from/with peers</a> - peer-to-peer model of practice interviews</li>
<li><a href="https://interviewing.io">interviewing.io: Practice mock interview with senior engineers</a> - anonymous algorithmic/systems design interviews with senior engineers from FAANG anonymously</li>
</ul>
<h2 id="be-thinking-of-for-when-the-interview-comes">Be thinking of for when the interview comes</h2>
<p>Think of about 20 interview questions you&rsquo;ll get, along with the lines of the items below. Have at least one answer for each.
Have a story, not just data, about something you accomplished.</p>
<ul>
<li>
<p>Why do you want this job?</p>
</li>
<li>
<p>What&rsquo;s a tough problem you&rsquo;ve solved?</p>
</li>
<li>
<p>Biggest challenges faced?</p>
</li>
<li>
<p>Best/worst designs seen?</p>
</li>
<li>
<p>Ideas for improving an existing product</p>
</li>
<li>
<p>How do you work best, as an individual and as part of a team?</p>
</li>
<li>
<p>Which of your skills or experiences would be assets in the role and why?</p>
</li>
<li>
<p>What did you most enjoy at [job x / project y]?</p>
</li>
<li>
<p>What was the biggest challenge you faced at [job x / project y]?</p>
</li>
<li>
<p>What was the hardest bug you faced at [job x / project y]?</p>
</li>
<li>
<p>What did you learn at [job x / project y]?</p>
</li>
<li>
<p>What would you have done better at [job x / project y]?</p>
</li>
<li>
<p>If you find it hard to come up with good answers of these types of interview questions, here are some ideas:</p>
<ul>
<li><a href="https://ayedot.com/119/MiniBlog/General-Interview-Questions-and-their-Answers-for-Tech-Jobs">General Interview Questions and their Answers</a></li>
</ul>
</li>
</ul>
<h2 id="have-questions-for-the-interviewer">Have questions for the interviewer</h2>
<p>Some of mine (I already may know the answers, but want their opinion or team perspective):</p>
<ul>
<li>How large is your team?</li>
<li>What does your dev cycle look like? Do you do waterfall/sprints/agile?</li>
<li>Are rushes to deadlines common? Or is there flexibility?</li>
<li>How are decisions made in your team?</li>
<li>How many meetings do you have per week?</li>
<li>Do you feel your work environment helps you concentrate?</li>
<li>What are you working on?</li>
<li>What do you like about it?</li>
<li>What is the work life like?</li>
<li>How is the work/life balance?</li>
</ul>
<h2 id="once-youve-got-the-job">Once You&rsquo;ve Got The Job</h2>
<p>Congratulations!</p>
<p>Keep learning.</p>
<p>You&rsquo;re never really done.</p>
<hr>
<p>Everything below this point is optional. It is NOT needed for an entry-level interview.
However, by studying these, you&rsquo;ll get greater exposure to more CS concepts, and will be better prepared for
any software engineering job. You&rsquo;ll be a much more well-rounded software engineer.</p>
<hr>
<h2 id="additional-books">Additional Books</h2>
<p>📚 These are here so you can dive into a topic you find interesting.</p>
<ul>
<li><a href="https://www.amazon.com/dp/013937681X">The Unix Programming Environment</a>
<ul>
<li>An oldie but a goodie</li>
</ul>
</li>
<li><a href="https://www.amazon.com/dp/1593273894/">The Linux Command Line: A Complete Introduction</a>
<ul>
<li>A modern option</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/TCP/IP_Illustrated">TCP/IP Illustrated Series</a></li>
<li><a href="https://www.amazon.com/gp/product/0596007124/">Head First Design Patterns</a>
<ul>
<li>A gentle introduction to design patterns</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Design Patterns: Elements of Reusable Object-Oriente​d Software</a>
<ul>
<li>AKA the &ldquo;Gang Of Four&rdquo; book, or GOF</li>
<li>The canonical design patterns book</li>
</ul>
</li>
<li><a href="http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202">Algorithm Design Manual</a> (Skiena)
<ul>
<li>As a review and problem recognition</li>
<li>The algorithm catalog portion is well beyond the scope of difficulty you&rsquo;ll get in an interview</li>
<li>This book has 2 parts:
<ul>
<li>Class textbook on data structures and algorithms
<ul>
<li>Pros:
<ul>
<li>Is a good review as any algorithms textbook would be</li>
<li>Nice stories from his experiences solving problems in industry and academia</li>
<li>Code examples in C</li>
</ul>
</li>
<li>Cons:
<ul>
<li>Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects</li>
<li>Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have</li>
<li>Don&rsquo;t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material</li>
</ul>
</li>
</ul>
</li>
<li>Algorithm catalog:
<ul>
<li>This is the real reason you buy this book.</li>
<li>This book is better as an algorithm reference, and not something you read cover to cover.</li>
</ul>
</li>
</ul>
</li>
<li>Can rent it on Kindle</li>
<li>Answers:
<ul>
<li><a href="https://web.archive.org/web/20150404194210/http://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition)">Solutions</a></li>
</ul>
</li>
<li><a href="http://www3.cs.stonybrook.edu/~skiena/algorist/book/errata">Errata</a></li>
</ul>
</li>
<li><a href="https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038">Write Great Code: Volume 1: Understanding the Machine</a>
<ul>
<li>The book was published in 2004, and is somewhat outdated, but it&rsquo;s a terrific resource for understanding a computer in brief</li>
<li>The author invented <a href="https://en.wikipedia.org/wiki/High_Level_Assembly">HLA</a>, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like</li>
<li>These chapters are worth the read to give you a nice foundation:
<ul>
<li>Chapter 2 - Numeric Representation</li>
<li>Chapter 3 - Binary Arithmetic and Bit Operations</li>
<li>Chapter 4 - Floating-Point Representation</li>
<li>Chapter 5 - Character Representation</li>
<li>Chapter 6 - Memory Organization and Access</li>
<li>Chapter 7 - Composite Data Types and Memory Objects</li>
<li>Chapter 9 - CPU Architecture</li>
<li>Chapter 10 - Instruction Set Architecture</li>
<li>Chapter 11 - Memory Architecture and Organization</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X">Introduction to Algorithms</a>
<ul>
<li><strong>Important:</strong> Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won&rsquo;t teach you how to write good code. You have to be able to code a decent solution efficiently</li>
<li>AKA CLR, sometimes CLRS, because Stein was late to the game</li>
</ul>
</li>
<li><a href="https://www.amazon.com/dp/0128119055">Computer Architecture, Sixth Edition: A Quantitative Approach</a>
<ul>
<li>For a richer, more up-to-date (2017), but longer treatment</li>
</ul>
</li>
</ul>
<h2 id="system-design-scalability-data-handling">System Design, Scalability, Data Handling</h2>
<p><strong>You can expect system design questions if you have 4+ years of experience.</strong></p>
<ul>
<li>Scalability and System Design are very large topics with many topics and resources, since
there is a lot to consider when designing a software/hardware system that can scale.
Expect to spend quite a bit of time on this</li>
<li>Considerations:
<ul>
<li>Scalability
<ul>
<li>Distill large data sets to single values</li>
<li>Transform one data set to another</li>
<li>Handling obscenely large amounts of data</li>
</ul>
</li>
<li>System design
<ul>
<li>features sets</li>
<li>interfaces</li>
<li>class hierarchies</li>
<li>designing a system under certain constraints</li>
<li>simplicity and robustness</li>
<li>tradeoffs</li>
<li>performance analysis and optimization</li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>START HERE</strong>: <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a></li>
<li><input disabled="" type="checkbox"> <a href="http://www.hiredintech.com/system-design/">System Design from HiredInTech</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023">How Do I Prepare To Answer Design Questions In A Technical Interview?</a></li>
<li><input disabled="" type="checkbox"> <a href="http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/">8 Things You Need to Know Before a System Design Interview</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=UrYLYV7WSHM">Database Normalization - 1NF, 2NF, 3NF and 4NF (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://github.com/checkcheckzz/system-design-interview">System Design Interview</a> - There are a lot of resources in this one. Look through the articles and examples. I put some of them below</li>
<li><input disabled="" type="checkbox"> <a href="https://web.archive.org/web/20120716060051/http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/">How to ace a systems design interview</a></li>
<li><input disabled="" type="checkbox"> <a href="http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/">Numbers Everyone Should Know</a></li>
<li><input disabled="" type="checkbox"> <a href="http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html">How long does it take to make a context switch?</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=srOgpXECblk">Transactions Across Datacenters (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem">A plain English introduction to CAP Theorem</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></li>
<li><input disabled="" type="checkbox"> Consensus Algorithms:
<ul>
<li><input disabled="" type="checkbox"> Paxos - <a href="https://www.youtube.com/watch?v=s8JqcZtvnsM">Paxos Agreement - Computerphile (video)</a></li>
<li><input disabled="" type="checkbox"> Raft - <a href="https://www.youtube.com/watch?v=P9Ydif5_qvE">An Introduction to the Raft Distributed Consensus Algorithm (video)</a>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://raft.github.io/">Easy-to-read paper</a></li>
<li><input disabled="" type="checkbox"> <a href="http://thesecretlivesofdata.com/raft/">Infographic</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://www.tom-e-white.com/2007/11/consistent-hashing.html">Consistent Hashing</a></li>
<li><input disabled="" type="checkbox"> <a href="http://horicky.blogspot.com/2009/11/nosql-patterns.html">NoSQL Patterns</a></li>
<li><input disabled="" type="checkbox"> Scalability:
<ul>
<li>You don&rsquo;t need all of these. Just pick a few that interest you.</li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=-W9F__D3oY4">Great overview (video)</a></li>
<li><input disabled="" type="checkbox"> Short series:
<ul>
<li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">Clones</a></li>
<li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database">Database</a></li>
<li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache">Cache</a></li>
<li><a href="http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism">Asynchronism</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://www.aosabook.org/en/distsys.html">Scalable Web Architecture and Distributed Systems</a></li>
<li><input disabled="" type="checkbox"> <a href="https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf">Fallacies of Distributed Computing Explained</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=modXC5IWTJI">Jeff Dean - Building Software Systems At Google and Lessons Learned (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="http://lethain.com/introduction-to-architecting-systems-for-scale/">Introduction to Architecting Systems for Scale</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=9nWyWwY2Onc">Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=H4vMcD7zKM0">How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms">The Importance of Algorithms</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html">Sharding</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=p0jGmgIrf_M&amp;list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&amp;index=4">Engineering for the Long Game - Astrid Atkinson Keynote(video)</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html">7 Years Of YouTube Scalability Lessons In 30 Minutes</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=G-lGCC4KKok">video</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html">How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs</a></li>
<li><input disabled="" type="checkbox"> <a href="https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/">How to Remove Duplicates in Large Datasets</a></li>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=3vV4YiqKm1o">A look inside Etsy&rsquo;s scale and engineering culture with Jon Cowie (video)</a></li>
<li><input disabled="" type="checkbox"> <a href="http://thenewstack.io/led-amazon-microservices-architecture/">What Led Amazon to its Own Microservices Architecture</a></li>
<li><input disabled="" type="checkbox"> <a href="https://eng.uber.com/trip-data-squeeze/">To Compress Or Not To Compress, That Was Uber&rsquo;s Question</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html">When Should Approximate Query Processing Be Used?</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html">Google&rsquo;s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html">The Image Optimization Technology That Serves Millions Of Requests Per Day</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html">A Patreon Architecture Short</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html">Tinder: How Does One Of The Largest Recommendation Engines Decide Who You&rsquo;ll See Next?</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html">Design Of A Modern Cache</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html">Live Video Streaming At Facebook Scale</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner&rsquo;s Guide To Scaling To 11 Million+ Users On Amazon&rsquo;s AWS</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html">A 360 Degree View Of The Entire Netflix Stack</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it">Latency Is Everywhere And It Costs You Sales - How To Crush It</a></li>
<li><input disabled="" type="checkbox"> <a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html">Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day</a></li>
<li><input disabled="" type="checkbox"> <a href="http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html">ESPN&rsquo;s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second</a></li>
<li><input disabled="" type="checkbox"> See &ldquo;Messaging, Serialization, and Queueing Systems&rdquo; way below for info on some of the technologies that can glue services together</li>
<li><input disabled="" type="checkbox"> Twitter:
<ul>
<li><a href="https://www.youtube.com/watch?v=5cKTP36HVgI">O&rsquo;Reilly MySQL CE 2011: Jeremy Cole, &ldquo;Big and Small Data at @Twitter&rdquo; (video)</a></li>
<li><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability">Timelines at Scale</a></li>
</ul>
</li>
<li>For even more, see &ldquo;Mining Massive Datasets&rdquo; video series in the <a href="#video-series">Video Series</a> section</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:
<ul>
<li>review: <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a></li>
<li><a href="http://www.hiredintech.com/system-design/">System Design from HiredInTech</a></li>
<li><a href="https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf">cheat sheet</a></li>
<li>flow:
<ol>
<li>Understand the problem and scope:
<ul>
<li>Define the use cases, with interviewer&rsquo;s help</li>
<li>Suggest additional features</li>
<li>Remove items that interviewer deems out of scope</li>
<li>Assume high availability is required, add as a use case</li>
</ul>
</li>
<li>Think about constraints:
<ul>
<li>Ask how many requests per month</li>
<li>Ask how many requests per second (they may volunteer it or make you do the math)</li>
<li>Estimate reads vs. writes percentage</li>
<li>Keep 80/20 rule in mind when estimating</li>
<li>How much data written per second</li>
<li>Total storage required over 5 years</li>
<li>How much data read per second</li>
</ul>
</li>
<li>Abstract design:
<ul>
<li>Layers (service, data, caching)</li>
<li>Infrastructure: load balancing, messaging</li>
<li>Rough overview of any key algorithm that drives the service</li>
<li>Consider bottlenecks and determine solutions</li>
</ul>
</li>
</ol>
</li>
<li>Exercises:
<ul>
<li><a href="https://blog.twitter.com/2010/announcing-snowflake">Design a random unique ID generation system</a></li>
<li><a href="http://www.slideshare.net/dvirsky/introduction-to-redis">Design a key-value database</a></li>
<li><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html">Design a picture sharing system</a></li>
<li><a href="http://ijcai13.org/files/tutorial_slides/td3.pdf">Design a recommendation system</a></li>
<li><a href="http://www.hiredintech.com/system-design/the-system-design-process/">Design a URL-shortener system: copied from above</a></li>
<li><a href="https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/">Design a cache system</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="additional-learning">Additional Learning</h2>
<p>I added them to help you become a well-rounded software engineer, and to be aware of certain
technologies and algorithms, so you&rsquo;ll have a bigger toolbox.</p>
<ul>
<li>
<h3 id="compilers">Compilers</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=IhC7sdYe-Jg">How a Compiler Works in ~1 minute (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=CSZLNYF4Klo">Harvard CS50 - Compilers (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=twodd1KFfGk">C++ (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=FnGCDLhaxKU">Understanding Compiler Optimization (C++) (video)</a></li>
</ul>
</li>
<li>
<h3 id="emacs-and-vim">Emacs and vi(m)</h3>
<ul>
<li>Familiarize yourself with a unix-based code editor</li>
<li>vi(m):
<ul>
<li><a href="https://www.youtube.com/watch?v=5givLEMcINQ&amp;index=1&amp;list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr">Editing With vim 01 - Installation, Setup, and The Modes (video)</a></li>
<li><a href="http://vim-adventures.com/">VIM Adventures</a></li>
<li>set of 4 videos:
<ul>
<li><a href="https://www.youtube.com/watch?v=SI8TeVMX8pk">The vi/vim editor - Lesson 1</a></li>
<li><a href="https://www.youtube.com/watch?v=F3OO7ZIOaJE">The vi/vim editor - Lesson 2</a></li>
<li><a href="https://www.youtube.com/watch?v=ZYEccA_nMaI">The vi/vim editor - Lesson 3</a></li>
<li><a href="https://www.youtube.com/watch?v=1lYD5gwgZIA">The vi/vim editor - Lesson 4</a></li>
</ul>
</li>
<li><a href="http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs">Using Vi Instead of Emacs</a></li>
</ul>
</li>
<li>emacs:
<ul>
<li><a href="https://www.youtube.com/watch?v=hbmV1bnQ-i0">Basics Emacs Tutorial (video)</a></li>
<li>set of 3 (videos):
<ul>
<li><a href="https://www.youtube.com/watch?v=ujODL7MD04Q">Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands</a></li>
<li><a href="https://www.youtube.com/watch?v=XWpsRupJ4II">Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes</a></li>
<li><a href="https://www.youtube.com/watch?v=paSgzPso-yc">Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file and packages</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=JWD1Fpdd4Pc">Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)</a></li>
<li><a href="http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs">Writing C Programs With Emacs</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=48JlgiBpw_I&amp;t=0s">The Absolute Beginner&rsquo;s Guide to Emacs (video by David Wilson)</a></li>
<li><a href="https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/">The Absolute Beginner&rsquo;s Guide to Emacs (notes by David Wilson)</a></li>
</ul>
</li>
<li>
<h3 id="unix-command-line-tools">Unix command line tools</h3>
<ul>
<li>I filled in the list below from good tools.</li>
<li>bash</li>
<li>cat</li>
<li>grep</li>
<li>sed</li>
<li>awk</li>
<li>curl or wget</li>
<li>sort</li>
<li>tr</li>
<li>uniq</li>
<li><a href="https://en.wikipedia.org/wiki/Strace">strace</a></li>
<li><a href="https://danielmiessler.com/study/tcpdump/">tcpdump</a></li>
</ul>
</li>
<li>
<h3 id="information-theory-videos">Information theory (videos)</h3>
<ul>
<li><a href="https://www.khanacademy.org/computing/computer-science/informationtheory">Khan Academy</a></li>
<li>More about Markov processes:
<ul>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation">Core Markov Text Generation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation">Core Implementing Markov Text Generation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through">Project = Markov Text Generation Walk Through</a></li>
</ul>
</li>
<li>See more in MIT 6.050J Information and Entropy series below</li>
</ul>
</li>
<li>
<h3 id="parity--hamming-code-videos">Parity &amp; Hamming Code (videos)</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=q-3BctoUpHE">Intro</a></li>
<li><a href="https://www.youtube.com/watch?v=DdMcAUlxh1M">Parity</a></li>
<li>Hamming Code:
<ul>
<li><a href="https://www.youtube.com/watch?v=1A_NcXxdoCc">Error detection</a></li>
<li><a href="https://www.youtube.com/watch?v=JAMLuxdHH8o">Error correction</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=wbH2VxzmoZk">Error Checking</a></li>
</ul>
</li>
<li>
<h3 id="entropy">Entropy</h3>
<ul>
<li>Also see videos below</li>
<li>Make sure to watch information theory videos first</li>
<li><a href="https://youtu.be/JnJq3Py0dyM?t=176">Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression &amp; Bits (video)</a></li>
</ul>
</li>
<li>
<h3 id="cryptography">Cryptography</h3>
<ul>
<li>Also see videos below</li>
<li>Make sure to watch information theory videos first</li>
<li><a href="https://www.khanacademy.org/computing/computer-science/cryptography">Khan Academy Series</a></li>
<li><a href="https://www.youtube.com/watch?v=KqqOXndnvic&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=30">Cryptography: Hash Functions</a></li>
<li><a href="https://www.youtube.com/watch?v=9TNI2wHmaeI&amp;index=31&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Cryptography: Encryption</a></li>
</ul>
</li>
<li>
<h3 id="compression">Compression</h3>
<ul>
<li>Make sure to watch information theory videos first</li>
<li>Computerphile (videos):
<ul>
<li><a href="https://www.youtube.com/watch?v=Lto-ajuqW3w">Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=M5c_RFKVkko">Entropy in Compression</a></li>
<li><a href="https://www.youtube.com/watch?v=umTbivyJoiI">Upside Down Trees (Huffman Trees)</a></li>
<li><a href="https://www.youtube.com/watch?v=DV8efuB3h2g">EXTRA BITS/TRITS - Huffman Trees</a></li>
<li><a href="https://www.youtube.com/watch?v=goOa3DGezUA">Elegant Compression in Text (The LZ 77 Method)</a></li>
<li><a href="https://www.youtube.com/watch?v=cCDCfoHTsaU">Text Compression Meets Probabilities</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H">Compressor Head videos</a></li>
<li><a href="https://www.youtube.com/watch?v=whGwm0Lky2s">(optional) Google Developers Live: GZIP is not enough!</a></li>
</ul>
</li>
<li>
<h3 id="computer-security">Computer Security</h3>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">MIT (23 videos)</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Introduction, Threat Models</a></li>
<li><a href="https://www.youtube.com/watch?v=6bwzNg5qQ0o&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=2">Control Hijacking Attacks</a></li>
<li><a href="https://www.youtube.com/watch?v=drQyrzRoRiA&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=3">Buffer Overflow Exploits and Defenses</a></li>
<li><a href="https://www.youtube.com/watch?v=6SIJmoE9L9g&amp;index=4&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Privilege Separation</a></li>
<li><a href="https://www.youtube.com/watch?v=8VqTSY-11F4&amp;index=5&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Capabilities</a></li>
<li><a href="https://www.youtube.com/watch?v=VEV74hwASeU&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=6">Sandboxing Native Code</a></li>
<li><a href="https://www.youtube.com/watch?v=chkFBigodIw&amp;index=7&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Web Security Model</a></li>
<li><a href="https://www.youtube.com/watch?v=EBQIGy1ROLY&amp;index=8&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Securing Web Applications</a></li>
<li><a href="https://www.youtube.com/watch?v=yRVZPvHYHzw&amp;index=9&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Symbolic Execution</a></li>
<li><a href="https://www.youtube.com/watch?v=SIEVvk3NVuk&amp;index=11&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Network Security</a></li>
<li><a href="https://www.youtube.com/watch?v=QOtA76ga_fY&amp;index=12&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Network Protocols</a></li>
<li><a href="https://www.youtube.com/watch?v=PuVMkSEcPiI&amp;index=15&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">Side-Channel Attacks</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="garbage-collection">Garbage collection</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=iHVs_HkjdmI">GC in Python (video)</a></li>
<li><a href="https://www.infoq.com/presentations/garbage-collection-benefits">Deep Dive Java: Garbage Collection is Good!</a></li>
<li><a href="https://www.youtube.com/watch?v=P-8Z0-MhdQs&amp;list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&amp;index=3">Deep Dive Python: Garbage Collection in CPython (video)</a></li>
</ul>
</li>
<li>
<h3 id="parallel-programming">Parallel Programming</h3>
<ul>
<li><a href="https://www.coursera.org/learn/parprog1/home/week/1">Coursera (Scala)</a></li>
<li><a href="https://www.youtube.com/watch?v=uY85GkaYzBk">Efficient Python for High Performance Parallel Computing (video)</a></li>
</ul>
</li>
<li>
<h3 id="messaging-serialization-and-queueing-systems">Messaging, Serialization, and Queueing Systems</h3>
<ul>
<li><a href="https://thrift.apache.org/">Thrift</a>
<ul>
<li><a href="http://thrift-tutorial.readthedocs.io/en/latest/intro.html">Tutorial</a></li>
</ul>
</li>
<li><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>
<ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/tutorials">Tutorials</a></li>
</ul>
</li>
<li><a href="http://www.grpc.io/">gRPC</a>
<ul>
<li><a href="https://www.youtube.com/watch?v=5tmPvSe7xXQ&amp;list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&amp;index=1">gRPC 101 for Java Developers (video)</a></li>
</ul>
</li>
<li><a href="http://redis.io/">Redis</a>
<ul>
<li><a href="http://try.redis.io/">Tutorial</a></li>
</ul>
</li>
<li><a href="https://aws.amazon.com/sqs/">Amazon SQS (queue)</a></li>
<li><a href="https://aws.amazon.com/sns/">Amazon SNS (pub-sub)</a></li>
<li><a href="https://www.rabbitmq.com/">RabbitMQ</a>
<ul>
<li><a href="https://www.rabbitmq.com/getstarted.html">Get Started</a></li>
</ul>
</li>
<li><a href="http://www.celeryproject.org/">Celery</a>
<ul>
<li><a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html">First Steps With Celery</a></li>
</ul>
</li>
<li><a href="http://zeromq.org/">ZeroMQ</a>
<ul>
<li><a href="http://zeromq.org/intro:read-the-manual">Intro - Read The Manual</a></li>
</ul>
</li>
<li><a href="http://activemq.apache.org/">ActiveMQ</a></li>
<li><a href="http://kafka.apache.org/documentation.html#introduction">Kafka</a></li>
<li><a href="http://msgpack.org/index.html">MessagePack</a></li>
<li><a href="https://avro.apache.org/">Avro</a></li>
</ul>
</li>
<li>
<h3 id="a">A*</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A Search Algorithm</a></li>
<li><a href="https://www.youtube.com/watch?v=-L-WgKMFuhE">A* Pathfinding (E01: algorithm explanation) (video)</a></li>
</ul>
</li>
<li>
<h3 id="fast-fourier-transform">Fast Fourier Transform</h3>
<ul>
<li><a href="https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/">An Interactive Guide To The Fourier Transform</a></li>
<li><a href="http://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/">What is a Fourier transform? What is it used for?</a></li>
<li><a href="https://www.youtube.com/watch?v=Xxut2PN-V8Q">What is the Fourier Transform? (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=iTMn0Kt18tg&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=4">Divide &amp; Conquer: FFT (video)</a></li>
<li><a href="http://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/">Understanding The FFT</a></li>
</ul>
</li>
<li>
<h3 id="bloom-filter">Bloom Filter</h3>
<ul>
<li>Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)</li>
<li><a href="https://www.youtube.com/watch?v=-SuTGoFYjZs">Bloom Filters (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=qBTdukbzc78">Bloom Filters | Mining of Massive Datasets | Stanford University (video)</a></li>
<li><a href="http://billmill.org/bloomfilter-tutorial/">Tutorial</a></li>
<li><a href="http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/">How To Write A Bloom Filter App</a></li>
</ul>
</li>
<li>
<h3 id="hyperloglog">HyperLogLog</h3>
<ul>
<li><a href="http://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html">How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory</a></li>
</ul>
</li>
<li>
<h3 id="locality-sensitive-hashing">Locality-Sensitive Hashing</h3>
<ul>
<li>Used to determine the similarity of documents</li>
<li>The opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same</li>
<li><a href="http://ferd.ca/simhashing-hopefully-made-simple.html">Simhashing (hopefully) made simple</a></li>
</ul>
</li>
<li>
<h3 id="van-emde-boas-trees">van Emde Boas Trees</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=hmReJCupbNU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=6">Divide &amp; Conquer: van Emde Boas Trees (video)</a></li>
<li><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf">MIT Lecture Notes</a></li>
</ul>
</li>
<li>
<h3 id="augmented-data-structures">Augmented Data Structures</h3>
<ul>
<li><a href="https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc">CS 61B Lecture 39: Augmenting Data Structures</a></li>
</ul>
</li>
<li>
<h3 id="balanced-search-trees">Balanced search trees</h3>
<ul>
<li>
<p>Know at least one type of balanced binary tree (and know how it&rsquo;s implemented):</p>
</li>
<li>
<p>&ldquo;Among balanced search trees, AVL and 2/3 trees are now passé, and red-black trees seem to be more popular.
A particularly interesting self-organizing data structure is the splay tree, which uses rotations
to move any accessed key to the root.&rdquo; - Skiena</p>
</li>
<li>
<p>Of these, I chose to implement a splay tree. From what I&rsquo;ve read, you won&rsquo;t implement a
balanced search tree in your interview. But I wanted exposure to coding one up
and let&rsquo;s face it, splay trees are the bee&rsquo;s knees. I did read a lot of red-black tree code</p>
<ul>
<li>Splay tree: insert, search, delete functions
If you end up implementing red/black tree try just these:</li>
<li>Search and insertion functions, skipping delete</li>
</ul>
</li>
<li>
<p>I want to learn more about B-Tree since it&rsquo;s used so widely with very large data sets</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">Self-balancing binary search tree</a></p>
</li>
<li>
<p><strong>AVL trees</strong></p>
<ul>
<li>In practice:
From what I can tell, these aren&rsquo;t used much in practice, but I could see where they would be:
The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly
balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it
attractive for data structures that may be built once and loaded without reconstruction, such as language
dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)</li>
<li><a href="https://www.youtube.com/watch?v=FNeL18KsWPc&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=6">MIT AVL Trees / AVL Sort (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees">AVL Trees (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation">AVL Tree Implementation (video)</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge">Split And Merge</a></li>
</ul>
</li>
<li>
<p><strong>Splay trees</strong></p>
<ul>
<li>In practice:
Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,
data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,
networking and file system code) etc</li>
<li><a href="https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY">CS 61B: Splay Trees (video)</a></li>
<li>MIT Lecture: Splay Trees:
<ul>
<li>Gets very mathy, but watch the last 10 minutes for sure.</li>
<li><a href="https://www.youtube.com/watch?v=QnPl_Y6EqMo">Video</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Red/black trees</strong></p>
<ul>
<li>These are a translation of a 2-3 tree (see below).</li>
<li>In practice:
Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time.
Not only does this make them valuable in time-sensitive applications such as real-time applications,
but it makes them valuable building blocks in other data structures which provide worst-case guarantees;
for example, many data structures used in computational geometry can be based on red–black trees, and
the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java,
the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor
hashcodes, a Red-Black tree is used</li>
<li><a href="https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3871">Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=hm2GHwyKF1o&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=5">Aduni - Algorithms - Lecture 5 (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">Red-Black Tree</a></li>
<li><a href="https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees">An Introduction To Binary Search And Red Black Tree</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin">[Review] Red-Black Trees (playlist) in 30 minutes (video)</a></li>
</ul>
</li>
<li>
<p><strong>2-3 search trees</strong></p>
<ul>
<li>In practice:
2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).</li>
<li>You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.</li>
<li><a href="https://www.youtube.com/watch?v=C3SsdUqasD4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=2">23-Tree Intuition and Definition (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=iYvBtGKsqSg&amp;index=3&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Binary View of 23-Tree</a></li>
<li><a href="https://www.youtube.com/watch?v=TOb1tuEZ2X4&amp;index=5&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">2-3 Trees (student recitation) (video)</a></li>
</ul>
</li>
<li>
<p><strong>2-3-4 Trees (aka 2-4 trees)</strong></p>
<ul>
<li>In practice:
For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion
operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an
important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce
2-4 trees just before red–black trees, even though <strong>2-4 trees are not often used in practice</strong>.</li>
<li><a href="https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q">CS 61B Lecture 26: Balanced Search Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=DQdMYevEyE4&amp;index=4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">Bottom Up 234-Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=2679VQ26Fp4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=5">Top Down 234-Trees (video)</a></li>
</ul>
</li>
<li>
<p><strong>N-ary (K-ary, M-ary) trees</strong></p>
<ul>
<li>note: the N or K is the branching factor (max branches)</li>
<li>binary trees are a 2-ary tree, with branching factor = 2</li>
<li>2-3 trees are 3-ary</li>
<li><a href="https://en.wikipedia.org/wiki/K-ary_tree">K-Ary Tree</a></li>
</ul>
</li>
<li>
<p><strong>B-Trees</strong></p>
<ul>
<li>Fun fact: it&rsquo;s a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).</li>
<li>In Practice:
B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to
its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary
block in a particular file. The basic problem is turning the file block i address into a disk block
(or perhaps to a cylinder-head-sector) address</li>
<li><a href="https://en.wikipedia.org/wiki/B-tree">B-Tree</a></li>
<li><a href="http://btechsmartclass.com/data_structures/b-trees.html">B-Tree Datastructure</a></li>
<li><a href="https://www.youtube.com/watch?v=I22wEC1tTGo&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=6">Introduction to B-Trees (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=s3bCdZGrgpA&amp;index=7&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">B-Tree Definition and Insertion (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=svfnVhJOfMc&amp;index=8&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6">B-Tree Deletion (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=V3omVLzI0WE&amp;index=7&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf">MIT 6.851 - Memory Hierarchy Models (video)</a>
- covers cache-oblivious B-Trees, very interesting data structures
- the first 37 minutes are very technical, may be skipped (B is block size, cache line size)</li>
<li><a href="https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz">[Review] B-Trees (playlist) in 26 minutes (video)</a></li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="k-d-trees">k-D Trees</h3>
<ul>
<li>Great for finding number of points in a rectangle or higher dimension object</li>
<li>A good fit for k-nearest neighbors</li>
<li><a href="https://www.youtube.com/watch?v=Y4ZgLlDfKDg">kNN K-d tree algorithm (video)</a></li>
</ul>
</li>
<li>
<h3 id="skip-lists">Skip lists</h3>
<ul>
<li>&ldquo;These are somewhat of a cult data structure&rdquo; - Skiena</li>
<li><a href="https://www.youtube.com/watch?v=2g9OSRKJuzM&amp;index=10&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">Randomization: Skip Lists (video)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Skip_list">For animations and a little more detail</a></li>
</ul>
</li>
<li>
<h3 id="network-flows">Network Flows</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=Tl90tNtKvxs">Ford-Fulkerson in 5 minutes — Step by step example (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=v1VgJmkEJW0">Ford-Fulkerson Algorithm (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=2vhN4Ice5jI">Network Flows (video)</a></li>
</ul>
</li>
<li>
<h3 id="disjoint-sets--union-find">Disjoint Sets &amp; Union Find</h3>
<ul>
<li><a href="https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI">UCB 61B - Disjoint Sets; Sorting &amp; selection (video)</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-part1/home/week/1">Sedgewick Algorithms - Union-Find (6 videos)</a></li>
</ul>
</li>
<li>
<h3 id="math-for-fast-processing">Math for Fast Processing</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=eCaXlAaN2uE&amp;index=11&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb">Integer Arithmetic, Karatsuba Multiplication (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=ru7mWZJlRQg">The Chinese Remainder Theorem (used in cryptography) (video)</a></li>
</ul>
</li>
<li>
<h3 id="treap">Treap</h3>
<ul>
<li>Combination of a binary search tree and a heap</li>
<li><a href="https://en.wikipedia.org/wiki/Treap">Treap</a></li>
<li><a href="https://www.youtube.com/watch?v=6podLUYinH8">Data Structures: Treaps explained (video)</a></li>
<li><a href="https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf">Applications in set operations</a></li>
</ul>
</li>
<li>
<h3 id="linear-programming-videos">Linear Programming (videos)</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=M4K6HYLHREQ">Linear Programming</a></li>
<li><a href="https://www.youtube.com/watch?v=2ACJ9ewUC6U">Finding minimum cost</a></li>
<li><a href="https://www.youtube.com/watch?v=8AA_81xI3ik">Finding maximum value</a></li>
<li><a href="https://www.youtube.com/watch?v=44pAWI7v5Zk">Solve Linear Equations with Python - Simplex Algorithm</a></li>
</ul>
</li>
<li>
<h3 id="geometry-convex-hull-videos">Geometry, Convex hull (videos)</h3>
<ul>
<li><a href="https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3164">Graph Alg. IV: Intro to geometric algorithms - Lecture 9</a></li>
<li><a href="https://www.youtube.com/watch?v=J5aJEcOr6Eo&amp;index=10&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm">Geometric Algorithms: Graham &amp; Jarvis - Lecture 10</a></li>
<li><a href="https://www.youtube.com/watch?v=EzeYI7p9MjU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=2">Divide &amp; Conquer: Convex Hull, Median Finding</a></li>
</ul>
</li>
<li>
<h3 id="discrete-math">Discrete math</h3>
<ul>
<li><a href="http://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html">Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t">Discrete Mathematics by Shai Simonson (19 videos)</a></li>
<li><a href="https://nptel.ac.in/courses/106/106/106106183/">Discrete Mathematics By IIT Ropar NPTEL</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="additional-detail-on-some-subjects">Additional Detail on Some Subjects</h2>
<ul>
<li>
<p>I added these to reinforce some ideas already presented above, but didn&rsquo;t want to include them
above because it&rsquo;s just too much. It&rsquo;s easy to overdo it on a subject.
You want to get hired in this century, right?</p>
</li>
<li>
<p><strong>SOLID</strong></p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://www.youtube.com/watch?v=TMuno5RZNeE">Bob Martin SOLID Principles of Object Oriented and Agile Design (video)</a></li>
<li><input disabled="" type="checkbox"> S - <a href="http://www.oodesign.com/single-responsibility-principle.html">Single Responsibility Principle</a> | <a href="http://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html">Single responsibility to each Object</a>
<ul>
<li><a href="https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> O - <a href="http://www.oodesign.com/open-close-principle.html">Open/Closed Principle</a>  | <a href="https://en.wikipedia.org/wiki/Open/closed_principle">On production level Objects are ready for extension but not for modification</a>
<ul>
<li><a href="http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> L - <a href="http://www.oodesign.com/liskov-s-substitution-principle.html">Liskov Substitution Principle</a> | <a href="http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle">Base Class and Derived class follow ‘IS A’ Principle</a>
<ul>
<li><a href="http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> I - <a href="http://www.oodesign.com/interface-segregation-principle.html">Interface segregation principle</a> | clients should not be forced to implement interfaces they don&rsquo;t use
<ul>
<li><a href="https://www.youtube.com/watch?v=3CtAfl7aXAQ">Interface Segregation Principle in 5 minutes (video)</a></li>
<li><a href="http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&amp;hl=en">more flavor</a></li>
</ul>
</li>
<li><input disabled="" type="checkbox"> D -<a href="http://www.oodesign.com/dependency-inversion-principle.html">Dependency Inversion principle</a> | Reduce the dependency In composition of objects.
<ul>
<li><a href="http://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important">Why Is The Dependency Inversion Principle And Why Is It Important</a></li>
<li><a href="http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&amp;hl=en">more flavor</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Union-Find</strong></p>
<ul>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/JssSY/overview">Overview</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations">Naive Implementation</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees">Trees</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank">Union By Rank</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression">Path Compression</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional">Analysis Options</a></li>
</ul>
</li>
<li>
<p><strong>More Dynamic Programming</strong> (videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=r4-cftqTcdI&amp;ab_channel=MITOpenCourseWare">6.006: Dynamic Programming I: Fibonacci, Shortest Paths</a></li>
<li><a href="https://www.youtube.com/watch?v=KLBCUx1is2c&amp;ab_channel=MITOpenCourseWare">6.006: Dynamic Programming II: Text Justification, Blackjack</a></li>
<li><a href="https://www.youtube.com/watch?v=TDo3r5M1LNo&amp;ab_channel=MITOpenCourseWare">6.006: DP III: Parenthesization, Edit Distance, Knapsack</a></li>
<li><a href="https://www.youtube.com/watch?v=i9OAOk0CUQE&amp;ab_channel=MITOpenCourseWare">6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.</a></li>
<li><a href="https://www.youtube.com/watch?v=Tw1k46ywN6E&amp;index=14&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">6.046: Dynamic Programming &amp; Advanced DP</a></li>
<li><a href="https://www.youtube.com/watch?v=NzgFUwOaoIw&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=15">6.046: Dynamic Programming: All-Pairs Shortest Paths</a></li>
<li><a href="https://www.youtube.com/watch?v=krZI60lKPek&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=12">6.046: Dynamic Programming (student recitation)</a></li>
</ul>
</li>
<li>
<p><strong>Advanced Graph Processing</strong> (videos)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=mUBmcbbJNf4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=27">Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees</a></li>
<li><a href="https://www.youtube.com/watch?v=kQ-UQAzcnzA&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=28">Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees</a></li>
</ul>
</li>
<li>
<p>MIT <strong>Probability</strong> (mathy, and go slowly, which is good for mathy things) (videos):</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=SmFwFdESMHI&amp;index=18&amp;list=PLB7540DEDD482705B">MIT 6.042J - Probability Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=E6FbvM-FGZ8&amp;index=19&amp;list=PLB7540DEDD482705B">MIT 6.042J - Conditional Probability</a></li>
<li><a href="https://www.youtube.com/watch?v=l1BCv3qqW4A&amp;index=20&amp;list=PLB7540DEDD482705B">MIT 6.042J - Independence</a></li>
<li><a href="https://www.youtube.com/watch?v=MOfhhFaQdjw&amp;list=PLB7540DEDD482705B&amp;index=21">MIT 6.042J - Random Variables</a></li>
<li><a href="https://www.youtube.com/watch?v=gGlMSe7uEkA&amp;index=22&amp;list=PLB7540DEDD482705B">MIT 6.042J - Expectation I</a></li>
<li><a href="https://www.youtube.com/watch?v=oI9fMUqgfxY&amp;index=23&amp;list=PLB7540DEDD482705B">MIT 6.042J - Expectation II</a></li>
<li><a href="https://www.youtube.com/watch?v=q4mwO2qS2z4&amp;index=24&amp;list=PLB7540DEDD482705B">MIT 6.042J - Large Deviations</a></li>
<li><a href="https://www.youtube.com/watch?v=56iFMY8QW2k&amp;list=PLB7540DEDD482705B&amp;index=25">MIT 6.042J - Random Walks</a></li>
</ul>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=oDniZCmNmNw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=19">Simonson: Approximation Algorithms (video)</a></p>
</li>
<li>
<p><strong>String Matching</strong></p>
<ul>
<li>Rabin-Karp (videos):
<ul>
<li><a href="https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw">Rabin Karps Algorithm</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation">Precomputing</a></li>
<li><a href="https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis">Optimization: Implementation and Analysis</a></li>
<li><a href="https://www.youtube.com/watch?v=BRO7mVIFt08&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=9">Table Doubling, Karp-Rabin</a></li>
<li><a href="https://www.youtube.com/watch?v=w6nuXg0BISo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=32">Rolling Hashes, Amortized Analysis</a></li>
</ul>
</li>
<li>Knuth-Morris-Pratt (KMP):
<ul>
<li><a href="https://www.youtube.com/watch?v=5i7oKodCRJo">TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm</a></li>
</ul>
</li>
<li>Boyer–Moore string search algorithm
<ul>
<li><a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm">Boyer-Moore String Search Algorithm</a></li>
<li><a href="https://www.youtube.com/watch?v=QDZpzctPf10">Advanced String Searching Boyer-Moore-Horspool Algorithms (video)</a></li>
</ul>
</li>
<li><a href="https://www.coursera.org/learn/algorithms-on-strings/home/week/1">Coursera: Algorithms on Strings</a>
<ul>
<li>starts off great, but by the time it gets past KMP it gets more complicated than it needs to be</li>
<li>nice explanation of tries</li>
<li>can be skipped</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Sorting</strong></p>
<ul>
<li>Stanford lectures on sorting:
<ul>
<li><a href="https://www.youtube.com/watch?v=ENp00xylP7c&amp;index=15&amp;list=PLFE6E58F856038C69">Lecture 15 | Programming Abstractions (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=y4M9IVgrVKo&amp;index=16&amp;list=PLFE6E58F856038C69">Lecture 16 | Programming Abstractions (video)</a></li>
</ul>
</li>
<li>Shai Simonson, <a href="http://www.aduni.org/">Aduni.org</a>:
<ul>
<li><a href="https://www.youtube.com/watch?v=odNJmw5TOEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=2">Algorithms - Sorting - Lecture 2 (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=hj8YKFTFKEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=3">Algorithms - Sorting II - Lecture 3 (video)</a></li>
</ul>
</li>
<li>Steven Skiena lectures on sorting:
<ul>
<li><a href="https://www.youtube.com/watch?v=jUf-UQ3a0kg&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=8">CSE373 2020 - Mergesort/Quicksort (video)</a></li>
<li><a href="https://www.youtube.com/watch?v=0ksyQKmre84&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=9">CSE373 2020 - Linear Sorting (video)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="video-series">Video Series</h2>
<p>Sit back and enjoy.</p>
<ul>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr">List of individual Dynamic Programming problems (each is short)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0">x86 Architecture, Assembly, Applications (11 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8">MIT 18.06 Linear Algebra, Spring 2005 (35 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL3B08AE665AB9002A">Excellent - MIT Calculus Revisited: Single Variable Calculus</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=22hwcnXIGgk&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=1">Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd">UC Berkeley 61B (Spring 2014): Data Structures (25 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C">UC Berkeley 61B (Fall 2006): Data Structures (39 videos)</a></p>
</li>
<li>
<p><a href="https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_">UC Berkeley 61C: Machine Structures (26 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO">OOSE: Software Dev Using UML and Java (21 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu">MIT 6.004: Computation Structures (49 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq">Carnegie Mellon - Computer Architecture Lectures (39 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;nohtml5=False">MIT 6.006: Intro to Algorithms (47 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=zm2VP0kHl1M&amp;list=PL6535748F59DCA484">MIT 6.033: Computer System Engineering (22 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi">MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=L3LMbpZIKhQ&amp;list=PLB7540DEDD482705B">MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=2P-yW7LQr08&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp">MIT 6.046: Design and Analysis of Algorithms (34 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=T0yzrZL1py0&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=1">MIT 6.851: Advanced Data Structures (22 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c">MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf">Harvard COMPSCI 224: Advanced Algorithms (25 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh">MIT 6.858 Computer Systems Security, Fall 2014</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL9D558D49CA734A02">Stanford: Programming Paradigms (27 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy">Introduction to Cryptography by Christof Paar</a></p>
<ul>
<li><a href="http://www.crypto-textbook.com/">Course Website along with Slides and Problem Sets</a></li>
</ul>
</li>
<li>
<p><a href="https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV">Mining Massive Datasets - Stanford University (94 videos)</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&amp;view=50&amp;sort=dd">Graph Theory by Sarada Herke (67 videos)</a></p>
</li>
</ul>
<h2 id="computer-science-courses">Computer Science Courses</h2>
<ul>
<li><a href="https://github.com/open-source-society/computer-science">Directory of Online CS Courses</a></li>
<li><a href="https://github.com/prakhar1989/awesome-courses">Directory of CS Courses (many with online lectures)</a></li>
</ul>
<h2 id="algorithms-implementation">Algorithms implementation</h2>
<ul>
<li><a href="https://algs4.cs.princeton.edu/code">Multiple Algorithms implementation by Princeton University</a></li>
</ul>
<h2 id="papers">Papers</h2>
<ul>
<li><a href="https://www.cs.cmu.edu/~crary/819-f09/">Love classic papers?</a></li>
<li><a href="http://spinroot.com/courses/summer/Papers/hoare_1978.pdf">1978: Communicating Sequential Processes</a>
<ul>
<li><a href="https://godoc.org/github.com/thomas11/csp">implemented in Go</a></li>
</ul>
</li>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf">2003: The Google File System</a>
<ul>
<li>replaced by Colossus in 2012</li>
</ul>
</li>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf">2004: MapReduce: Simplified Data Processing on Large Clusters</a>
<ul>
<li>mostly replaced by Cloud Dataflow?</li>
</ul>
</li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf">2006: Bigtable: A Distributed Storage System for Structured Data</a></li>
<li><a href="https://research.google.com/archive/chubby-osdi06.pdf">2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems</a></li>
<li><a href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf">2007: Dynamo: Amazon’s Highly Available Key-value Store</a>
<ul>
<li>The Dynamo paper kicked off the NoSQL revolution</li>
</ul>
</li>
<li><a href="https://www.akkadia.org/drepper/cpumemory.pdf">2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)</a></li>
<li>2012: AddressSanitizer: A Fast Address Sanity Checker:
<ul>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf">paper</a></li>
<li><a href="https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany">video</a></li>
</ul>
</li>
<li>2013: Spanner: Google’s Globally-Distributed Database:
<ul>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">paper</a></li>
<li><a href="https://www.usenix.org/node/170855">video</a></li>
</ul>
</li>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf">2015: Continuous Pipelines at Google</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf">2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads</a></li>
<li><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf">2015: How Developers Search for Code: A Case Study</a></li>
<li>More papers: <a href="https://github.com/0voice/computer_expert_paper">1,000 papers</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Computer Networks Notes</title>
      <link>https://samirpaul1.github.io/blog/posts/computer-networks-notes/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/computer-networks-notes/</guid>
      <description>Computer Networks Notes</description>
      <content:encoded><![CDATA[<h1 id="chapter-1-computer-networks-and-the-internet">Chapter 1: Computer Networks and the Internet</h1>
<h2 id="11-what-is-the-internet">1.1 What is the Internet?</h2>
<h3 id="111-a-nuts-and-bolts-description">1.1.1 A nuts-and-bolts description</h3>
<p>The Internet is a computer networks that interconnects hundreds of millions of computing devices through the world. Today not only computers and workstation are being connected to the network, therefore the term <em>computer network</em> may sound a bit dated.</p>
<p>All the devices connected to the Internet are called <strong>hosts</strong> or <strong>end systems</strong>. End systems are connected together by a network of <strong>communication links</strong> and <strong>packets switches</strong>.</p>
<p>Different links can transmit data at different rates, with the <strong>transmission rate</strong> of a link measured in bits/second.</p>
<p>When one end system has data to send to another end system, the sending end system <em>segments</em> the data and adds <em>header bytes</em> to each segment. The resulting packages of information, called <strong>packets</strong>, are then sent through the network to the destination and system where they a reassembled into the original data.</p>
<p>A packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. The two most prominent types of packets switches are <strong>routers</strong> and <strong>link switches</strong>. The sequence of communication links and packet switches traversed by a packet from the sending end system to the receiving end system is known as <strong>route</strong> or <strong>path</strong>.</p>
<p>End systems access the Internet through <strong>Internet Service Providers (ISPs)</strong>, including residential ISPs (cable or phone company), corporate, university ISPs &hellip;
Each ISP in itself is a network of packet switches and communication links.
<em>Lower tier</em> (which interconnect end-systems) ISPs are interconnected through national and international <em>upper tier</em> ISP. An upper-tier ISP consists of high speed routers interconnected with high-speed fiber-optic links. Each ISP network is managed independently.</p>
<p>End systems, packet switches and other pieces of the Internet run <strong>protocols</strong> that control the sending and receiving of information within the Internet.</p>
<h3 id="112-a-services-description">1.1.2 A Services Description</h3>
<p>The Internet can be described as <em>an infrastructure that provides services to applications</em>. These applications (Web, social networks, VoIP&hellip;) are said to be <strong>distributed</strong> since they involve multiple end systems that exchange data with each other.
<strong>Internet applications run on end systems, not in the packet switches or routers</strong>, packet switches facilitate the exchange of data, but they are not concerned with the application that is the source or sink of data.</p>
<p>End systems attached to the Internet provide and <strong>Application Programming Interface (API)</strong> that specifies how a program running on one end system asks the Internet infrastructure to deliver data to a specific destination program running on another end system.</p>
<h3 id="113-what-is-a-protocol">1.1.3 What Is a Protocol?</h3>
<p>All the activity in the Internet that involves two or more communicating remote entities is governed by a protocol.</p>
<p><strong>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as weel as the actions taken on the trasmission and/or receipt of a message or other event</strong></p>
<h2 id="12-the-network-edge">1.2 The Network Edge</h2>
<p>Computers and other devices connected to the Internet are often referred to as <em>end systems</em> as they sit at the edge of the Internet. They are also called <em>hosts</em> as they host, run, applications programs such as a Web Browser or an email client.</p>
<p>Hosts are sometimes further divided into two categories: <em>clients</em> and <em>servers</em>. The former being desktop, mobile pcs, smartphones, the latter being powerful machines that store and distribute Web pages, streams&hellip;
Nowadays most of the servers reside in large <em>data centers</em></p>
<h3 id="121-access-networks">1.2.1 Access Networks</h3>
<p>They are the networks that physically connect end systems to the first router on a path from the end system to any other distant end system.
Examples: mobile network, national or global ISP, local or regional ISP, home networks enterprise networks.</p>
<h4 id="home-access-dsl-cable-fith-dial-up-and-satellite">Home Access: DSL, Cable, FITH, Dial-Up and Satellite</h4>
<p>Today, the two most prevalent types of broadband residential access are <strong>digital subscriber line (DSL)</strong> and <strong>cable</strong>.</p>
<p>A residence typically obtains DSL access from the telephone company (telco) that provides its wired local phone access. The customer&rsquo;s telco is therefore its ISP.
DSL modem use the existing telephone lines to exchange data with DSLAMs (digital subscriber line access multiplexer) located in the telco local central office. The DSL modem takes digital data and translates it to high-frequency tones for transmission over telephone wires, these analog signals from many houses are translated back into digital format at the DSLAM. The use of different frequencies allows the phone line to carry a high-speed downstream channel, a medium-speed upstream channel and an ordinary two-way telephone channel.
Hundreds or even thousands of households connect to a single DSLAM.</p>
<p>DSL: 24 Mbps downstream and 2.5 Mbps upstream (MAX VALUES). Because of the difference between these two values, the access is said to be <strong>asymmetric</strong>.</p>
<p><strong>Cable Internet</strong> access makes use of the cable television company&rsquo;s existing cable television infrastructure. Cable modems connect to CMTS (Cablem Modem Termination System) which does the same job the DSLAM does for phone lines. The access is typically asymmetric.
CABLE: 42.8 Mbps downstream and 30.7 Mbps upstream (MAX VALUES).
Cable Internet access is a shared broadcast medium: each packet travels downstream on every link to every home and viceversa. For this, if several users are simultaneously using the downstream channel, the actual rate will be significantly lower.</p>
<p>Another up-and-coming technology that promises very high speeds is <strong>fiber to the home (FTTH)</strong>. The concept is simple: provide an optical fiber path from the Central Office (CO)</p>
<h4 id="access-in-the-enterprise-and-the-home-ethernet-and-wifi">Access in the Enterprise and the Home: Ethernet and WiFi</h4>
<p>On corporate and university campuses, and increasingly in home settings, a <strong>Local Area Network (LAN)</strong> is used to connect an end system to the edge router.
Ethernet is by far the most prevalent access technology is corporate, university and home networks. Ethernet uses twisted-pair copper wire to connect to an Ethernet switch which is connected into the larger Internet.
The Internet is increasingly accessed wirelessly: wireless users transmit/receive packets to/from an access point connected into the enterprise&rsquo;s network which in turn is connected to the wired Internet.</p>
<h4 id="wide-area-wireless-access-3g-and-lte">Wide-Area Wireless Access: 3G and LTE</h4>
<p>Smartphones and Tablets employ the same wireless infrastructure used for cellular telephony to send/receive packets through a base station operated by the cellular network provider. Third generation (3G) wireless and fourth generation (4G) of wide-area network are being deployed. LTE (&ldquo;Long-Term Evolution&rdquo;) has its root in 3G and can potentially achieve rates in excess of 10 Mbps.</p>
<h3 id="122-physical-media">1.2.2 Physical Media</h3>
<p>The book talks about it in detail but we haven&rsquo;t talked about it in class</p>
<p>A bit, when traveling from source to destination, passes through a series of transmitter-receiver pairs, for each pair, the bit is sent by propagating electromagnetic waves or optical pulses across a <strong>physical medium</strong>. This can take many shapes and forms and doesn&rsquo;t have to be of the same type for each transmitter-receiver pair along the path.
Physical media fall into two categories:</p>
<ul>
<li><strong>guided media</strong>: the waves are guided along a solid medium (fiber-optic cable, twisted-pair copper wire, coaxial cable)</li>
<li><strong>unguided media</strong>: the waves propagate in the atmosphere and in outer space (wireless LAN, digital satellite channel)</li>
</ul>
<h2 id="13-the-network-core">1.3 The Network Core</h2>
<h3 id="131-packet-switching">1.3.1 Packet Switching</h3>
<p>In a network application, end systems exchange <strong>messages</strong> with each other. To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as <strong>packets</strong>.
Between source and destination, each packet travels through communication links and <strong>packet switches</strong> (for which there are two predominant types, <strong>routers</strong> and <strong>link-layer switches</strong>).
Packets are transmitted over each communication link at a rate equal to the <em>full</em> transmission rate of the link. So, if a source end system or a packet switch is send a packet of L bits over a link with transmission rate R bits/sec, then the time to transmit the packet is L/R seconds.</p>
<h4 id="store-and-forward-transmission">Store-and-forward Transmission</h4>
<p>Most packet switches use <strong>store-and-forward transmission</strong> at the inputs to the links. Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. The link must <strong>buffer</strong> (&ldquo;store&rdquo;) the packet&rsquo;s bits and only after the router has received all of the packet&rsquo;s bits can it begin to transmit (&ldquo;forward&rdquo;) the packet onto the outbound link.</p>
<h4 id="queuing-delays-and-packet-loss">Queuing Delays and Packet Loss</h4>
<p>Each packet switch has multiple links attached to it. For each attached link, the packet switch has an <strong>output buffer</strong> (or <strong>output queue</strong>) which stores packets that the router is about to send into that link.
If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. Thus, packets suffer output buffer <strong>queuing delays</strong> which are variable and depend on the level of congestion in the network. Since the amount of buffer space is finite, an arriving packet may find the buffer completely full. In this case, <strong>packet loss</strong> will occur, either the arriving packet or one of the already queued packets will be dropped.</p>
<h4 id="forwarding-tables-and-routing-protocols">Forwarding tables and routing protocols</h4>
<p>In the Internet, every end system has an address called an IP address. When a source end system wants to send a packet to a destination end system, the source includes the destination&rsquo;s IP address in the packet&rsquo;s header.
Each router has a <strong>forwarding table</strong> that maps destination addresses (or portions of the destination addresses) to that router&rsquo;s outbound links. When a packet arrives at the router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link.
A number of special <strong>routing protocols</strong> are used to automatically set the forwarding tables.</p>
<h3 id="132-circuit-switching">1.3.2 Circuit Switching</h3>
<p>In circuit-switched networks, the resources needed along a path(buffers, link transmission rate) to provide for communication between the end systems are <strong>reserved</strong> for the duration of the communication sessions.
When two hosts want to communicate, the network establishes a <strong>dedicated end-to-end connection</strong> between them.</p>
<h4 id="multiplexing-in-circuit-switched-networks">Multiplexing in Circuit-Switched Networks</h4>
<p>A circuit in a link is implemented with either <strong>frequency-division multiplexing (FDM)</strong> or <strong>time-division multiplexing (TDM)</strong>.
With FDM, the frequency spectrum of a link is divided up among the connections established across the link. The width of the band is called the <strong>bandwidth</strong>.
For a TDM link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots.</p>
<h4 id="packet-switching-versus-circuit-switching">Packet Switching Versus Circuit Switching</h4>
<p>Packet switching is more flexible, uses resources efficiently and is simpler to implement (even if it requires congestion control).
Circuit switching offers performance guarantees but uses resources inefficiently</p>
<h3 id="133-a-network-of-networks">1.3.3 A Network of Networks</h3>
<p>To create the Internet, ISPs must be interconnected, thus creating a <em>network of networks</em>.
Much of the evolution of the structure of the Internet is driven by economics and national policy, rather than by performance consideration.</p>
<p>Today&rsquo;s Internet is complex, consisting of a dozen or so tier-1 ISPs and hundreds of thousands of lower-tier ISPs. The ISPs are diverse in their coverage, with some spanning multiple continents and oceans, and others limited to narrow geographic regions. The lower-tier ISPs connect to the higher-tier ISPs and the higher-tier ISPs interconnect with one another. Users and content providers are customers of lower-tier ISPs and lower-tier ISPs are customers of higher-tier ISPs. Recently, major content providers (Google) have also created their own networks and connect directly into lower-tier ISPs where possible.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-network_of_networks.png" alt="network_of_networks"  />
</p>
<h2 id="14-delay-loss-and-throughput-in-packet-switched-networks">1.4 Delay, Loss and Throughput in Packet-Switched Networks</h2>
<p>Computer networks necessarily constrain <strong>throughput</strong> (the amount of data per second that can be transferred) between end system, introduce delays between end systems and can actually lose packets.</p>
<h3 id="141-overview-of-delay-in-packet-switched-networks">1.4.1 Overview of Delay in Packet-Switched networks</h3>
<p>As a packet travels from one node (host or router) to the subsequent host along his path, it suffers from several types of delays at <em>each</em> node along the path.</p>
<h4 id="types-of-delay">Types of Delay</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-type_of_delays.png" alt="type_of_delays"  />
</p>
<h5 id="processing-delay">Processing Delay</h5>
<p>The <strong>processing delay</strong> consists of the time required to examine the packet&rsquo;s header and determine where to direct the packet. It may also include other factors, such as the time needed to check for bit-level errors occurred during transmission.
They typically are of the order of microseconds or less.
After processing the packet is sent to the queue preceding the link to the next router</p>
<h5 id="queuing-delay">Queuing Delay</h5>
<p>At the queue, the packet experiences a <strong>queuing delay</strong> as it waits to be transmitted onto the link. It depends on the number of earlier-arriving packets, therefore if the queue is empty, then the packet&rsquo;s queuing delay will be 0.
Typically of the order of microseconds or milliseconds.</p>
<h5 id="transmission-delays">Transmission delays</h5>
<p>If the length of the packet is <em>L</em> bits, and the <strong>transmission rate</strong> of the link is <em>R</em> bits/sec, then the <strong>transmission delay</strong> is <em>L/R</em>.
This is the amount of time required to push (transmit) all of the packet&rsquo;s bits into the link.
Typically on the order of microseconds to milliseconds.</p>
<h5 id="propagation-delay">Propagation Delay</h5>
<p>The time required to propagate a bit from the beginning of the link to the next router is the <strong>propagation delay</strong>. The bit propagates at the propagation speed of the link, which depends on the physical medium of the link.
The propagation delay is the distance between two routers divided by the propagation speed of the link.</p>
<h5 id="total-nodal-delay">Total nodal delay</h5>
<p>it is the summation of the previous delays</p>
<h3 id="142-queuing-delay-and-packet-loss">1.4.2 Queuing Delay and Packet Loss</h3>
<p>The queuing delay depends can vary from packet to packet, therefore when characterizing queuing delay, one typically uses statistical measures, such as <em>average queuing delay, variance of queuing delay, and the probability that the queuing delay exceeds some specified value</em>.</p>
<h4 id="packet-loss">Packet Loss</h4>
<p>A queue preceding a link has finite capacity. If a packet finds a full queue, then the router will <strong>drop</strong> it, the packet will be lost.
The fraction of lost packets increases as the traffic intensity increases.</p>
<h3 id="143-end-to-end-delay">1.4.3 End-to-End Delay</h3>
<p>Let&rsquo;s now consider the <strong>total delay, from source to destination</strong> (not only the nodal delay). Let&rsquo;s suppose there are <em>N-1</em> routers between the source host and the destination host, then the nodal delays accumulate and give an <strong>end-to-end delay</strong>:</p>
<pre tabindex="0"><code>d(end_end) = N * [d(proc) + d(queue) + d(trans) + d(prop)]
</code></pre><h3 id="144-throughput-in-computer-networks">1.4.4 Throughput in Computer Networks</h3>
<p>Another critical performance measure in computer networks is <em>end-to-end throughput</em>.
The <strong>instantaneous throughput</strong> at any instant of time is the rate (in bits/sec) at which host B is receiving a file.
If the file consists of <em>F</em> bits and the transfers takes <em>T</em> seconds to transfer the whole file, then the <strong>average throughput</strong> of the file is <em>F/T bits/sec</em>.
For a simple two-link network, the throughput is the min of all the throughputs, that is the transmission rate of the <strong>bottleneck link</strong>.
Therefore, the constraining factor for throughput in today&rsquo;s Internet is typically the <em>access network</em>.</p>
<h2 id="15-protocol-layers-and-their-service-models">1.5 Protocol Layers and Their Service Models</h2>
<h3 id="151-layered-architecture">1.5.1 Layered Architecture</h3>
<p>A layered architecture allows us to discuss a well-defined, specific part of a large and complex system. This simplification itself is of considerable value by providing <em>modularity</em>, making it much easier to change the implementation of the service provided by the layer: as long as the layer provides the same service to the layer above it, and uses the same services from the layer below it, the remainder of the system remains unchanged when a layer&rsquo;s implementation is changed.</p>
<h4 id="protocol-layering">Protocol Layering</h4>
<p>To provide structure to the design of network protocols, the network designers organize protocols in <strong>layers</strong>. <strong>Each protocol belongs to one of the layers</strong>. We are interested in the <strong>services</strong> that a layer offers to the layer above, <strong>service model</strong> of a layer.
When taken together, the protocols of the various layers are called the <strong>protocol stack</strong>. The Internet protocol stack consists of five layers:</p>
<ul>
<li>Application</li>
<li>Transport</li>
<li>Network</li>
<li>Link</li>
<li>Physical</li>
</ul>
<h5 id="application-layer">Application Layer</h5>
<p>Where network applications and their applications-layer protocols reside.
The Internet&rsquo;s application layer includes many protocols: HTTP, SMTP, FTP, DNS.
An application-layer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. This packet of information at the application layer is called <strong>message</strong>.</p>
<h5 id="transport-layer">Transport Layer</h5>
<p>It transports application-layer messages between application endpoints.
In the Internet there are two transport protocols: TCP and UDP.
TCP provides a connection-oriented service to its application: the service includes guaranteed delivery of application-layer messages to the destination and flow control unit. TCP also breaks long messages into shorter segments and provides a <strong>congestion-control mechanism</strong>, so that a source throttles its transmission rate when the network is congested.
HTTP and SMTP use TCP</p>
<p>UDP provides a connectionless service to its applications: it&rsquo;s a no-frills service that provides no guarantees, no reliability, no flow control and no congestion control.
A transport-layer packet is called <strong>segment</strong>
Skype uses UDP (speed required)</p>
<h5 id="network-layer">Network Layer</h5>
<p>It is responsible for moving network-layer packets known as <strong>datagrams</strong> from one host to another.
The Internet&rsquo;s network layer includes the IP Protocol. There is only one IP Protocol and all the Internet components that have a network layer must run it.
The Internet&rsquo;s network layer also contains routing protocols that determine the routes that datagrams take between sources and destinations.
The Internet has many routing protocols.
Often it is simply referred to as the IP protocols, forgetting that it includes routing too.</p>
<h5 id="link-layer">Link Layer</h5>
<p>To move a packet from one node to the next, the network layer relies on the services of the link layer.
The services provided by the link layer depend on the specific link-layer protocol that is employed over the link.
Examples are Ethernet, WiFi.
We will refer to the link-layer packets as <strong>frames</strong></p>
<h5 id="physical-layer">Physical Layer</h5>
<p>The job of the physical layer is to move the individual bits within the frame from one node to the next.
The protocols are link dependent and further depend of the actual transmission medium of the link.</p>
<h3 id="152-encapsulation">1.5.2 Encapsulation</h3>
<p>Routers and link-layer switches are both packet switches but routers and link-layer switches do not implement all of the layers in the protocol stack: link-layer switches implement Physical and Link while router add the Network Layer too.</p>
<p>From the Application Layer, the message passes to the transport layer, which appends additional information to it (the <strong>Header</strong>) that will be used by the receiver-side transport layer. The transport layer then adds its own header and passes the datagram to the link layer which adds it own link-layer header information.
Thus, we see that at each layer, a packet has two types of fields: <strong>header fields</strong> and a <strong>payload field</strong>, the payload typically being the packet from the layer above.</p>
<p>The process of encapsulation can be more complex: for example a large message may be divided into multiple transport-layer segments, which will be divided into multiple datagrams&hellip;.</p>
<h2 id="16-networks-under-attack">1.6 Networks Under Attack</h2>
<h3 id="malware">Malware</h3>
<p>Along with all the good files we exchange on the Internet, come malicious software, collectively known as <strong>malware</strong> that can also enter and infect our devices.
Once a device infected, the malware can do all kinds of evil things: deleting files, install spyware&hellip;
A compromised host may also be enrolled in a network of thousands of similarly compromised devices, known as <strong>botnet</strong> which can be used for spam or distributed denial-of-service.
Much of the malware is <strong>self-replicating</strong>: it seeks entry into other hosts from the infected machines. Malware can spread in the from of a virus or a worm.</p>
<ul>
<li><strong>Viruses</strong> are malware that requires some form of user interaction to infect the user&rsquo;s device.</li>
<li><strong>Worms</strong> are malware that can enter a device without any explicit user interaction.</li>
</ul>
<h3 id="dos">DoS</h3>
<p>Denial-of-Service attacks render a network, host, or other piece of infrastructure unusable by legittimate users. Most of them fall into one of the three categories:</p>
<ul>
<li><em>Vulnerability Attack</em>: a few well-crafted messages are sent to a vulnerable application or operating system running on the targeted host. The service might stop or the host might crash.</li>
<li><em>Bandwidth flooding</em>: a deluge of packets is sent to the targeted host, so many packets that the target&rsquo;s access link becomes clogged preventing legitimate packets from reaching the server</li>
<li><em>Connection flooding</em>: a large number of half-open or fully open TCP connections are established at the targeted host, which can become so bogged down that it stops accepting legitimate connections.</li>
</ul>
<p>In a <strong>distributed DoS</strong> (<strong>DDoS</strong>) attack the attacker controls multiple sources and has each source blast traffic at the target.</p>
<h3 id="sniffing">Sniffing</h3>
<p>A passive receiver can record a copy of every packet that passes through the network. It is then called a <strong>packet sniffer</strong>.
Because packet sniffers are <em>passive</em> (they do not inject packets into the channel), they are difficult to detect. Some of the best defenses against packet sniffing involve cryptography.</p>
<h3 id="spoofing">Spoofing</h3>
<p>The ability to inject packets into the Internet with a false source address is known as <strong>IP Spoofing</strong> and is but one of many ways in which one user can masquerade as another user.
To solve this problem we will need <em>end-point authentication</em>.</p>
<h3 id="the-history-of-the-internet-shaped-is-structure">The history of the Internet shaped is structure</h3>
<p>The Internet was originally designed to be based on the model of a <em>group of mutually trusting users attached to a transparent network</em>, a model in which there is no need for security. Many aspects of the original Internet architecture deeply reflect this notion of mutual trust, such as the ability for one to send a packet to any other user is the default rather than a requested/granted capability.
However today&rsquo;s Internet certainly does not involve &ldquo;mutually trusted users&rdquo;: communication among mutually trusted users is the exception rather the rule.</p>
<h2 id="history-of-computer-networking-and-the-internet">History of Computer Networking and the Internet</h2>
<h1 id="chapter-2-application-layer">Chapter 2: Application Layer</h1>
<p>Network applications are the <em>raison d&rsquo;être</em> of a computer network. They include  text email, remote access to computers, file transfers, the WorldWideWeb (mid 90s), web searching, e-commerce, Twitter/Facebook, Amazon, Netflix, Youtube, WoW&hellip;</p>
<h2 id="21-principles-of-network-applications">2.1 Principles of Network Applications</h2>
<p>At the core of network application development is writing programs that run on different <strong>end systems</strong> and communicate with each over the network. The programs running on end systems might be different (server-client architecture) or identical (Peer-to-Peer architecture).
Importantly we write programs that run on end systems/hosts, not on network-core devices (routers/link-layer switches).</p>
<h3 id="211-network-application-architectures">2.1.1 Network Application Architectures</h3>
<p>From the application developer&rsquo;s perspective, the network architecture is fixed and provides a specific set of services to applications.
The <strong>application architecture</strong>, on the other hand, is chosen by him. In choosing the application architecture, a developer will likely draw one of the two predominant architectural paradigms used in modern network applications:</p>
<ul>
<li><strong>Client-server architecture</strong>: there is an always on host, called the <em>server</em> which serves requests from many other hosts, called <em>clients</em>: [Web Browser and Web Server]. Clients do not communicate directly with each other. The server has a fixed, well-known address, called an IP address that clients use to connect to him. Often, a single server host is incapable of keeping up with all the requests from clients, for this reason, a <strong>data center</strong>, housing a large number of hosts, is often used to create a powerful virtual server (via <em>proxyin</em>).</li>
<li><strong>P2P architecture</strong>: there is minimal or no reliance on dedicated servers in data centers, the application exploits direct communication between pairs of intermittently connected bots, called <em>peers</em>. They are end systems owned and controlled by users. [Bittorrent, Skype]. P2P applications provide <strong>self-scalability</strong> (the network load is distributed) They are also <strong>cost-effective</strong> since they don&rsquo;t require significant infrastructure and server bandwidth. P2P face challenges:
<ol>
<li>ISP Friendly (asymmetric nature of residential ISPs)</li>
<li>Security</li>
<li>Incentives (convincing users to participate)</li>
</ol>
</li>
</ul>
<p>Some applications have hybrid architectures, such as for many instant messaging applications: a server keeps track of the IP addresses of users, but user-to-user messages are sent directly between users.</p>
<h3 id="212-processes-communicating">2.1.2 Processes Communicating</h3>
<p>In the jargon of operating systems, it&rsquo;s not programs but <strong>processes</strong> that communicate. A process can be thought of as a program that is running within an end system.
Processes on two different end systems communicate with each other by exchanging <strong>messages</strong> across the computer network: a sending process creates and sends messages into the network, a receiving process receives these messages and possibly responds by sending messages back.</p>
<h4 id="client-and-server-processes">Client and Server Processes</h4>
<p>A network application consists of pairs of processes that send messages to each other over a network. For each pair of communicating processes we label:</p>
<ul>
<li>the process that initiates the communication as the <strong>client</strong> [web browser]</li>
<li>the process that waits to be contacted to begin the session as the <strong>server</strong> [web server]</li>
</ul>
<p>This labels stand even for P2P applications in the <em>context of a communication session</em>.</p>
<h4 id="the-interface-between-the-process-and-the-computer-network">The Interface Between the Process and the Computer Network</h4>
<p>A process sends messages into, and receives messages from, the network through a software interface called a <strong>socket</strong>.
<strong>A socket is the interface between the application layer and the transport layer within a host</strong>, it is also referred to as the <strong>Application Programming Interface</strong> (<strong>API</strong>) between the application and the network.
The application developer has control of everything on the application-layer of the socket but has little control of the transport-layer side of the socket. The only control that he has over the transport-layer is:</p>
<ol>
<li>The choice of the transport protocol</li>
<li>Perhaps the ability to fix a few transport-layer parameters such as maximum buffer and maximum segment sizes</li>
</ol>
<h4 id="addressing-processes">Addressing Processes</h4>
<p>In order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address. To identify the receiving processes, two pieces of information need to be specified:</p>
<ol>
<li>The address of the host. In the Internet, the host is identified by its <strong>IP Address</strong>, a 32-bit (or 64) quantity that identifies the host uniquely.</li>
<li>An identifier that specifies the receiving process in the destination host: the destination <strong>port number</strong>. Popular applications have been assigned specific port numbers (web server -&gt; 80)</li>
</ol>
<h3 id="213-transport-services-available-to-applications">2.1.3 Transport Services Available to Applications</h3>
<p>What are the services that a transport-layer protocol can offer to applications invoking it?</p>
<h4 id="reliable-data-transfer">Reliable Data Transfer</h4>
<p>For many applications, such as email, file transfer, web document transfers and financial applications, packet&rsquo;s drops and data loss can have devastating consequences. If a protocol provides guarantees that the data sent is delivered completely and correctly, it is said to provide <strong>reliable data transfer</strong>. The sending process can just pass its data into the socket and know with complete confidence that the data will arrive without errors at the receiving process.</p>
<h4 id="throughput">Throughput</h4>
<p>A transport-layer protocol could provide guaranteed available throughput at some specific rate. Applications that have throughput requirements are said to be <strong>bandwidth-sensitive applications</strong>.</p>
<h4 id="timing">Timing</h4>
<p>A transport-layer protocol can also provide timing guarantees. Example: guarantees that every bit the sender pumps into the socket arrives at the receiver&rsquo;s socket no more than 100 msec later, interesting for real-time applications such as telephony, virtual environments&hellip;</p>
<h4 id="security">Security</h4>
<p>A transport-layer protocol can provide an application with one or more security services. It could encrypt all data transmitted by sending process and in the receiving host decrypt it.</p>
<h3 id="214-transport-services-provided-by-the-internet">2.1.4 Transport Services Provided by the Internet</h3>
<p>The Internet makes two transport protocols available to applications: TCP and UDP.</p>
<h4 id="tcp-services">TCP Services</h4>
<p>TCP includes a connection-oriented service and a reliable data transfer service:</p>
<ul>
<li><strong>Connection-oriented service</strong>: client and server exchange transport-layer control information <em>before</em> the application-level messages begin to flow. This so-called <em>handshaking</em> procedure alerts the client and server, allowing them to prepare for an onslaught of packets. Then a <strong>TCP connection</strong> is said to exist between the sockets of the two processes. When the application finishes sending messages, it must tear down the connection</li>
</ul>
<h5 id="securing-tcp">SECURING TCP</h5>
<p>Nether TCP nor UDP provide encryption. Therefore the Internet community has developed an enhancement for TCP called <strong>Secure Sockets Layer (SSL)</strong>, which not only does everything that traditional TCP does but also provides critical process-to-process security services including <em>encryption</em>, <em>data integrity</em> and <em>end-point authentication</em>. It is not a third protocol, but an enhancement of TCP, <strong>the enhancement being implemented in the application layer</strong> in both the client and the server side of the application (highly optimized libraries exist). SSL has its own socket API, similar to the traditional one. Sending processes passes cleartext data to the SSL socket which encrypts it.</p>
<ul>
<li><strong>Reliable data transfer service</strong> The communicating processes can rely on TCP to deliver all data sent without error and in the proper order.</li>
</ul>
<p>TCP also includes a <strong>congestion-control mechanism</strong>, a service for the general welfare of the Internet rather than for the direct benefit of the communicating processes. It throttles a sending process when the network is congested between sender and receiver.</p>
<h4 id="udp-services">UDP Services</h4>
<p>UDP is a no-frills, lightweight transport protocol, providing minimal services. It is connectionless, there&rsquo;s no handshaking. The data transfer is unreliable: there are no guarantees that the message sent will ever reach the receiving process. Furthermore messages may arrive out of order. UDP does not provide a congestion-control mechanism neither.</p>
<h4 id="services-not-provided-by-internet-transport-protocols">Services Not Provided by Internet Transport Protocols</h4>
<p>These two protocols do not provide timing or throughput guarantees, services not provided by today&rsquo;s Internet transport protocols. We therefore design applications to cope, to the greatest extent possible, with this lack of guarantees.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-app_tras.png" alt="app tras"  />
</p>
<h3 id="215-application-layer-protocols">2.1.5 Application-Layer Protocols</h3>
<p>An <strong>application-layer protocol</strong> defines how an application&rsquo;s processes, running on different end systems, pass messages to each other. It defines:</p>
<ul>
<li>The type of the messages exchanged (request/response)</li>
<li>The syntax of the various message types</li>
<li>The semantics of the fields (meaning of the information in fields)</li>
<li>The rules for determining whem and how a process sends messages and responds to messages</li>
</ul>
<h2 id="22-the-web-and-http">2.2 The Web and HTTP</h2>
<p>In the early 1990s, a major new application arrived on the scene: the World Wide Web (Berners-Lee 1994), the first application that caught the general public&rsquo;s eye.
The Web operates <em>on demand</em>: users receives what they want, when they want it.
It is enormously easy for an individual to make information available over the web, hyperlinks and search engines help us navigate through the ocean of web sites&hellip;</p>
<h3 id="221-overview-of-http">2.2.1 Overview of HTTP</h3>
<p>The <strong>HyperText Transfer Protocol (HTTP)</strong>, the Web&rsquo;s application-layer protocol is a the heart of the Web. It is implemented in two programs: a client program and a server program.
The two programs talk to each other by exchanging HTTP messages.
A <strong>Web page</strong> (or document) consists of objects. An <strong>object</strong> is simply a file (HTML file, jpeg image&hellip;) that is <em>addressable by a single URL</em>.
Most Web pages consist of a <strong>base HTML file</strong> and several referenced objects. The HTML file references the other objects in the page with the objects&rsquo; URLs.
Each URL has two components: the hostname of the server that houses the object and the object&rsquo;s path name.
<strong>Web Browsers</strong> implement the client side of HTTP.
<strong>HTTP</strong> uses TCP as its underlying transport protocol.
The server sends requested files to clients without storing any state information about the client: it is a <strong>stateless protocol</strong></p>
<h3 id="222-non-persistent-and-persistent-connections">2.2.2 Non-Persistent and Persistent Connections</h3>
<p>In many Internet applications, the client and server communicate for an extended period of time, depending on the application and on how the application is being used, the series of requests may be back-to-back, periodically at regular intervals or intermittently. When this is happening over TCP, the developer must take an important decision: should each request/response pair be sent over a <em>separate</em> TCP connection or should all of the requests and their corresponding responses be sent over the <em>same</em> TCP connection?
In the former approach, the application is said to use <strong>non-persistent connections</strong> and in the latter it is said to use <strong>persistent connections</strong>
By default HTTP uses non-persistent connections but can be configured to be use persistent connections.
To estimate the amount of time that elapses when a client requests the base HTML file until the entire file is received by the client we define the <strong>round-trip time</strong> (<strong>RTT</strong>) which is the time it takes for a small packet to travel from client to server and then back to the client.</p>
<h4 id="http-with-non-persistent-connections">HTTP with Non-Persistent Connections</h4>
<p>For the page and each object it contains, a TCP connection must be opened (handshake request, handshake answer), we therefore observe an addition RTT, and for each object we will have a request followed by the reply
This model can be expensive on the server side: a new connection needs to be established for each requested object, for each connection a TCP buffer must be allocated along some memory to store TCP variables.</p>
<h4 id="http-with-persistent-connections">HTTP with Persistent Connections</h4>
<p>The server leaves the TCP connection open after sending a response, subsequent requests and responses between the same client and server will be sent over the same connection. In particular an entire web page (text + objects) ca be sent over a single persistent TCP connection, multiple web pages residing on the same server can be sent from the server to the same client over a single persistent TCP connection.
<strong>These requests can be make back-to-back</strong> without waiting for replies to pending requests (<strong>pipelining</strong>).
When the server receives back-to-back requests, it sends the objects back-to-back.
If connection isn&rsquo;t used for a pre-decided amount of time, it will be closed.</p>
<h3 id="223-http-message-format">2.2.3 HTTP Message Format</h3>
<p>Two types of HTTP messages:</p>
<h4 id="http-request-message">HTTP Request Message</h4>
<pre tabindex="0"><code>GET /somedir/page.html HTTP/1.1
Host: www.someschool.edu
Connection: close
User-agent: Mozilla/5.0
Accept-language: fr
</code></pre><ul>
<li>Ordinary ASCII text</li>
<li>First line: <strong>request line</strong></li>
<li>Other lines: <strong>header lines</strong></li>
<li>the first lines has 3 fields: method field, URL field, HTTP version field:
<ul>
<li>method field possible values: <code>GET, POST, HEAD, PUT, DELETE</code></li>
</ul>
</li>
</ul>
<p>The majority of HTTP requests use the GET method, used to request an object.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-http_request.png" alt="http requests"  />
</p>
<p>The entity body (empty with <code>GET</code>) is used by the <code>POST</code> method, for example for filling out forms. The user is still requesting a Web page but the specific contents of the page depend on what the user entered into the form fields. When <code>POST</code> is used, the entity body contains what the user entered into the form fields.
Requests can also be made with <code>GET</code> including the inputted data in the requested URL.
The <code>HEAD</code> method is similar to <code>GET</code>, when a server receives it, it responds with an HTTP message but it leaves out the requested object. It is often used for debugging.
<code>PUT</code> is often used in conjunction with web publishing tools, to allow users to upload an object to a specific path on the web servers.
Finally, <code>DELETE</code> allows a user or application to delete an object on a web server.</p>
<h4 id="http-response-message">HTTP Response Message</h4>
<p>A typical HTTP response message:</p>
<pre tabindex="0"><code>HTTP/1.1 200 OK
Connection: close
Date: ...
Server: ...
Last-Modified: ...
Content-Length: ...
Content-Type: text/html

(data data data data data ...)
</code></pre><ul>
<li>Status line: protocol version, status code, corresponding status message</li>
<li>six header lines:
<ul>
<li>the connection will be closed after sending the message</li>
<li>date and time when the response was created (when the server retrieves the object from the file system, insert object in the message, sends the response message)</li>
<li>Type of the server / software</li>
<li>Last modified: useful for object caching</li>
<li>Content-Length: number of bytes in the object</li>
<li>Content-Type</li>
</ul>
</li>
<li>entity body: contains the requested object itself (data)</li>
</ul>
<p>Some common status codes:</p>
<ul>
<li><code>200 OK</code>: request succeeded, information returned</li>
<li><code>301 Moved Permanently</code>: the object has moved, the new location is specified in the header of the response</li>
<li><code>400 Bad Request</code>: generic error code, request not understood</li>
<li><code>404 Not Found</code>: The requested document doesn&rsquo;t exist on the server</li>
<li><code>505 HTTP Version Not Supported</code>: The requested HTTP protocol version is not supported by the server</li>
</ul>
<h3 id="224-user-server-interaction-cookies">2.2.4 User-Server Interaction: Cookies</h3>
<p>An HTTP server is <em>stateless</em> in order to simplify server design and improves performances. A website can identify users using <strong>cookies</strong>.
Cookie technology has 4 components:</p>
<ol>
<li>Cookie header in HTTP response message</li>
<li>Cookie header in HTTP request message</li>
<li>Cookie file on the user&rsquo;s end-system managed by the browser</li>
<li>Back-end database at the Website</li>
</ol>
<p>User connects to website using cookies:</p>
<ul>
<li>Server creates a unique identification number and creates an entry in its back-end database indexed by the identification number
-server responds to user&rsquo;s browser including in the header: <code>Set-cookie: identification number</code></li>
<li>The browser will append to the cookie file the hostname of the server and the identification number header</li>
<li>Each time the browser will request a page, it will consult the cookie file, extract the identification number for the site and put a cookie header line including the identification number</li>
</ul>
<p>The server can track the user&rsquo;s activity: it knows exactly what pages, in which order and at what times that identification number has visited. This is also why cookies are controversial: a website can learn a lot about a user and sell this information to a third party.</p>
<p>Therefore <strong>cookies can be used to create a user session layer on top of stateless HTTP</strong>.</p>
<h3 id="225-web-caching">2.2.5 Web Caching</h3>
<p>A <strong>Web cache</strong>, also called <strong>proxy server</strong> is a network entity that satisfies HTTP requests on behalf of an origin Web server. It has its own disk storage and keeps copies of recently requested objects in this storage.</p>
<ol>
<li>The browser establishes a TCP connection to the web cache, sending an HTTP request for the object to the Web cache.</li>
<li>The web cache checks to see if it has a copy of the object stored locally. If yes, it will return it within an HTTP response message to the browser.</li>
<li>If not, the Web cache opens a TCP connection to the origin server, which responds with the requested object.</li>
<li>The Web caches receives the object, stores a copy in its storage and sends a copy, within an HTTP response message, to the browser over the existing TCP connection.</li>
</ol>
<p>Therefore a <strong>cache is both a server and a client at the same time</strong>.
Usually caches are purchased and installed by ISPs.
They can substantially reduce the response time for a client request and substantially reduce traffic on an institution&rsquo;s access link to the Internet.</p>
<p>Through the use of <strong>Content Distribution Networks (CDNs)</strong> web caches are increasingly playing an important role in the Internet. A CDN installs many geographically distributed caches throughout the Internet, localizing much of the traffic.</p>
<h3 id="226-the-conditional-get">2.2.6 The Conditional <code>GET</code></h3>
<p>Caches introduce a new problem: what if the copy of an object residing in the cache is stale?
The <strong>conditional GET</strong> is used to verify that an object is up to date.
An HTTP request message is a conditional get if</p>
<ol>
<li>the request message uses the <code>GET</code> method</li>
<li>the request message includes an <code>If-modified-since:</code> header line.</li>
</ol>
<p>A conditional get message is sent from the cache to server which responds only if the object has been modified.</p>
<h2 id="25-dns---the-internets-directory-service">2.5 DNS - The Internet&rsquo;s Directory Service</h2>
<p>One identifier for a host is its <strong>hostname</strong> [<code>cnn.com</code>, <code>www.yahoo.com</code>]. Hostnames are mnemonic and therefore used by humans. Hosts are also identified by <strong>IP addresses</strong>.</p>
<h3 id="251-services-provided-by-dns">2.5.1 Services provided by DNS</h3>
<p>Routers and use IP addresses. The Internet&rsquo;s <strong>domain name system (DNS)</strong> translates hostnames to IP addresses. The DNS is:</p>
<ol>
<li>A distributed database implemented in a hierarchy of <strong>DNS Servers</strong></li>
<li>An application-layer protocol that allows hosts to query the distributed database.</li>
</ol>
<p>DNS servers are often UNIX machines running the <strong>B</strong>erkeley <strong>I</strong>nternet <strong>N</strong>ame <strong>D</strong>omaine (BIND) software.</p>
<p><strong>DNS runs over UDP and uses port 53</strong>
It is often employed by other application-layer protocols (HTTP, FTP&hellip;) to translate user-supplied hostnames to IP addresses.</p>
<p>How it works:</p>
<ul>
<li>The user machine runs the client side of the DNS application</li>
<li>The browser extracts <code>www. xxxxx . xxx</code> from the URL and passes the hostname to the client side of the DNS application</li>
<li>The DNS sends a query containing the hostname to a DNS server</li>
<li>The DNS client eventually receives a reply including the IP address for the hostname</li>
<li>The browser can initiate a TCP connection.</li>
</ul>
<p><strong>DNS adds an additional delay</strong></p>
<p>DNS provides other services in addition to translating hostnames to IP addresses:</p>
<ul>
<li><strong>host aliasing</strong>: a host with a complicated hostname can have more alias names. The original one is said to be a <strong>canonical hostname</strong>.</li>
<li><strong>mail server aliasing</strong>: to make email servers&rsquo; hostnames more mnemonic. This also allows for an e-mail server and an Web server to have the same hostname.</li>
<li><strong>load distribution</strong>: replicated servers can have the same hostname. In this case, a set of IP addresses is associated with one canonical hostname. When a client make a DNS query for a name mapped to a set of addresses, the server responds with the entire set, but rotates the ordering within each reply.</li>
</ul>
<h3 id="252-overview-of-how-dns-works">2.5.2 Overview of How DNS Works</h3>
<p>From the perspective of the invoking application in the user&rsquo;s host, DNS is a black box providing a simple, straightforward translation service.
Having one single global DNS server would be simple, but it&rsquo;s not realistic because it would a <strong>single point of failure</strong>, it would have an impossible <strong>traffic volume</strong>, it would be <strong>geographically too distant</strong> from some querying clients, its <strong>maintenance</strong> would be impossible.</p>
<h4 id="a-distributed-hierarchical-database">A Distributed, Hierarchical Database</h4>
<p>The DNS uses a large number of servers, organized in a hierarchical fashion and distributed around the world.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-dns-servers.png" alt="dns servers"  />
</p>
<p>The three classes of DNS servers:</p>
<ul>
<li><strong>Root DNS servers</strong>: In the Internet there are 13 root DNS servers, most hosted in North America, each of these is in reality a network of replicated servers, for both security and reliability purposes (total: 247)</li>
<li><strong>Top-level domain (TLD) servers</strong>: responsible for top-level domains such as com org net edu and govand all of the country top-level domains uk fr jp</li>
<li><strong>Authoritative DNS servers</strong>: every organization with publicly accessible hosts must provide publicly accessible DNS records that map the names of those hosts to IP addresses. An organization can choose to implement its own authoritative DNS server or to pay to have the records stored in an authoritative DNS of some service provider.</li>
</ul>
<p>Finally there are <strong>local DNS servers</strong> which is central to the DNS architecture. They are hosted by ISPs. When a hosts connects to one of these, the local DNS server provides the host with the IP addresses of one or more of its local DNS servers. Requests can ho up to the root DNS servers and back down.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-distributedDNS.png" alt="distriuted dns"  />
</p>
<p>We can have both <strong>recursive</strong> and <strong>iterative queries</strong>.
In <strong>recursive queries</strong> the user sends the request its nearest DNS which will ask to a higher-tier server, which will ask to lower order&hellip; the chain goes on until it reaches a DNS that can reply, the reply will follow the inverse path that the request had.
In <strong>iterative queries</strong> the same machine sends requests and receives replies.
Any DNS can be iterative or recursive or both.</p>
<h4 id="dns-caching">DNS Caching</h4>
<p>DNS extensively exploits DNS caching in order to improve the delay performance and to reduce the number of DNS messages ricocheting around the Internet.
In a query chain, when a DNS receives a DNS reply it can cache the mapping in its local memory.</p>
<h3 id="253-dns-records-and-messages">2.5.3 DNS Records and Messages</h3>
<p>The DNS servers that implement the DNS distributed database store <strong>resource records (RRs)</strong> including RRs that provide hostname-to-IP address mappings.
Each DNS reply messages carries one or more resource records.</p>
<p>A resource record is a four-tuple that contains the fields: <code>(Name, Value, Type, TTL)</code>
<code>TTL</code> is the time to live of the resource record (when a resource should be removed from a cache). The meaning of <code>Name</code> and <code>Value</code> depend on <code>Type</code>:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Name</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>a hostname</td>
<td>IP address</td>
</tr>
<tr>
<td>NS</td>
<td>a domain (foo.com)</td>
<td>hostname of an  authoritative DNS server which knows how to obtain the IP addresses for hosts in the domain. Used to route queries further along in the query chain</td>
</tr>
<tr>
<td>CNAME</td>
<td>a alias name</td>
<td>canonical hostname for the name in Name</td>
</tr>
<tr>
<td>MX</td>
<td>alias hostname</td>
<td>canonical hostname of a mail server that has an alias hostname Name</td>
</tr>
</tbody>
</table>
<h4 id="dns-messages">DNS Messages</h4>
<p>The only types of DNS messages are DNS queries and reply messages. They have the same format:</p>
<ul>
<li>first 12 bytes in the <em>header section</em>: 16-bit number identifying the query, which will be copied into the reply query so that the client can match received replies with sent queries. 1 bit query/reply flag (0 query, 1 reply). 1 bit flag authoritative flag set in reply messages when DNS server is an authoritative for a queried name. 1 bit recursion flag if the client desires that the server performs recursion when it doesn&rsquo;t have a record, 1 bit recursion-available field is set in the reply if the DNS server supports recursion</li>
<li><em>question section</em>: information about the query: name field containing the name being queried, type field</li>
<li><em>answer section</em>: resource records for the name originally queried: Type, Value, TTL. Multiple RRs can be returned if the server has multiple IP addresses</li>
<li><em>authority section</em>: records for other authoritative servers.</li>
<li><em>additional section</em>: other helpful records: canonical hostnames&hellip;</li>
</ul>
<h4 id="inserting-records-into-the-dns-database">Inserting Records into the DNS Database</h4>
<p>We created a new company. Next we register th domain name <code>newcompany.com</code> at a registrar. A <strong>registrar is a commercial entity that verifies the uniqueness of the domain name, enters it into the DNS database and collects a small fee for these services</strong>. When we register the address, <strong>we need the provide the registrar with the IP address of our primary and secondary authoritative DNS servers</strong>, that will make sure that a Type NS and a Type A records are entered into the TLD com servers for our two DNS servers.</p>
<h5 id="focus-on-security-dns-vulnerabilities">Focus on security: DNS vulnerabilities</h5>
<ul>
<li>DDoS bandwidth-flooding attack</li>
<li>MITM: the mitm answers queries with false replies tricking the user into connecting to another server.</li>
<li>The DNS infrastructure can be used to launch a DDoS attack against a targeted host</li>
</ul>
<p>To date, there hasn&rsquo;t been an attack that that has successfully impeded the DNS service, DNS has demonstrated itself to be surprisingly robust against attacks. However there have been successful reflector attacks, these can be addressed by appropriate configuration of DNS servers.</p>
<h2 id="26-peer-to-peer-applications">2.6 Peer-to-Peer Applications</h2>
<h3 id="261-file-distribution">2.6.1 File Distribution</h3>
<p>In P2P file distribution, each peer can redistribute any portion of the file it has received to any peers, thereby assisting the server in the distribution process. As of 2012 the most popular P2P file distribution protocol is BitTorrent, developed by Bram Cohen.</p>
<h4 id="scalability-of-p2p-architectures">Scalability of P2P architectures</h4>
<p>Denote the upload rate of the server&rsquo;s access link by $u_s$, the upload rate of the <em>i</em>th peer&rsquo;s access link by $u_i$ and the download rate of the <em>i</em>th access link by $d_i$, tthe size of the to be distributed in bits ()
Comparison client-server and P2P.</p>
<h4 id="client-server">Client-Server</h4>
<p>The server must transmit one copy of the file to <em>N</em> peers, thus it transmits *NF *bits. The time to distribute the file is at least <strong>NF/u_s</strong>.
Denote $d_min = min{ d_i }$ the link with the slowest download rate cannot obtain all <em>F</em> bits in less than $F/d_min$ seconds
Therefore:
$$ D_{cs} \geq \max \left{ \frac{NF}{u_s} , \frac{F}{d_min} \right} $$</p>
<h4 id="p2p">P2P</h4>
<p>When a peer receives some file data, it can use its own upload capacity to redistribute the data to other peers.</p>
<ul>
<li>At the beginning of the distribution only the server has the file. It must send all the bits at least once. $D \geq F/u_s$</li>
<li>The peer with the lowest download rate cannot obtain all <em>F</em> bits of the file in less than $F/d_min $ seconds.</li>
<li>The total upload capacity of the system is equal to the summation of the upload rates of the server and of all the peers. The system must upload <em>F</em> bits to <em>N</em> peers, thus delivering a total of <em>NF</em> bits which can&rsquo;t be done faster that $u_total$.</li>
</ul>
<p>We obtain:
$$ D_{P2P} = \max \left{ \frac{F}{u_s} , \frac{F}{d_{min}} , \frac{NF}{u_s + \sum_{i=1}^N u_j} \right} $$</p>
<h4 id="bittorrent">BitTorrent</h4>
<p>In BitTorrent the collection of all peers participating in the distribution of a particular file is called a <em>torrent</em>. Peers in a torrent download equal-size <em>chunks</em> of the file from one another with a typical chunk size of 256 KBytes.
At the beginning a peer has no chunks, it accumulates more and more chunks over time. While it downloads chunks it also uploads chunks to other peers. Once a peer has acquired the entire file it may leave the torrent or remain in it and continue to upload chunks to other peers (becoming a <em>seeder</em>). Any peer can leave the torrent at any time and later rejoin it at anytime as well.</p>
<p>Each torrent has an infrastructure node called a <em>tracker</em>: when a peer joins a torrent, it registers itself with the tracker and periodically informs it that it is still in the torrent. The tracker keeps track of the peers participating in the torrent. A torrent can have up to thousands of peers participating at any instant of time.</p>
<p>User joins the torrent, the tracker randomly selects a subset of peers from the set of participating peers. User establishes concurrent TCP connections with all of these peers, called <em>neighboring peers</em>. The neighboring peers can change over time.
The user will ask each of his neighboring peers for the list of chunks they have (one list per neighbor).
The user starts downloading the chunks that have the fewest repeated copies among the neighbors (<strong>rares first</strong> technique). In this manner the rarest chunks get more quickly redistributed, roughly equalizing the numbers of copies of each chunk in the torrent.</p>
<p>Every 10 seconds the user measures the rate at which she receives bits and determines the four peers that are sending to her at the highest rate. It then reciprocates by sending chunks to these same four peers. The four peers are called <strong>unchocked</strong>. Every 30 seconds it also choses one additional neighbor and sends it chunks. These peers are called <strong>optmistically unchocked</strong>.</p>
<h3 id="262-distributed-hash-tables-dhts">2.6.2 Distributed Hash Tables (DHTs)</h3>
<p>How to implement a simple database in a P2P network?
In the P2P system each peer will only hold a small subset of the totality of the (key, value) pairs. Any peer can query the distributed database with a particular key, the database will locate the peers that have the corresponding pair and return the pair to querying peer. Any peer can also insert a new pair in the databse. Such a distributed database is referred to as a <strong>distributed hash table (DHT)</strong>.
In a P2P file sharing application a DHT can be used to store the chunks associated to the IP of the peer in possession of them.</p>
<h6 id="an-approach">An approach:</h6>
<p>Let&rsquo;s assign an identifier to each peer, where the identifier is an integer in the range <strong><code>[0, 2^n -1]</code></strong> for some fixed <strong><code>n</code></strong>. Such an identifier can be expressed by a <strong><code>n-bit</code></strong> representation. A hash function is used to transform non-integer values into integer values. We suppose that this function is available to all peers.
<strong>How to assign keys to peers?</strong> We assign each <code>(key,value)</code> pair to the peer <em><strong>whose identifier is the closest to key</strong></em>, which is the identifier defined as <em><strong>the closest successor of the key</strong></em>.
To avoid having each peer keeping track of all other peers (scalability issue) we use</p>
<h4 id="circular-dht">Circular DHT</h4>
<p>If we organize peers into a circle, each peer only keeps track of its immediate successor and predecessor <strong>(modulo <code>2^n</code>)</strong>. This circular arrangement of peers is a special case of an <strong>overlay network</strong>: the peers form an abstract logical network which resides above the &ldquo;underlay&rdquo; computer network, the overlay links are not physical but virtual liaisons between pairs of peers. A single overlay link typically uses many physical links and physical routers in the underlying network.</p>
<p>In the circle a peer asks &ldquo;who is responsible for key <em>k</em>?&rdquo; and it sends the message clockwise around the circle. Whenever a peer receives such message, it knows the identifier of its predecessor and predecessor, it can determine whether it is responsible (closest to) for the key in question. If not, it passes the message to its successor. When the message reaches the peer responsible for the key, it can send a message back to the querying peer indicating that it is responsible for that key.
Using this system <strong><code>N/2*</code></strong> messages are sent on average <strong>(N = number of peers)</strong>. In designing a DHT there is always a tradeoff between the number of neighbors for each peer and the number of DHT messages needed to resolve a single query. (1 message if each peer keeps track of all other peers; <strong><code>N/2</code></strong> messages if each knows only 2 neighbors).
To improve our circular DHT we could add shortcuts so that each peer not only keeps track of its immediate successor and predecessor but also of relatively small number of shortcut peers scattered around the circle.
<strong>How many shortcut neighbors?</strong> Studies show that DHT can be designed so that the number of neighbors per peer as well as the number of messages per query is <strong><code>O(log *N*)</code> (<code>N</code> the number of peers)</strong>.</p>
<h4 id="peer-churn">Peer Churn</h4>
<p>In a P2P system, a peer can come or go without warning. To keep the DHT overlay in place in presence of a such peer churn we require each peer to keep track (know to IP address) of its predecessor and successor, and to periodically verify that its two successors are alive.
If a peer abruptly leaves, its successor and predecessor need to update their information. The predecessor replaces its first successor with its second successor and ask it for the identifier and IP address of its immediate successor.</p>
<p>What if a peer joins? If it only knows one peer, it will ask him what will be his predecessor and successor. The message will reach the predecessor which will send the new arrived its predecessor and successor information. The new arrived can join the DHT making its predecessor successor its own successor and by notifying its predecessor to change its successor information.</p>
<h2 id="27-socket-programming-creating-network-applications">2.7 Socket Programming: Creating Network Applications</h2>
<p>Only code explication &mdash;-&gt; skipping</p>
<h1 id="chapter-3-transport-layer">Chapter 3: Transport Layer</h1>
<h2 id="31-introduction-and-transport-layer-services">3.1 Introduction and Transport-Layer Services</h2>
<p>A transport-layer protocol provides for <strong>logical communication</strong> (as if the hosts running the processes were directly connected) between application processes running on different hosts. Application processes use the logical communication provided by the transport layer to send messages to each other, free from the worry of the details of the physical infrastructure used.
<strong>Transport-layer protocols are implemented in the end systems but not in network routers</strong>.
On the sending side, the transport layer converts the application messages into transport-layer packets, known as transport-layer <strong>segments</strong>. This is done by breaking them into smaller chunks and adding a transport-layer header to each chunk. The transport-layer then passes the segment to the network-layer packet at the sending end-system.
On the receiving side, the network layer extracts the transport-layer segment from the datagram and passes the segment up to the transport-layer which then processes the received segment, making the data in the segment available to the received application.</p>
<h3 id="311-relationship-between-transport-and-network-layers">3.1.1 Relationship Between Transport and Network Layers</h3>
<p>A transport-layer protocol provides logical communication between <strong><em>processes</em></strong> running on different hosts. Whereas a network-layer protocol provides logical communication between <strong><em>hosts</em></strong>.</p>
<h3 id="312-overview-of-the-transport-layer-in-the-internet">3.1.2 Overview of the Transport Layer in the Internet</h3>
<p>A TCP/IP network (such as the Internet) makes two distinct transport-layer protocols available to the application layer:</p>
<ul>
<li><strong>UDP</strong> [ <strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol], which provides an unreliable, connectionless service to the invoking application</li>
<li><strong>TCP</strong> [<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol] which provides a reliable, connection-oriented service to the invoking application.</li>
</ul>
<p>We need to spend a few words on the network-layer protocol: the Internet network-layer protocol is the IP (Internet Protocol). It provides a logical communication between hosts. The IP service model is a <strong>best-effort delivery service</strong>: it makes the best effort to deliver segments between hosts, <em>but it <strong>doesnt</strong> provide guarantees</em>:</p>
<ul>
<li>it doesn&rsquo;t guarantee segment <strong>delivery</strong></li>
<li>it doesn&rsquo;t guarantee <strong>orderly</strong> delivery of segments</li>
<li>it doesn&rsquo;t guarantee the <strong>integrity</strong> of the data in the segments</li>
</ul>
<p>Thus IP is said to be an <strong>unreliable service</strong>.
Every host has <strong>at least one network-layer address</strong> a so-called IP address.</p>
<p>UDP and TCP extend IP&rsquo;s delivery service between 2 end systems to a delivery service between two processes running on the end systems.
Extend host-to-host delivery to process-to-process delivery is called <strong>transport-layer multiplexing and demultiplexing</strong>.
UDP provides process-to-process delivery and error checking services. Therefore it is an <strong>unreliable service</strong>.
TCP provides <strong>reliable data transfer</strong> using flow control, sequence numbers, acknowledgements and timers. <strong>TCP thus converts IP&rsquo;s unreliable service between end systems into a reliable data transport service between processes</strong>.
TCP also provides <strong>congestion control</strong>, a service not really provided to the invoking application as it is to the Internet as a whole: <strong>it prevents any TCP connection from swamping the links and routers between communication hosts with an excessive amount of traffic giving each connection traversing a congested link an equal share of the bandwidth.</strong></p>
<h2 id="32-multiplexing-and-demultiplexing">3.2 Multiplexing and Demultiplexing</h2>
<p>Here we&rsquo;ll cover multiplexing &amp; demultiplexing in the context of the Internet but <strong>a multiplexing/demultiplexing service is needed for all computer networks</strong>.</p>
<ul>
<li>The job of delivering the data in a transport-layer segment to the correct socket is called <strong>demultiplexing</strong>.</li>
<li>The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (which will be used in demultiplexing) to create segments and passing the segments to the networks layer is called <strong>multiplexing</strong>.</li>
</ul>
<p>Therefore sockets need to have unique identifiers and each segment needs to have special fields that indicate the socket to which the segment is delivered. These fields are the <strong>source port number field</strong> and the <strong>destination port number field</strong>. Each port number is a <strong>16-bit number</strong> ranging from 0 to 65535.
Port numbers ranging from 0 to 1023 are called <strong>well-known port numbers</strong> and are restricted, reserved for us by well-known application protocols such as HTTP (80) and FTP (21). Designing an application, we should assign it a port number.</p>
<h4 id="connectionless-multiplexing-and-demultiplexing">Connectionless Multiplexing and Demultiplexing</h4>
<p>A UDP socket is fully identified by the <strong>two-tuple</strong>:
<code>(destination IP address , destination port number)</code>
therefore if two UDP segments have different source IP address and/or source port numbers but have the same destination IP address and destination port number, than the two segments will be directed to the same destination process via the same destination socket.
The source port number serves as part of the <strong><code>return address</code></strong>.</p>
<h4 id="connection-oriented-multiplexing-and-demultiplexing">Connection-oriented Multiplexing and Demultiplexing</h4>
<p>A TCP socket is identified by the <strong>four-tuple</strong>:
<code>(source IP address, source port number, destination IP address, destination port number)</code>
When a TCP segment arrives from the network to a host, the <strong>host uses all four values to demultiplex the segment to the appropriate socket</strong>.
Two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP carrying the original connection establishment request) be directed to two different sockets.</p>
<p>Routine:</p>
<ul>
<li>The TCP server application always has a <strong>welcoming socket</strong> that waits for connection establishment requests from TCP clients on port number <code>X</code></li>
<li>The TCP client creates a socket and sends a connection <strong>establishment request</strong> (a TCP segment including destination port, source port number and <em>a special connection-establishment bit set in the TCP header</em>)</li>
<li>The server OS receives the incoming connection-request segment on port <code>X</code>, it locates the server process that is waiting to accept a connection on port number <code>X</code>, then creates <strong>a new socket</strong> which will be identified by
<code>(source port number in the segment (cleint), IP address of source host (client), the destination port number in the segment (its own), its own IP address)</code></li>
<li>With the TCP connection in place, client and server can now send data to each other</li>
</ul>
<p>The server may support many simultaneous TCP connection sockets, with each socket attached to a process and each socket identified by its own four-tuple.
When a TCP segment arrives at the host, all the fours fields are used to demultiplex the segment to the appropriate socket.</p>
<h5 id="port-scanning">Port Scanning</h5>
<p>Can be used both by attackers and system administrator to find vulnerabilities in the target or to know network applications are running in the network.
The most used port scanner is <strong>nmap</strong> free and open source.
For TCP it scans port looking for port accepting connections, for UDP looking for UDP ports that respond to transmitted UDP segments.
It then returns a list of open, closed or unreachable ports.
A host running nmap can attempt to scan any target <em>anywhere</em> in the Internet</p>
<h4 id="web-servers-and-tcp">Web Servers and TCP</h4>
<p>In a web server, all segments have destination port 80 and both the initial connection-establishment segments and the segments carrying HTTP request messages will have destination port 80, the server will distinguish clients using the source IP addresses and port numbers.
Moreover in today&rsquo;s high-performing Web, servers often use only one process and <em>create a new thread with a new connection soket for each new client connection</em>.</p>
<p>If using persistent HTTP, client and server will exchange messages via the same server socket. If using non-persistent HTTP, a new TCP connection is created and closed for every request/response and hence a new socket is created and closed for every request/response.</p>
<h2 id="33-connectionless-transport-udp">3.3 Connectionless Transport: UDP</h2>
<p>UDP does multiplexing/demultiplexing, light error checking, nothing more. If the developer chooses UDP, the application is almost directly talking with IP.
Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. For this reason UDP is said to be <strong>connectionless</strong>.
DNS is an example of an application layer protocol that typically uses UDP: there is no handshaking and when a client doesn&rsquo;t receive a reply either it tries sending the query to another name server or it informs the invoking application that it can&rsquo;t get a reply. Why should a developer choose UDP?</p>
<ul>
<li><em>Finer application-level controll over what data is sent and when</em>: as soon as the application passes data to UDP, UDP will package the data inside a segment and immediately pass it to the network layer. TCP&rsquo;s congestion control can delay the sending of the segment and will try sending the packet until this is received. In real time applications the sending rate is important, so we can trade off some data loss for some sending rate.</li>
<li><em>No connection establishement</em> UDP justs send data without any formal preliminaries without introducing any delay, probably the reason why DNS runs over UDP.</li>
<li><em>No connection state</em>: because a UDP application doesn&rsquo;t need to keep track of the users or to keep connections alive, it can typically support many more active clients than a TCP application</li>
<li><em>Small packet header overhead</em> TCP has 20 bytes of header overhead in every segment versus the 8 of UDP</li>
</ul>
<p>It is possible for an application developer to have reliable data transfer when using UDP. This can be done if reliability is built into the application itself (eg adding acknowledgement and retransmission mechanisms) but it is a nontrivial task and may keep the developer busy for a long time.</p>
<h3 id="331-udp-segment-structure">3.3.1 UDP Segment Structure</h3>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-udp_segment.png" alt="udp segment"  />
</p>
<p>The UDP header has only four fields, each consisting of two bytes:</p>
<ul>
<li><code>source port number</code></li>
<li><code>destination port number</code></li>
<li><code>checksum</code> (used for error detection.)</li>
<li><code>length</code> (which specifies the number of bytes in the UDP segment, header + data)</li>
</ul>
<p>This <code>length</code> field is needed since the size of the data field may differ from one UDP segment to the next.</p>
<h3 id="332-udp-checksum">3.3.2 UDP Checksum</h3>
<p>Provides for error detection, to determine whether the bits in the segment have been altered as it moves from source to destination.</p>
<p>At the send side, UDP performs the 1s complement of the sum of all the 16-bit (max 64) words in the segment, with any overflow encountered during the sum being wrapped around. This result is put in the checksum field of the UDP segment header.</p>
<p>UDP implements error detection according to the <strong>end-end principle</strong>: certain functionality (error detection in this case) must be implemented on an end-end basis: &ldquo;functions placed at the lower levels may be redundant or of little value when compared to the cost of providing them at the higher level&rdquo;.</p>
<h2 id="34-principles-of-reliable-data-transfer">3.4 Principles of Reliable Data Transfer</h2>
<p>It is the responsibility of a <strong>realiable data transfer protocol</strong> to implement reliable data service: no transferred data bits are corrupted or lost and all are delivered in the order in which they were sent.
We will consider the following actions:</p>
<ul>
<li>The sending side of the data transfer protocol will be invoked from above by a call to <code>rdt_send()</code></li>
<li>On the receiving side <code>rdt_rcv()</code> will be called when a packet arrives while <code>deliver_data()</code> will be called when the <code>rdt</code> protocol wants to deliver data to the upper layer.</li>
</ul>
<p>We use the term packet rather than segment because the concepts explained here applies to computer networks in general.
We will only consider the case of <strong>unidirectional data transfer</strong> that is data transfer from the sending to the receiving side. The case of reliable <strong>bidirectional</strong> (full-duplex) <strong>data transfer</strong> is not more difficult but more tedious to explain. Nonetheless sending and receiving side will need to transmit packets in <em>both directions</em>.</p>
<h3 id="341-building-a-reliable-data-transfer-protocol">3.4.1 Building a Reliable Data Transfer Protocol</h3>
<p><strong>Finite-state machine</strong>s (FSM) are boring! And unlikely to be asked at the exam, therefore I decided not to cover them here.</p>
<h3 id="342-pipelined-reliable-data-transfer-protocols">3.4.2 Pipelined Reliable Data Transfer Protocols</h3>
<p>In today&rsquo;s high-speed networks stop-and-wait protocols are simply not tolerable: we  cannot send one packet and wait for the ACK and then send the second one, it is inefficient as we can see computing the <strong>utilization of the channel</strong>:</p>
<p>$$ U = \frac{L/R}{RTT+ L/R} $$</p>
<p>The solution is simple: rather than operate in a stop-and-wait manner, the sender is allowed to send multiple packets without waiting for acknowledgements. Since the many in-transit send-to-receiver packets can be visualized as filling a pipeline, this technique is known as <strong>pipelining</strong>.</p>
<p>Some consequences:</p>
<ul>
<li>The range of sequence numbers must be increased: <strong>each in-transit packet must have a unique sequence number</strong></li>
<li>Sender and receiver may have to buffer more than one packet.</li>
</ul>
<p>Two basic approaches toward pipelined error recovery can be identified: <strong>Go-Back-N</strong> and <strong>Selective Repeat</strong></p>
<h3 id="343-go-back-n-gbn">3.4.3 Go-Back-N (GBN)</h3>
<p>The sender is allowed to send N packets (<strong>sender window size = N</strong>), the receiver has a window of size <strong>1</strong>.
If a segment from sender to receiver is lost, the receiver discards all the segments with sequence number greater than the sequence number of the dropped packet, answering with ACK with this sequence number. (no packet re-ordering)
The sender will wait for ACK in order to move the window and send new packets. The wait is not infinite, after a certain time a timeout will occur and the sender will retransmit all the packets in the sending window.
In a Go-Back-N protocol, acknowledgements are <strong>cumulative</strong>: if sender receives ACK3 he will know that all the packets from 0 to 3 have been received, even if hasn&rsquo;t received ACK2.</p>
<h3 id="344-selective-repeat">3.4.4 Selective Repeat</h3>
<p>When the window-size and bandwidth-delay product are both large, many packets can be in the pipeline and a single packet error can thus cause GBN to retransmit a large number of packets, many unnecessarily.
<strong>Selective Repeat</strong> avoid unnecessary retransmissions by having the sender retransmit only those that packets it suspects were received in error at the receiver:
<strong>individual acknowledgements</strong> (opposed to cumulative).
<strong>sender window size = N</strong> and <strong>receiver window site = N</strong>.
The sender has a timer for each packet in its window. When a timeout occurs, only the missing packet is resent.
The receiver buffers out of order packets.</p>
<h2 id="35-conncetion-oriented-transport-tcp">3.5 Conncetion-Oriented Transport: TCP</h2>
<h3 id="351-the-tcp-connection">3.5.1 The TCP Connection</h3>
<p>TCP is said to be <strong>connection-oriented</strong> because before one application process can begin to send data to another, the two processes must first &ldquo;handshake&rdquo; with each other. During the connection establishment, both sides of the connection will initialize many TCP state variables.
TCP connection is not an end-to-end TDM or FDM circuit nor is it a virtual circuit as <strong>the connection state resides entirely in the two end systems</strong> and not in the intermediate network elements.
A TCP connection provides a <strong>full-duplex service</strong>: when a connection between process A and process B, application layer data can flow from A to B and, at the same time, from B to A.
TCP is also <strong>point-to-point</strong>: a connection is always  between a <em>single sender</em> and a <em>single receiver</em>, no multicast possible.</p>
<p>Establishment of the connection: the client first sends a special TCP segment, the server responds with a second special TCP segment and the client answer again with a third special TCP segment. The first two cannot contain a payload while the third can. Three segments: <strong>three-way handshake</strong>.
Both the sender and the receiver have buffers that are set up during the handshake.
The maximum amount if data that can be grabbed and placed in a segment is limited by the <strong>maximum segment size (MSS)</strong>.
TCP therefore splits data into smaller chunks and pairs each chunk of client data with a TCP header thereby forming <strong>TCP segments</strong> which are passed down to the network layer. When TCP receives a segment at the other end, the segment&rsquo;s data is placed in the TCP connection&rsquo;s receive buffer. <strong>Each side of the connection has its own send buffer and its own receive buffer</strong></p>
<h3 id="352-tcp-segment-structure">3.5.2 TCP Segment Structure</h3>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-tcp-segment.png" alt="tcp segment"  />
</p>
<ul>
<li>32 bit sequence number and acknowledgement number necessary for reliable data transmission</li>
<li>16 bit <strong>receive window</strong> used for flow control, indicates the number of bytes that a receiver is willing to accept</li>
<li>4 bit <strong>header length field</strong>. The TCP header can be of a variable length due to the TCP options field (usually empty therefore usual length is 20 bytes)</li>
<li><strong>options field</strong> used to negotiate MSS or as a window scaling factor for use in high speed networks.</li>
<li><strong>flag field</strong>: 6 bits:
<ol>
<li>ACK used to indicate that the value carried in the acknowledgement field is valid, that is the segment contains an acknowledgement for a segment that has been successfully received.</li>
<li>,  3. and 4. <strong>RST, SYN, FIN</strong> for connection setup and teardown</li>
<li><strong>PSH</strong> indicates that the receiver should pass the data to upper layer immediately</li>
<li>URG indicates that there is data in the segment that the sending side upper layer has marked as urgent.</li>
</ol>
</li>
</ul>
<h4 id="sequence-numbers-and-acknowledgment-numbers">Sequence Numbers and Acknowledgment Numbers</h4>
<p>TCP views data as <em>an unstructured, but ordered, stream of bytes</em> and TCP&rsquo;s use of sequence numbers reflects this view: sequence numbers are over the stream of bytes and not over the series of transmitted segments.
The <strong>sequence number for a segment</strong> is the byte-stream number of the first byte in the segment.
EX 500,000 bytes, MSS = 1,000 bytes =&gt; 500 segments are created. First is numbered 0, second 1000, third 2000&hellip;..</p>
<p><strong>The acknowledgement number</strong> <em>that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B</em>.
TCP is said to provide <strong>cumulative acknowledgements</strong>: if sender receives ACK 536 he will know that all the bytes from 0 to 535 have been well received.
What does a host do when it receives out-of-order segments? The receiver buffers the out-of-order bytes and waits for the missing bytes to fill in the gaps.
Usually both sides of a TCP connection randomly choose an initial sequence number <strong>randomly</strong> both for security and for minimizing the possibility that a segment that is still present in the network from an earlier, already terminated connection between two hosts is mistaken for a valid segment in a later connection between these same two hosts.</p>
<h3 id="353-round-trip-time-estimation-and-timeout">3.5.3 Round-Trip Time Estimation and Timeout</h3>
<p>TCP uses a timeout/retransmit mechanism to recover from lost segments. The question rises: How long should the timeout intervals be?
Clearly the timeout should be larger than the connection&rsquo;s round-trip time? How much larger? How can the RTT be evaluated?</p>
<h4 id="estimating-the-round-trip-time">Estimating the Round-Trip Time</h4>
<p>The sample RTT, <code>SampleRTT</code>, for a segment is the amount of time between when the segment is sent (passed to network layer) and when an acknowledgement for the segment is received.
Most TCP implementations take one <code>SampleRTT</code> at a time: at any point in time, the <code>SampleRTT</code> is being estimated for only one of the transmitted but currently unacknowledged segments, leading to a <em>new value of <code>SampleRTT</code> for approximatively every RTT</em>.
TCP <strong>never computes a <code>SampleRTT</code> for a segment that has been retransmitted</strong>, only for segments transmitted once.
In order to estimate a typical RTT, TCP keeps an average called <code>EstimatedRTT</code> of the <code>SampleRTT</code> values. Upon obtaining a new <code>SampleRTT</code> TCP updates this estimation according to the formula:</p>
<p><code>EstimatedRTT = (1 - a) * EstimatedRTT + a * SampleRTT</code></p>
<p>where usually a = 1/8 = 0.125</p>
<p>We note that this weighted average puts more weight on recent samples than on old samples. In statistics such an average is called an <strong>exponential weighted moving average (EWMA)</strong>.
It is also useful to having an estimate of the <em>variability of the RTT</em>. We can measure how much <code>SampleRTT</code> typically deviates from <code>EstimatedRTT</code>:</p>
<p><code>DevRTT = (1 - b) * DevRTT + b* | SampleRTT - EstimatedRTT |</code></p>
<p>We note that this is an EWMA of the difference of estimated and last measured RTT. The recommended value for b is b = 0.25</p>
<h4 id="setting-and-managing-the-retransmission-timeout-interval">Setting and Managing the Retransmission Timeout Interval</h4>
<p><code>TimeoutInterval = EstimatedRTT + 4 * DevRTT</code></p>
<p>An initial <code>TimeoutInterval</code> value of 1 second is recommended.
Also <strong>when a timeout occurs, the value of <code>TimeoutInterval</code> is doubled</strong> in order to avoid a premature timeout occurring for a subsequent segment that will soon be acknowledged. As soon as a segment is received and <code>EstimatedRTT</code> is updated, the <code>TimeoutInterval</code> is again computed using the formula above.</p>
<h3 id="354-reliable-data-transfer">3.5.4 Reliable Data Transfer</h3>
<p>TCP creates a <strong>reliable data transfer service</strong> on top of IP&rsquo;s unreliable best-effort service. It ensures that the data stream that a process reads out of its TCP receive buffer is <em>uncorrupted, without gaps, without duplication and in sequence</em>.
We supposed until now that an individual timer was associated with each transmitted segment. However timer management can require considerable overhead. Thus the recommended TCP timer management procedures (defined by RFC standards) use only a <em><strong>single</strong></em> retransmission timer (it is helpful to think of the timer as being <em>associated with the oldest unacknowledged segment</em>).</p>
<ol>
<li>Upon receiving data from the application layer, TCP encapsulates it in a segment and passes to the segment to IP. If the timer is not running for some other segment, TCP starts it when the segment is passed to IP, the timer expiration interval being <code>TimeoutInterval</code></li>
<li>If the timeout occurs, TCP responds by <strong>retransmitting the segment that caused the timeout</strong> and by restarting the timer</li>
<li>An valid acknowledgement segment is received: TCP compares the ACK <code>y</code> value with its <code>sendBase</code> (the sequence number of the oldest unacknowledged byte). If <code>y &gt; sendBase</code> then ACK is acknowledging one or more previously unacknowledged segments (cumulative acknowledgement). The <code>sendBase</code> variable is updated and the timer is restarted if there are not-yet-acknowledged segments.</li>
</ol>
<h4 id="doubling-the-timeout-interval">Doubling the Timeout Interval</h4>
<p>Each time TCP retransmits, it sets the next timeout interval to twice the prevous value. However when the timer is restarted after receiving data from the application layer or after receiving an ACK, the <code>TimeoutInterval</code> is recomputed as described previously</p>
<h4 id="fast-retransmit">Fast Retransmit</h4>
<p>The problem with timeout-triggered retransmission is that the timeout period can be relatively long.
The sender can however often detect packet loss before the timeout event occurs by noting <em>duplicate ACKs</em>. A <strong>duplicate ACK</strong> is an ACK that reacknowledges a segment for which the sender has already received an earlier acknowledgement.
When the TCP sender receives <strong>three duplicate ACK for the same data</strong> it takes this as an indication that the segment following the segment that has been ACKed three times has been lost. In the case that three duplicate ACKs are received, the TCP sender performs a <strong>fast restransmit</strong>: it retransmits the missing segment <em>before</em> that segment&rsquo;s timer expires.</p>
<h4 id="go-back-n-or-selective-repeat">Go-Back-N or Selective Repeat?</h4>
<p>Acknowledgments are cumulative (GBN) but many TCP implementations will buffer correctly received but out-of-order segments.
Also consider fast retransmit where only the missing packet is resent (SR) instead of all the window (GBN).
We can see that TCP&rsquo;s error recovery mechanism is categorized as a <strong>hybdrid of GB and SR protocols</strong>.</p>
<h3 id="355-flow-control">3.5.5 Flow Control</h3>
<p>The host on each side of a TCP connection set aside a receive buffer for the connection. When TCP receives bytes that are correct and in sequence, it places the data in the receive buffer. The associated application process will read data from this buffer, but necessarily at the instant the data arrives (busy, not interested&hellip;). Thus the <em>the sender can easily overflow the connection&rsquo;s receive bufffer by sending too much data too quickly</em>. To avoid this event, TCP provides a <strong>flow-control service</strong>.
Flow control is a <em>speed-matching service</em>: matching the rate at which the sender is sending against the rate at which the receiving application is reading.</p>
<p><strong>Flow control and congestion control are not the same!</strong>: the former preventing overflow at the receiver side and being actuated only by the two end points, the latter preventing congestion of the network.</p>
<p>TCP provides flow control by having the <em>sender</em> maintain a variable called the <strong>receive window</strong>, used to give the sender an idea of how much free buffer space is available at the receiver.</p>
<p>Host A sends a large file to Host B over TCP.</p>
<h5 id="b-side">B side</h5>
<ul>
<li>B allocates a receive buffer to its connection, its size being <code>RcvBuffer</code></li>
<li>B also keeps the variables: <code>LastByteRead</code> (number of last byte in the data stream read by the application process) and <code>LastByteRcvd</code> (the number of the last byte arrived from the network and placed in the receive buffer)</li>
</ul>
<p>We have: <code>LastByteRcvd - LastByteRead &lt;= RcvBuffer</code> (we don&rsquo;t want overflow!)</p>
<p>Receive window aka the <em>amount of spare room in the buffer</em> <code>rwnd = RcvBuffer -  [LastByteRcvd - LastByteRead]</code>
<code>rwnd</code> is dynamic</p>
<h5 id="a-side">A side</h5>
<p>A keeps track of two variables:</p>
<pre><code>1. `LastByteSent`
2. `LastByteAcked`
</code></pre>
<p>Through the connection&rsquo;s life A must make sure that <code>LastByteSent - LastByteSent &lt;= rwnd</code></p>
<p>If B&rsquo;s buffer becomes full, he sends <code>rwnd = 0</code>.  If <em>B has nothing to send to A</em>, when the application process empties B&rsquo;s buffer, TCP does not send a new segment with the new value of <code>rwnd</code> to A (TCP sends to A only if it needs to send data or if it needs to send an ACK).
Therefore A is never informed that B&rsquo;s buffer has some free space and <strong>he is blocked and can trasmit no more data</strong>.
To solve this problem, TCP requires A to <strong>continue to send segments with one data byte when B&rsquo;s receive window is 0</strong>, these segments will be acknowledged by B. Eventually the buffer will begin to empty and the acknowledgements will contain à non-zero <code>rwnd</code> value.</p>
<p>We remember that <strong>UDP has no flow control service</strong></p>
<h3 id="356-tcp-connection-management">3.5.6 TCP Connection Management</h3>
<h4 id="how-is-the-connection-established-three-way-handshake">How is the connection established? <strong>Three-way handshake</strong></h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-three-way.png" alt="three way"  />
</p>
<ol>
<li>The client-side TCP sends a special TCP segment to server-side TCP. This segment <strong>doesn&rsquo;t contain any application-layer data</strong> but the <strong>flag bit SYN is set to 1</strong>. The segment is referred to as a <em>SYN segment</em>. The client also <strong>randomly chooses an initial sequence number</strong> (<code>client_isn</code>) and <strong>puts this number in the sequence number field of the initial TCP SYN segment</strong>. (randomizing <code>client_isn</code> is interesting to avoid security attacks).</li>
<li>The TCP SYN segment arrives at the server-side, it is extracted from the datagram. The server allocates the TCP buffers and variables to the connection and <strong>sends a connection-granted segment to the client</strong>. This segment also contains no application-layer data. The <strong>SYN flag is set to 1</strong>, the <strong>ACK field in the header is set to <code>client_isn+1</code></strong>. <strong>The server chooses its own initial sequence number <code>server_isn</code></strong> and <strong>puts this value in the sequence number field of the TCP segment header</strong>. This segment is referred to as <em>SYNACK segment</em>.</li>
<li>Upon receiving the SYNACK segment, the client also allocates buffers and variables to the connection. The client then <strong>sends the server yet another segment which acknowledges the SYNACK</strong> (<code>server_isn+1</code> is set the acknowledgement field of the TCP segment header)</li>
</ol>
<p>After this setup, all the segments will have the SYN bit set to 0 in their headers.</p>
<h4 id="tearing-down-a-tcp-connection">Tearing down a TCP connection</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-tcp-end.png" alt="tcp end"  />
</p>
<p>The client decides to end the connection:</p>
<ol>
<li>The client sends a special TCP segment to the server, this special segment having the <strong>FIN bit flag set to 1</strong> in the header.</li>
<li>The server receives the segment and sends an acknowledgement to the client.</li>
<li>The server then sends its own shutdown segment which also <strong>has the FIN bit set to 1</strong></li>
<li>The client acknowledges the server&rsquo;s shutdown segment.</li>
<li>The &ldquo;resources&rdquo; (buffers and variables) in the host<strong>s</strong> are deallocated.</li>
</ol>
<h4 id="what-if-the-two-ends-are-not-ready-for-communication">What if the two ends are not ready for communication?</h4>
<p>A host receives a TCP segment whose port number or source IP address do not match with any of the ongoing sockets in the host -&gt; the host sends a special reset segment to the source (RST flag bit set to 1) and drops the packet (UDP does responds with a special ICMP datagram)</p>
<h2 id="36-principles-of-congestion-control">3.6 Principles of Congestion Control</h2>
<h3 id="361-the-causes-and-the-costs-of-congestion">3.6.1 The Causes and the Costs of Congestion</h3>
<h4 id="scenario-1-two-senders-a-router-with-infinite-buffers">Scenario 1: Two Senders, A Router with Infinite Buffers</h4>
<p>A -&gt; D, B -&gt; C, A and B connect to the Internet through the same router, B and C connect to the Internet through the same router
(pas envie)</p>
<h2 id="37-tcp-congestion-control">3.7 TCP Congestion Control</h2>
<p>TCP limits the rate at which it sends traffic into its connection as a function of perceived network congestion.
The TCP congestion-control mechanism operating at the sender keeps track of an additional variable: the <strong>congestion window</strong>, noted <code>cwnd</code> which imposes a constraint on the rate at which a TCP sender can send traffic into the network. Specifically: <code>LastByteSent - LastByteAcked &lt;= min{cwnd, rwnd}</code>.
Limiting the amount of unacknowledged data at the sender we can limit the sender&rsquo;s send rate.
At the beginning of each RTT the sender sends <code>cwnd</code> bytes of data and at the end of the RTT he acknowledges. Thus <strong>the sender&rsquo;s send rate is roughly <code>cwnd/RTT</code> bytes/sec. Adjusting the value of <code>cwnd</code> the sender can adjust the rate at which it sends data into the connection</strong>.
Let now consider a <em>loss event</em> (timeout OR three duplicate ACKs). When there is excessive congestion some router buffers along the path overflows, causing a loss event at the sender <em>which is taken by the sender to be an indication of congestion on the sender-to-receiver path</em>.
If there is no congestion then all the acknowledgements will be received at the sender, which will take these arrivals as an indication that segments have been received and that he can increase the congestion window size and hence its transmission rate. If acknowledgements arrive at a slow rate then the congestion window will be increased at a relatively slow rate and, viceversa, it will be increased more quickly if ACKs arrive at a high rate.
Because TCP uses acknowledgements to trigger (or clock) its increase in congestion window size, TCP is said to be <strong>self-clocking</strong>. TCP uses the principles:</p>
<ol>
<li><em>A lost segment implies congestion therefore the sender rate should be decreased.</em></li>
<li><em>An acknowledged segment means the network&rsquo;s working, therefore the sender&rsquo;s rate can be increased</em> (if ACK of unacknowledged segment)</li>
<li><em>Bandwidth probing</em>: the transmission rates increases with ACKs and decreases with loss events: TCP is continuously checking (probing) the congestion state of the network</li>
</ol>
<h3 id="tcp-congestion-control-algorithm">TCP Congestion-Control Algorithm</h3>
<p>Three components :</p>
<h4 id="1---slow-start">1 - Slow Start</h4>
<p>When a TCP connection begins, <code>cwnd</code> is usually initialized to a small value of 1 MSS and only one segment is sent. <strong>Each acknowledged packet</strong> will cause the <code>cwnd</code> to be increased by 1 MSS and the sender will send now two segments (because the window is increased by one for each ack).
Therefore the number of segments doubles at each RTT, therefore the sending rate also doubles every RTT. Thus TCP send rate <strong>starts slow but grows exponentially during the slow start phase</strong>.
When does the growth end?</p>
<ul>
<li>Timeout: <code>cwnd</code> is set to 1 MSS and the slow start is started anew. Also the variable slow start threshold is initialized:
<code>ssthresh = cwnd / 2 - (half of value of cwnd when congestion is detected)</code></li>
<li>When <code>cwnd &gt;= ssthresh</code> slow starts is stopped -&gt; congestion avoidance state</li>
<li>Three duplicate ACKs: fast retransmit and fast recovery state</li>
</ul>
<h4 id="2---congestion-avoidance">2 - Congestion Avoidance</h4>
<p>TCP suppose congestion is present, how to adapt?
Instead of doubling <code>cwnd</code> every RTT, <code>cwnd</code> is increased <strong>by just a single MSS every RTT</strong>.
When should this linear increase stop?</p>
<ul>
<li>Timeout: <code>cwnd</code> is set to 1 MSS, and <code>ssthresh = cwnd (when loss happened) / 2</code></li>
<li>Three duplicate ACKs: <code>cwnd = (cwnd / 2) + 3 MSS</code> and <code>ssthresh = cwnd (when 3 ACKs received) / 2</code> -&gt; fast recovery state</li>
</ul>
<h4 id="3---fast-recovery">3 - Fast Recovery</h4>
<p><code>cwnd</code> is increased by 1 MSS for every duplicate ACK received for the missing state that caused TCP to enter this state. When the ACK arrives for the missing segment, TCP goes into Congestion Avoidance after reducing <code>cwnd</code>.
If a timeout occurs <code>cwnd</code> is set to 1 MSS and <code>ssthresh</code> is set to half the value of <code>cwnd</code> when the loss event occurred.
Fast recovery is recommended but not required in TCP, in fact only the newer version of TCP, <strong>TCP Reno</strong> incorporated fast recovery.</p>
<h4 id="macroscopic-description-of-tcp-throughput">Macroscopic Description of TCP Throughput</h4>
<p>What is the average throughput (average rate) of a long-lived TCP connection?
Ignoring the slow start phase (usually very short as the rate grows exponentially). When the window size is <em>w</em> the transmission rate is roughly <em>w</em>/RTT. <em>w</em> is increased by 1 MSS each RTT until a loss event.
Denote by <em>W</em> the value of <em>w</em> when a loss event occurs. Then we have</p>
<p>average throughput of a connection = (0.75 * W)/RTT</p>
<h4 id="tcp-over-high-bandwidth-paths">TCP Over High-Bandwidth Paths</h4>
<p>Today&rsquo;s high speed links allow to have huge windows. What happens if one of the segments in the window gets lost? What fraction of the transmitted segments could be lost that would allow the TCP congestion control to achieve the desired rate?</p>
<p>average throughput of a connection = (1.22 * MSS)/(RTT * sqrt(L))</p>
<p>Where L is the loss rate</p>
<h1 id="chapter-4-the-network-layer">Chapter 4: The Network Layer</h1>
<p>In the chapter, there is an important distinction between the <strong>routing</strong> and <strong>forwarding</strong> functions of the network layer. Forwarding involves the transfer of a packet from an incoming link to an outgoing link <em>within a single router</em> while routing involves <em>all of a network&rsquo;s routers</em> whose collective interactions via routing protocols determine the paths that packets take on their trips from source to destination.</p>
<h2 id="41-introduction">4.1 Introduction</h2>
<p>The primary role of routers is to forward datagrams from input links to output links. Routers do not run nor the application-layer or the transport-layer, they go only up until the network layer.</p>
<h3 id="411-forwarding-and-routing">4.1.1 Forwarding and Routing</h3>
<p>The role of the network layer is deceptively simple: <strong>to move packets from a sending hosts to a receiving host</strong>. To do so it performs two important functions:</p>
<ul>
<li><em><strong>Forwarding</strong></em>: When a packet arrives to a router&rsquo;s input link, the router must move the packet to the appropriate output link. It is an action <strong>local</strong> to the router</li>
<li><em><strong>Routing</strong></em>: The network layer must determine the route or path taken by packets as they flow from a sender to a receiver. The algorithms that calculate these paths are referred to as <strong>routing algorithsm</strong>. It is a <strong>network-wide</strong> action</li>
</ul>
<p>Every router has a <strong>forwarding table</strong>. When a router receives a packet, it extracts a value from a specific field in the header and searches for that value in in the forwarding table.
The procedure used to set up and update the table depends on the protocol used. However a router receives and sends <em>routing protocol messages</em> to configure its forwarding table.</p>
<p>We also need to mark the distinction between routers and <em>packet switches</em>.</p>
<ul>
<li>Packet-switches: performs forwarding according to the value in a field in the header of the packet. Some packet switches called <strong>link-layer switches</strong> base their forwarding decisions on values in the fields of the <em>link-layer frame</em> (link-layer devices)</li>
<li>Routers: base forwarding decisions on the value in the network-layer field. (network-layer devices) but also must implement link layer (no 3 without 2)</li>
</ul>
<h4 id="connection-setup">Connection Setup</h4>
<p>in some computer networks there is a third really important networks-layer function: <strong>connection setup</strong>: a <strong>path-wide</strong> process that sets up connection state in routers.</p>
<h3 id="412-network-service-models">4.1.2 Network Service Models</h3>
<p>The <strong>network service model</strong> defines the characteristics of end-to-end transport of packets between sending and receiving end systems. Some possible service for a network layer:</p>
<ol>
<li>Sending side:
<ul>
<li><em>Guaranteed delivery</em></li>
<li><em>Guaranteed delivery with bounded delay</em></li>
</ul>
</li>
<li>Flow and receiving side:
<ul>
<li><em>In-order packet delivery</em></li>
<li><em>Guaranteed minimal bandwidth</em></li>
<li><em>Guaranteed maximum jitter</em> (amount of time between transmission of two successive packets at the sender side is equal to the amount of time between their receipt at the destination, or that this spacing changes by no more than some specified value)</li>
<li><em>Security services</em>: encryption for confidentiality, data integrity and source authentication</li>
</ul>
</li>
</ol>
<p><strong>The Internet&rsquo;s network layer doesn&rsquo;t provide any of these</strong>: it provides a <strong>best-effort service</strong> there are no timing or bandwidth guarantees, no loss or order guarantees and congestion control indications.</p>
<h2 id="42-virtual--circuit-and-datagrams-networks">4.2 Virtual  Circuit and Datagrams Networks</h2>
<p>As in transport layer, the network layer can use connection or connection-less protocols. There however some differences with the transport layer:</p>
<ul>
<li>In the network layer these services are <strong>host-to-host</strong> services (not the case for the TL, just look at TCP)</li>
<li>The network layer provides either a host-to-host connectionless service or a host-to-host connection service <strong>but no both</strong>. Connection service -&gt; <strong>Virtual-Circuit (VC) networks</strong>, Connectionless service -&gt; <strong>datagram networks</strong></li>
</ul>
<h3 id="421-virtual-circuit-networks">4.2.1 Virtual-Circuit Networks</h3>
<p>The Internet is a datagram network but many alternative network architectures (ATM) are virtual-circuit networks. The connections in VC are called *<em>virtual circuits (VCs)3</em>.
A VC consists of</p>
<ol>
<li>A source-to-destination <em>path</em></li>
<li>VC numbers, one for each link along the path</li>
<li>Entries in the forwarding table in each router along the path</li>
</ol>
<p>A packet belonging to a virtual circuit will carry a VC number in its header. Because a VC may have different VC numbers on each link, each router must replace the VC number of traversing packets with a new VC number, which is obtained from the forwarding table. How is this determined?
Whenever a VC is established across a router, an entry is added to the forwarding table, and one (corresponding to the terminating VC) is removed whenever a VC ends.
The routers must maintain <strong>connection state information</strong> for the ongoing connections (using the tablea). There are 3 phases in a VC:</p>
<ul>
<li><em>VC Setup</em>: sending side contacts networks layer specifying the IP address of the destination. The network sets up the VC. The path is determined as well as the VC number for each link along the path. The forwarding tables are updated and resources reserved.</li>
<li><em>Data transfer</em>: the packets flow</li>
<li><em>VC teardown</em>: The call termination propagates along the path, the forwarding tables are updated</li>
</ul>
<p>During network-layer setup <em>all the routers along the path between source and destination are involved in VC setup, and each router is fully aware of all VCs passing through it</em> (not in TCP: setup and connection only between source and destination).
The messages used by end ssystems to initiate or terminate a VC are called <strong>signaling messages</strong> and the protocols used to exchange them are called <strong>signaling protocols</strong>.</p>
<h3 id="422-datagram-networks">4.2.2 Datagram Networks</h3>
<p>Each time an end system wants to send a packet, it sampts the packet with the address of the destination end system and pops the packet into the network. The routers along the path will use this address to forward it.
The router has a forward table that <em>maps destination addresses to link interfaces</em>. When a packet arrives, it reads the destination address, uses the table to determine what link to use, and forwards the packet to that output link interface.</p>
<p>If we consider IPv4, addresses are 32 bits long. To avoid having tables with 2^32 entries, routers use <strong>prefixes</strong>. When there are multiple mathces to one address, the router uses the <strong>longest prefix matching rule</strong>.</p>
<p>Although routers in datagram networks maintain no connection state information, they nevertheless maintain forwarding state information in their forwarding tables.</p>
<h3 id="423-origins-of-vc-and-datagram-networks">4.2.3 Origins of VC and Datagram Networks</h3>
<p>VC has its roots in the telephony world, which uses circuits switching too.
The datagram model instead comes from the need to simplify as much as possible the network to bring computers together.</p>
<h2 id="43-whats-inside-a-router">4.3 What&rsquo;s Inside a Router?</h2>
<ul>
<li><em>Input ports</em>: performs the physical layer functions of incoming link at the router. It is also here that the forwarding table is consulted to determine the output port to which the arriving packet will be forwarded via the switching fabric. Control packets (protocol info) are forwarded to the routing processor.</li>
<li><em>Switching fabric</em>: connects input prots to output ports.</li>
<li><em>Output ports</em>: stores packets received from the switching fabric and performs the necessary link layer and physical layer functions.</li>
<li><em>Routing processor</em>: executes the routing protocols (algorithms), maintains routing tables and attached link state information and computes the forwarding table for the router.</li>
</ul>
<p>Input ports, switching fabric and output ports implement the forwarding function and are almost always implemented in hardware (<em>routing forwarding plane hardware</em>) while the routing processor implements the routing function and is usually implemented in software running on traditional CPU (<em>router control plane</em>)</p>
<h3 id="431-input-processing">4.3.1 Input Processing</h3>
<p>The packet arrives and the link and phyisical layer unpacking functions are performed. The forwarding table is computed and updated by the routing processor with a shadow copy typically stored at each input port so that forwarding decision can be made locallly without invoking the centralized routing processor on a per packet basis and thus avoiding a centralized processing bottleneck. The table is transferred to ports through separated bus. The lookup is then just a search (implemented in hardware and using high performance algorithms), speed also depends on the memory technology (DRAM, SRAM&hellip;). Lookup is important but input processing also consists of</p>
<ul>
<li>physical and link layer processing</li>
<li>chekcing the packet&rsquo;s version number, checksum, time to live&hellip;.</li>
<li>updating counters for network management.</li>
</ul>
<p>Input ports than moves the packet to the switching fabric (eventually queuing them if this is busy)</p>
<h3 id="432-switching">4.3.2 Switching</h3>
<p>Can be performed in different ways:</p>
<h4 id="switching-via-memory">Switching via memory</h4>
<p>Switching under the control of the CPU and input and output ports functioned as traditional I/O devices in a traditional operating system. The packet arrives, is copied into the processor memory, the processor determines the output port and copies the packet to the output port&rsquo;s buffer.
No parallel forwarding (only 1 memory read/write bus)</p>
<h4 id="switching-via-a-bus">Switching via a bus</h4>
<p>An input port transfers a packet directly to the output port over a shared bus without intervention by the routing processor. The input port pre-pends an internal header to the packet. All the output ports receive the packet but only the one that matches the label in the internal header will keep the packet. The output port will remove this internal header. The switching speed is limited to the bus speed as one packet at a time can cross the bus (multiple arriving packets will have to wait). Sufficient only for small area and enterprise networks</p>
<h4 id="switching-via-an-interconnected-network">Switching via an interconnected network</h4>
<p>To overcome the bandwidth limitation of a single shared bus a more sophisticated interconnection network can be used.
A <em>crossbar switch</em> is an interconnection network consisting of 2N buses that connect N input ports to N output ports. Each vertical bus intersects each horizontal bus at a crosspoint which can be opened or closed at any time by the switch fabric controller. If a packet has to go from input X to output Y, only the crosspoint between the horizontal bus from X and the vertical bus to Y will be closed.
Thus packets directed to different output ports can be forwarded simultaneously, but not multiple packets directed to the same output port.</p>
<h3 id="433-output-processing">4.3.3 Output Processing</h3>
<p>takes packets stored in the output&rsquo;s port&rsquo;s memory and transmits them over the output link, thus selecting de dequeuing packets for transmission and performing the necessary link and physical layer transmission functions.</p>
<h3 id="434-where-does-queuing-occur">4.3.4 Where Does Queuing Occur?</h3>
<p>Queues may form at both the input ports and the output ports. The location and the extent of queuing will depend on traffic load, speed of the switching fabric, and line speed. As the queues grow large, the router&rsquo;s memory can eventually be exhausted and <strong>packet loss</strong> will occur. IS THIS USEFUL ? NOT COVERED BY TEACHER</p>
<h2 id="44-the-internet-protocol-ip-forwarding-and-addressing-in-the-internet">4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet</h2>
<p>We know move to study of the network layer in the Internet. There are two versions of the IP (Internet Protocol) in use today: IPv4 and IPv6.
There 3 main components in the Internet: the IP Protocol (addressing, datagram format and packet handling conventions), the routing protocol (path selection), the Internet Control Message Protocol (ICMP) (error reporting and network information).</p>
<h3 id="441-datagram-format">4.4.1 Datagram Format</h3>
<p>A network layer packet is referred to as a <strong>datagram</strong>.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipv4datagram.png" alt="ipv4 datagram"  />
</p>
<p>Some fields:</p>
<ul>
<li><em>Version number</em>: 4 bits specifying the IP protocol version of the datagram (IPv4 or IPv6 )</li>
<li><em>Header length</em>: the length of the packet is variable therefore this field tells where the header ends and the data begins. Usually datagrams contain no option so that the typical IP datagram has <strong>20-byte header</strong></li>
<li><em>Type of service</em> (TOS): allows different types of datagrams to be distinguished from each other. (eg real time vs non real time)</li>
<li><em>Datagram length</em>: 16 bits specifying the total length, that is header + data measured in bytes. 16 bits -&gt; max header length = 65535 bytes, but usually datagrams are rarely larger than 1500 bytes.</li>
<li><em>Identifier, flags, fragmentation offset</em>: used for IP fragmentation. (NB: IPv6 doesn&rsquo;t allow fragmentation at routers)</li>
<li><em>Time-to-live</em> (TTL): used to avoid that datagrams circulate forever. It is decreased by one each time the datagram is processed by a router. When TTL = 0, the datagram is dropped</li>
<li><em>Protocol</em>: only used when datagram reaches its final destination, it specifies what <em>transport protocol</em> to which the data of the datagram should be passed. EX: 6 -&gt; TCP, 17 -&gt; UDP</li>
<li><em>Header checksum</em>: helps the router to detect bit errors in a received IP datagram. Computation: each two bytes in the <strong>header</strong> are considered as numbers, summed up using the 1s complement arithmetic. The 1s complement of this sum is then put in the checksum field. A router computes the checksum for each datagram. If the computed one doesn&rsquo;t equal the one in the field then the router has detected an error. Usually the datagram is discarded. As it is recomputed at each router, it may change.</li>
<li><em>Source and destination IP addresses</em></li>
<li><em>Options</em>: rarely used, dropped by IPv6</li>
<li><em>Data (payload)</em>: usually contains the transport layer segment but can also contain ICMP messages</li>
</ul>
<h4 id="ip-datagram-fragmentation">IP Datagram Fragmentation</h4>
<p>The maximum amount of data that a link layer can carry is called the <strong>Maximum Transmission Unit (MTU)</strong>. As each datagram is encapsulated in a link layer frame, the MTU imposes a hard limit on the length of the datagram. Each of the links along the route can use different link-layer protocols and therefore can have different MTU.
We therefore have to break the IP datagram into smaller datagrams, each of which will go in different link layer frames. Each of these smaller datagrams is referred to as a <strong>fragment</strong>.
A fragment must be reassembled before it can be passed to the transport layer. To reduce the workload on routers, the designers of IPv4 decided that reassembling should only be done at the destination end system.</p>
<p>In IPv4, to comply with fragmentation, the header contains the fields:</p>
<ul>
<li><em>Identifiers</em>: identifies the <strong>unfragmented datagram</strong> (same for all fragments)</li>
<li><em>flags</em>: in particular there is one flag set to 0 if the fragment is the last or to 1 if there are more to come</li>
<li><em>fragmentation offset</em>: an integer x, the data in the fragment should be inserted beginning at byte x * 8</li>
</ul>
<p>If one fragment contains error or is lost, all the others are dropped and TCP will have the sender retransmit all the data.
Fragmentation complicates the network and end systems and can be used in lethal DoS attacks such as the Jolt2 attack</p>
<h3 id="442-ipv4-addressing">4.4.2 IPv4 Addressing</h3>
<p>The boundary between the host and the physical link is called an <strong>interface</strong>. A router has multiple links connected to it, therefore multiple interfaces and therefore a router has multiple IP addresses and <em>an IP address is technically associated with an interface rather than with a host or router</em>.
IPv4 addresses are 32 bits long (4 bytes) -&gt; max 2^32 possible addresses. They are typically writen in <strong>dotted decimal notation</strong> where each byte of the address is written in deciaml from and separated by a period from the others.
EX 193.32.216.9 === 11000001 00100000 11011000 00001001
Each interface on every host (except host behind NATs) must have a unique IP address. How are these computed?
A portion is determined by the subnet to which the host is connected.
A subnet is the portion of the network interconnected end systems and one one router. (also called <em>IP network</em> or <em>network</em>). IP assigns an address to a subnet x.x.x.x/y where /y notation, sometimes known as a <strong>subnet mask</strong> indicates <em>that the leftmost y bits of the 32 bit quantity define the subnet address</em>. If y is 24, then any host attached to the a.a.a.0/24 subnet would be <em>required</em> to have an address of the form a.a.a.xxx.</p>
<p>FIGURE 4.17 WTF</p>
<p>The Internet&rsquo;s address assignment strategy is known as <strong>Classless Interdomain Routing (CIDR)</strong>. It generalizes the notion of subnet addressing. Consider a.b.c.d/x : the x most significant bits constitute the network portion of the IP address and are often referred to as the <strong>prefix</strong> (or <em>network prefix</em>). EX an organization is assigned a block of contiguous addresses, that is, a range of addresses with a common prefix.
When someone outside the organization want to send a datagram to someone inside, he will only need this x bits. The remaining 32-x bits can be thought of as distinguishing among the devices within the organization. These bits may have an additional subnetting structure.
There is yet another type of IP address, the <em>IP broadcast address 255.255.255.255</em>. When a datagram is sent to this address, the datagram is delivered to all hosts on the same subnet.</p>
<h4 id="obtaining-a-block-of-addresses">Obtaining a Block of Addresses</h4>
<p>A network administrator contacts an ISP which would provide a partition of the addresses that had already been allocated to him.
EX ISP has 200.23.16.0/20, it splits in 8 equal sized blocks: 200.23.16.0/23, 200.23.18.0/23, 200.23.20.0/23, &hellip;, 200.23.30.0/23
Who assigns set of addresses to ISPs? The <em><strong>Internet Corporation for Assigned Names and Numbers (ICANN)</strong></em> which allocates IP addresses, manages DNS root servers, assigns domain names and solves domain name disputes.</p>
<h4 id="obtaining-a-host-address-the-dynamic-host-configuration-protocol">Obtaining a Host Address: The Dynamic Host Configuration Protocol</h4>
<p>Once an organization has obtained a block of addresses, it can assign individual IP addresses to the hosts and router interfaces which are part of it. This can be done either <strong>manually</strong> (by the network administrator) or automatically by the <strong>Dynamic Host Configuration Protocol (DHCP)</strong>.
It can be configured so that a host receives the same IP each time it connects to the network or a temporary IP addresses that will change upon each connection. DHCP also transmits to hosts additional information (subnet mask, address of first-hop = default gateway, address of local DNS server).
As it automates the connection of a host into the network, DHCP is often referred to as a <strong>plug-and-play protocol</strong>. It is also popular in *wireless LANs where hosts join and leave frequently and in <em>residential ISP access networks</em>.
DHCP is a <em>client-server protocol</em>, the client being a newly arriving host needing network configuration information and the server being a router or a <em>DHCP relay agent</em> that know the address of a DHCP server for that network.
For a new client there is a 4 step process i nthe DHCP protcol:</p>
<ol>
<li><em>DHCP server discovery</em> c (client) looks for a server sending <strong>DHCP discover message</strong> a UDP packet directed to port 67. This segment is encapsulated in datagram sent to 255.255.255.255 (broadcast address) from address 0.0.0.0</li>
<li><em>DHCP server offer(s)</em> s (server) replies with a <strong>DHCP offer message</strong> broadcast to all nodes on the subnet using (sent to 255.255.255.0). c may receiver many of these (more servers) containing the transaction ID, proposed IP address and an address lease time (amout of time for which the address will be valid)</li>
<li><em>DHCP request</em>: c chooses one offer and responds to s with a <strong>DHCP request message</strong> echoing back the configuration parameters</li>
<li><em>DHCP ACK</em> s responds with <strong>DHCP ACK message</strong> confirming</li>
</ol>
<p>DHCP also provides a mechanism for renewing the lease on an address.</p>
<h4 id="network-address-translation-nat">Network Address Translation (NAT)</h4>
<p>Every IP-capable device needs an IP address. The number of connected devices grows fast, how to deal with IPv4 address space exhaustion?
<strong>Network Address Translation (NAT)</strong>
The NAT-enabled router defines a <strong>realm</strong> (or private network) (a network whose addresses only have meaning to devices within that network) and it can use the whole 32 bit address space for devices connected to it, it will also have a public address used to communicate with the exterior. The picture is explicative.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-nat.png" alt="nat"  />
</p>
<p>From the outside the router looks like a single device with a single IP address. It hides the details of the internal network from the outside world. Internal addresses can be assigned using DHCP.</p>
<p>Problems with NAT:</p>
<ul>
<li>Port number should be used for addressingi processes not hosts</li>
<li>Routers shouldn&rsquo;t have access to the transport layer (ports)</li>
<li>NAT violates end-to-end argument (any host should be able to contact any other host)</li>
<li>NAT interferes with P2P applications (peers hidden by NAT), therefore the need of <strong>connection reversal</strong> for <strong>NAT traversal</strong></li>
</ul>
<h4 id="upnp">UPnP</h4>
<p>NAT traversal is increasingly provided by Universal Plug and Play. It requires both the host and the NAT to be compatible. Host requests a NAT mapping_
<em>(private IP address, private port number) -&gt; (public IP address, public port number)</em>
If the NAT accepts and creates the mapping, then outsiders can create connections to (public IP address, public port number).</p>
<h3 id="443-internet-control-message-protocol">4.4.3 Internet Control Message Protocol</h3>
<p>ICMP is used to communicate network-layer information between hosts and routers, usually for error reporting (ex Destination network unreachable).
ICMP is considered part of IP but architecturally lies just above IP as ICMP messages are carried inside IP datagrams as payloads.
ICMP have a type and a code field and carry the header and the first 8 bytes of the datagram that caused the message to be generated in the first place.
Ping and traceroute are implemented using ICMP messages</p>
<h4 id="inspecting-datagrams-firewalls-and-intrusion-detection-systems">Inspecting datagrams: firewalls and intrusion detection systems</h4>
<p>Firewalls inspect the datagram and segment header fields denying suspicious datagrams entry into the internal network. Firewalls can block ICMP packages or packets based on port numbers, addresses.
Additional protection can be provided by IDS, placed at the boundary of the network, performs <em>deep packet inspection</em> examining not only headers but also payloads (including application layer data). IDS have databases of packet signatures that are know to be dangerous. As packets flow through the IDS, it tries to match them to signatures in its database, if a match is found, an alert is created. IPS (intrusion prevention system) in addition to detecting, also blocks packets raising alerts.</p>
<h3 id="444-ipv6">4.4.4 IPv6</h3>
<p>Developed because of IPv4 address space exhaustion</p>
<h4 id="datagram-format">Datagram format</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipv6datagram.png" alt="ipv6 datagram"  />
</p>
<ul>
<li>the size of the source and destination addresses is increased <strong>from 32 to 128 bits</strong>: every grain of sand on the planet can be addressable.
Unicast and multicast addresses are joind by the <strong>anycast address</strong> which allow a datagram to be delivered to any one of a group of hosts.</li>
<li>A number of IPv4 fields have been dropped or made optional resulting in a <strong>40-byte fixed-length header</strong> which allows faster datagram processing.</li>
<li><em>Flow label</em> not clear definition. 20-bit</li>
<li><em>Version</em>: 4-bit for IPv6 or 4. If ipv6 -&gt; 0110</li>
<li><em>Traffic class</em>: 8 bit similar to TOS</li>
<li><em>Payload length</em>: 16 bit unsigned integer indicating number of bytes following the 40-byte datagram header</li>
<li><em>Next header</em>: transport layer protocol</li>
<li><em>Hop limit</em>: decremented by one by each router forwarding the datagram, when 0, the datagram is discarded</li>
</ul>
<p>Fragmentation and reassembly cannot be done by intermediate routers, only by source and destination. If a router cannot trasmit a datagram because too big, it drops it and sends back an ICMP error message &ldquo;Packet too big&rdquo;. This reduces a lot the workload on the network.</p>
<p>As the transport layer and the link layer already perform check-summing, this functionality has been removed from the network layer for faster datagram processing.</p>
<p>An option field is no longer part of the header, instead it is one of the possible next headers pointed to from the header.
A <strong>new version of ICMP has been defined for IPv6</strong> which includes messages adapted to IPv6 (&ldquo;packet too big&rdquo;) and replaces IGMP (Internet Group Management Protocol), used to manage a host&rsquo;s joining and leaving of multicast groups.</p>
<h4 id="transitioning-from-ipv4-to-ipv6">Transitioning from IPv4 to IPv6</h4>
<p>IPv6 is back compatible with IPv4 but not viceversa.</p>
<p>It&rsquo;s not humanable possible to decide a date on which all machines would change their protocol.
The most straightfoward way is a <strong>dual stack</strong> approach where IPv6 nodes also have a complete IPv4 implementation. To determine whether anotehr node is IPv6 or IPv4-only DNS can be used, just checking whether the node has a IPv6 address or an IPv4 one. However this will bring about the loss of data in specific IPv6 header fields.
Another approach would be <strong>tunneling</strong> : when two IPv6 nodes are connected by intervening IPv4 routers, we call the IPv4 nodes <strong>tunnel</strong>, the entire IPv6 datagram is put in the payload field of a IPv4 datagram which will be propagated by the tunnel unaware of the details and received by the destination IPv6 node which is able to extract the IPv6 datagram and to route it.
This migration shows the difficulty in changing network-layer protocols.</p>
<h1 id="45-routing-algorithms">4.5 Routing Algorithms</h1>
<p>A host is attached directly to one router, the <strong>default router</strong> for the host (also called <strong>first hop router</strong>). Whenever a host sends a packet, the packet is transferred to its default router, which we&rsquo;ll call <strong>source router</strong>, we&rsquo;ll call the default router for the destination host as the <strong>destination router</strong>. Routing a packet from source to destination boils down to routing the packet from source router to destination router.</p>
<p>The purpose of a routing algorithm is simple: given a set of routers connected by links, it finds a &ldquo;good&rdquo; path from source to destination router. <em>A good path is the least expensive one</em>.</p>
<p>Graphs (see Algorithms course) are used to formulate routing problems, the node representing routers and the edges the links connecting them. Each edge also has a <strong>value representing its cost</strong>. For any nodes x and y in the G(raph) we denote c(x,y) the cost of the edge between them. If (x,y) doesn&rsquo;t belong to G, we set c(x,y) = infinity. We only consider undirected graphs.
We just have to find the least costly paths between sources and destinations.
We can classify routing algorithms in two groups:</p>
<ul>
<li><strong>Global routing algorithms</strong>: compute the least-cost path between a source and a destination using complete, global knowledge about the network.
They are often referred to as <strong>link-state (LS) algorithms</strong> since the algorithm must be aware of the cost of each link in the network</li>
<li><strong>Decentralized routing algorthms</strong>: compute the least-cost path in an iterative, distributed manner: no node has complete information about the cost of all network links. Instead, each node begins with only the knowledge of the costs of its own directly attached links.</li>
</ul>
<p>We could also make another classification separating <strong>static routing algorithms</strong> (routes change very slowly, eg after human intervention) and <strong>dynamic routing algorithms</strong>( routing change as the load or topology change). Finally another distinction could be made between <strong>load-sensitive</strong> or <strong>load-insensitive</strong> algorithms according to whether link costs vary reflecting the level of congestion.</p>
<h3 id="451-the-link-state-ls-routing-algorithm">4.5.1 The Link-State (LS) Routing Algorithm</h3>
<p>All link costs are known. In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, each packet containing the identities and costs of its attached links resulting in <strong>all nodes having an identical and complete view of the network</strong> (each node could run the algorithm).
A link-state algorithm can be <em><strong>Dijkstra&rsquo;s algorithm</strong></em> or <em><strong>Prim&rsquo;s algorithm</strong></em>.
Code and example page 394</p>
<h3 id="452-the-distance-vector-dv-routing-algorithm">4.5.2 The Distance-Vector (DV) Routing Algorithm</h3>
<p>The <strong>distance-vector</strong> algorithm is <strong>iterative</strong>, <strong>asynchronous</strong> and <strong>distributed</strong>.</p>
<ul>
<li><em>Distributed</em> because each node receives some information from one or more of its directly attached neighbors, performs a calculation and then distributes the results back to its neighbors.</li>
<li><em>iterative</em>: the process continues on until no more information is exchanged between neighbors (self terminating)</li>
<li><em>asynchronous</em>: the nodes are not required to operate in lockstep with each other</li>
</ul>
<p>The least cost between x and y d(x,y) can be determined using the <em><strong>Bellman-Ford</strong></em> equation :</p>
<p>d(x,y) = min_v {c(x,y) + d(v,y)}</p>
<p>&hellip; to be continued</p>
<h3 id="453-hierarchical-routing">4.5.3 Hierarchical Routing</h3>
<p>In practice it is not possible to have a network of interconnected routers running the same routing algorithm because of two reasons:</p>
<ul>
<li><em>Scale</em> if the number of routers is large, running LS or DV algorithms for the whole network becomes prohibitive for memory, processing, storing and timing costs.</li>
<li><em>Administrative autonomoy</em> an organization should be able to organize its network as it wishes, while still being able to connect its network to the outside world.</li>
</ul>
<p>Therefore routers are organized into <strong>autonomous systems (ASs)</strong>, each of which being under the same administrative control. Routers in the same AS run the same routing algorithm and have information about each other. The routing algorithm running <em>within</em> an AS is called an <strong>intra-autonomous system routing protocol</strong>. In an AS, one or more routers will have the task of being responsible for forwarding packets outside the AS, these routers are called <strong>gateway routers</strong>.
To obtain reachability information from neighboring ASs and propagating the reachability information to all routers interal to its AS, gateway routers use <strong>inter-AS routing protocols</strong>. Two communicating ASs must run the same inter-AS routing protocol.</p>
<p>When a router needs to forward a packet outside its AS and there are multiple gateway routers, the router has to make a choice. One often employed practice is to use <strong>hot-potato routing</strong>: the AS gets rid of the packet as quickly as possible (as inexpensively as possible), the router sends the packet to the gateway router that has the smallest router-to-gateway cost among all gateways with a path to the destination.
An AS can decide what (internal) destinations to advertise to neighboring ASs: this a <em>policy</em> decision.</p>
<h2 id="46-routing-in-the-internet">4.6 Routing in the Internet</h2>
<h3 id="461-intra-as-routing-in-the-internet-rip">4.6.1 Intra-AS Routing in the Internet: RIP</h3>
<p>Intra-AS routing protocols are also known as <strong>interior gateway protocols</strong>. Historically two of these have been used extensively in the Internet: <strong>Routing Information Protocol (RIP)</strong> and <strong>Open Shortest Path First (OSPF)</strong>.</p>
<p>RIP was started for the Xerox Network Systems (XNS) architecture and was was widely deployed after being included in BSD. It is a <strong>distance-vector</strong> protocol working very similarly to what studied before. RIP uses <em>hop count</em> as a cost metric (each link has cost 1). Costs are from source router a destination subnet (not router-to-router as previously seen).
<strong>hop</strong> = number of subnets traversed along the shortest path from source to destination subnet, including the destination subnet.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-riphop.png" alt="riphop"  />
</p>
<p>Routing updates [messages] are exchanged between neighbors approximately every 30 seconds using a <strong>RIP response message</strong>, which contains a list of up to 25 destination subnets within the AS as well as the sender&rsquo;s distance to each of those subnets. Response messages are also known as <strong>RIP advertisements</strong>.
Each router maintains a RIP table known as a <strong>routing table</strong> which includes both the router&rsquo;s distance vector and the router&rsquo;s forwarding table. There are three columns in it: the destination subnet, the identity of next router along shortest path to reach destination and the number of hops to get to the destination along the shortest path.</p>
<p>If a router doesn&rsquo;t hear from its neighbor for at least once every 180 seconds, that neighbor is considered to be no longer reachable (died or link down).
Routers can also request information about its neighbor&rsquo;s cost to a given destination using RIP&rsquo;s request messages, which are transmitted over UDP using port 520.
RIP is implemented in software but has access to the routing tables through the UNIX kernel.</p>
<h3 id="462-intra-as-routing-in-the-internet-ospf">4.6.2 Intra-AS Routing in the Internet: OSPF</h3>
<p>OSPF and the related IS-IS are typically deployed in upper-tier ISPs whereas RIP is deployed in lower-tier ISPs and enterprise networks. Open indicates that the routing protocol speficication is publicly available.
It was conceived as the successor to RIP. It is however a <strong>link state protocol</strong> that uses <strong>flooding of link-state information</strong> and a <strong>Dijkstra least-cost path algorithm</strong>: routers construct a complete topological map (graph) of the AS, then run Dijkstra&rsquo;s algorithm to determine a shortest-path tree to <em>all subnets</em> with itself as the root node. Link costs are individually configured by the networks administrator who might choose to set all the link costs to 1, thus achieving minimum hop routuing or might choose to set the link weights to be <em>inversely proportional to link capacity</em> in order to discourage traffic from using low-bandwidth links.
A router broadcasts routing information to <em><strong>all other routers</strong></em> in the AS, not just the neighbors. The broadcast happens whenever there is a change in a link&rsquo;s state or every 30 minutes if the link&rsquo;s state doesn&rsquo;t change. OSPF advertisements are contained in <strong>OSPF messages</strong>  that are carried by IP with an upper-lyerprotocol of 89 for OSPF, therefore OSPF must implement reliable message transfer and link-state broadcast; OSP also checks that links are operational using HELLO messages to attached neighbors. OSPF offers some services:</p>
<ul>
<li><em>security</em>: OSPF messages can be authenticated (not active by default).</li>
<li><em>multiple same-cost paths</em>: two paths having same cost can be used at the same time.</li>
<li><em>integrated support for unicast and multicast routing</em></li>
<li><em>support for hierarchy within a single routing domain</em>: ability to structure an autonomous system hierarchically. A OSPF AS can be configured hierarchically into areas, each running its own OSPF algorithm, with each router broadcasting its link state to all other routers in that area. <strong>Area border routers</strong> are responsible for routing packets outside the area and one area is configured to be the <strong>backbone area</strong>, which routes traffic between other areas in the AS, it contains area border routers but also normal routers.</li>
</ul>
<h3 id="463-inter-as-routing-bgp">4.6.3 Inter-AS Routing: BGP</h3>
<p>The <strong>Border Gateway Protocol (BGP)</strong> is the de facto standard inter-AS routing protocol in today&rsquo;s Internet. It provides each AS means to:</p>
<ul>
<li>obtain reachability information from neighboring ASs</li>
<li>propagate reachability information to all internal routers</li>
<li>determine good routes to subnets using reachability information and AS policy.</li>
<li>it allows <strong>each subnet to advertise its existence to the rest of the Internet</strong></li>
</ul>
<h4 id="basics">Basics</h4>
<p>It is a very complex algorithm. Routers exchange information over semipermanent TCP connections using port 179. There is typically one such BGP TCP connection for each link directly connecting two routers in two different ASs but there are also semipermanent TCP connections between routers in the same AS. For each connection, the two routers at the end of it are called <strong>BGP peers</strong> and the connection is called a <strong>BGP session</strong>. A session spanning two ASs is an <strong>external BGP (eBGP) session</strong> and BGP sessions between routers within an AS is called an <strong>internal BGP (iBGP) session</strong>. Destinations are not hosts, but CIDRized <strong>prefixes</strong>, each representing a subnet or collection of subnets.</p>
<h4 id="path-attributes-and-bgp-routes">Path Attributes and BGP Routes</h4>
<p>In BGP an AS is identified by its <strong>globally unique AS number (ASN)</strong> which is assigned by ICANN regional registries. When a router advertises a prefix across a BGP session, it includes with the prefix a number of <strong>BGP attributes</strong>, a prefix with its attributes is called a <strong>route</strong>. Two other important attributes are:</p>
<ul>
<li><em>AS-PATH</em>: contains the ASs through which the advertisement for the prefix has passed. When a prefix is passed into an AS, the AS adds its ASN to the AS-PATH.
This attribute is used to detect and prevent looping advertisements (if router sees that its AS is already in AS-PATH, it rejects the ad) and to choose among multiple paths to the same prefix.
-<em>NEXT-HOP</em>: <strong>the router interface that begins the AS-PATH</strong>.</li>
</ul>
<p>BGP also includes attributes allowing routers to assign preferences metrics to the routes and indicating how to prefix was inserted into BGP at the origins.
When a router receives a route advertisement, it uses its <strong>import policy</strong> to decide whether to accept or filter the route and whether to set certain attributes such as the router preference metrics.</p>
<h4 id="bgp-route-selection">BGP Route Selection</h4>
<p>The input of the selection is the set of all routes that have been learned and accepted by the router. If two or more routes exist for the same prefix, elimination rules are applied until only one remains.</p>
<h1 id="chapter-8-security-in-computer-networks">Chapter 8: Security in Computer Networks</h1>
<h2 id="81-what-is-network-security">8.1 What is Network Security?</h2>
<p>Desirable properties of <strong>secure communication</strong>:</p>
<ul>
<li><em>Confindentiality</em>: only sender and receiver should be able to understand the contents of the transmitted message -&gt; encryption</li>
<li><em>Message integrity</em>: make sure the content of the communication is not altered -&gt; checksum</li>
<li><em>End-point authentication</em>: sender and receiver should be able to confirm the identity of the other party involved in the communication.</li>
<li><em>Operation security</em>: ability to counter attacks to internal networks -&gt; firewalls, IPS, IDS</li>
</ul>
<p>Possible attacks:</p>
<ul>
<li><em>eavesdropping</em>: sniffing and recording messages flowing in a channel</li>
<li><em>modification, inserion, deletion</em> of messages or message content</li>
</ul>
<p>These two allow to mount many other types of attacks</p>
<h2 id="82-principle-of-cryptography">8.2 Principle of Cryptography</h2>
<p>See Information Science, BA2
ADDITION:</p>
<h4 id="block-ciphers">Block Ciphers</h4>
<p>Today there are two broad classes of symmetric encryption techniques: <strong>stream ciphers</strong> and <strong>block ciphers</strong>(used for PGP, SSL, IPssec)
In a block cipher, the message to be encrypted is processed into blocks of <em>k</em> bis and each block is encrypted independently. To encode a bloc, the cipher uses a <em>on-to-one</em> mapping to map the <em>k</em>-bit block of cleartext to a <em>k</em>-bit block of ciphertext. To avoid bruteforce attacks, cipher blocks usually employ large blocks (<em>k</em>=64) but longer blocks implies longer tables to store the mappings.
Block ciphers typically use functions that simulate randomly permuted tables. EX
64 bit input split into 8 8-bit chunks, each of which is processed by a 8-bit to 8-bit table, each chunk having its table. The encrypted chunks are reassembled into a 64 bits message which is fed again to the input. After <em>n</em> such cycles, the function provides a 64-bit block of ciphertext. The key for this block would be the eight permutation tables, assuming that the scramble function is publicly known. Popular block ciphers: DES (Data Encryption Standard), 3DES, AES (Advanced Encryption Standard). These use functions instead of predetermined tables. Each of them uses a string of bits for a key (64-bit blocks with 56-bit key in DES, 128-bits blocks and 128/192/256 bits-long keys)</p>
<h5 id="cipher-block-chaining">Cipher-Block Chaining</h5>
<p>We need to avoid long messages avoiding that two or more identical ciphertexts (produced for identical cleartexts by a symmetric encryption).
(I DON&rsquo;T FINISH THIS PART, IT GOES TOO DEEP INTO ENCRYPTION TECHNIQUES WHICH IS NOT WHAT WE ARE INTERESTED IN)</p>
<h2 id="83-message-integrity-and-digital-signatures">8.3 Message Integrity and Digital Signatures</h2>
<p>We want to provide <strong>message integrity</strong> (aka message authentication). Message integrity is verified when:</p>
<ul>
<li>The message received indeed originated from the sender</li>
<li>The message was not tampered with on its way to the receiver</li>
</ul>
<h3 id="831-cryptographic-hash-functions">8.3.1 Cryptographic Hash Functions</h3>
<p>A <strong>hash function</strong> takes an input <em>m</em> and computes a fixed length size string <em>H(m)</em> known as a hash. A <strong>cryptographic hash function</strong> is required to have an additional property:</p>
<p><strong>it is computationally infeasible to find any two different messages <em>x</em> and <em>y</em> such that H(x) = H(y)</strong>
Some used cryptographic hashing functions are md5, SHA&hellip;</p>
<h3 id="832-message-authentication-code">8.3.2 Message Authentication Code</h3>
<p>To perform message integrity we also need a shared secret <em>s</em>, called the <strong>authentication key</strong>. The procedure is then:</p>
<ol>
<li>Alice creates message <em>m</em>, concatenates <em>m+s</em> and computes the hash <em>H(m+s)</em> to create the <strong>message authentication code (MAC)</strong></li>
<li>Alice <strong>appends the MAC to the message</strong> <em>m</em> creating <em>(m+H(m+s))</em></li>
<li>Bob receives the message and knowing the hash function and the secret, computes the hash. He creates <em>H(m+s)</em> and compares it with what he received.</li>
</ol>
<p>MAC is nice because <em>it doesn&rsquo;t require any encryption algorithm</em>
The most popular standard of mac today is <strong>HMAC</strong> which can be used with either MD5 or SHA-1. The problem then is: how to distribute the secret?
Physically?</p>
<h3 id="833-digital-signatures">8.3.3 Digital Signatures</h3>
<p>A <strong>digital signature</strong> is a cryptographic technique to indicate the owner or creator of a document or to signify one&rsquo;s agreement with a document&rsquo;s content.
Just as with handwritten signatures, digital signatures should be created in a way that they are <strong>verifiable</strong> (prove that the the author of a signature is indeed the author) and nonforgeable** (prove that only that individual could have signed the document).
We can use the public and private keys we already created for asymmetric confidentiality.
To sign a message <em>m</em> Bob can encrypt the message with the <strong>private key</strong> (only the matching public key will be able to decrypt).
However encryption and decryption and computationally expensive therefore:</p>
<ol>
<li>Bob computes the hash of the message</li>
<li>Bob uses his private key to encrypt the hash</li>
<li>Bob contants the encrypted hash and the message</li>
<li>Alice can decrypt, find the hash, compute a hash herself check for identity</li>
</ol>
<p>We saw that both digital signatures and MACs involve using a hash function but digital signatures, requiring encryption, need heavier operations and also need a <em>Public Key infrastructure</em> (PKI) with certification authorities.</p>
<h4 id="public-key-certification">Public Key Certification</h4>
<p>An important application of digital signatures is <strong>public key certification</strong>, that is, <strong>certifying that a public key belongs to a specific entity</strong>. It is used in IPsec and SSL.
A <strong>Certification Authority</strong> binds a public key to a particular entity. It has the follow roles:</p>
<ol>
<li>A CA verifies that an entity (person, router, &hellip;) is who it says it is. The method depends on the authority</li>
<li>The CA creates a <strong>cerificate</strong> that binds the public key of the entity to the identity. The certificate contains the public key and globally unique identifying information about the owner of the public key. The <strong>certificate is digitally signed by the CA</strong></li>
</ol>
<h2 id="84-end-point-authentication">8.4 End-Point Authentication</h2>
<p><strong>End-point authentication</strong> is the process of one entity proving its identity to another entity over a computer network.
Authentication must be done solely on the basis of messages and data exchanged as part of an <strong>authentication protocol</strong>. Typically this would run before the two communicating parties run some other protocol.</p>
<p>We can analyze authentication developing a simple algorithm step by step:</p>
<h4 id="version-10">Version 1.0</h4>
<p>Alice simply sends a message to Bob saying &ldquo;I&rsquo;m Alice&rdquo;</p>
<h4 id="version-20">Version 2.0</h4>
<p>Alice and Bob always communicate using the same addresses. Bob can simply check that the message has the source IP of Alice. However is fairly easy to spoof an IP address: crafting a special datagram is feasible using a custom kernel e.g Linux.</p>
<h4 id="version-30">Version 3.0</h4>
<p>Alice and Bob could share a secret password, a secrete between the authenticator and the person being authenticated.
Alice: I&rsquo;m Alice, Password.
However password can be eavesdropped, sniffed (read and stored).</p>
<h4 id="version-31">Version 3.1</h4>
<p>We could encrypt the password using a shared symmetric cryptographic key.
However this protocol is subject to <strong>playback attacks</strong> an eavesdropper could sniff the encrypted secret and, without having to decrypt, could send it to impersonate Alice.</p>
<h4 id="version-40">Version 4.0</h4>
<p>To avoid playback attacks we could use the same principle behind TCP&rsquo;s three way handshake. A <strong>nonce</strong> is a number that a protocol will use only once in a lifetime.
The procedure is then:</p>
<ol>
<li>Alice sends: <code>I am Alice</code></li>
<li>bob chooses a nonce and sends it to Alice</li>
<li>Alice encrypts it using Alice and Bob&rsquo;s symmetric secret key and sends the encrypted nonce.</li>
<li>Bob decrypts the received nonce and checks for equality with the one he generated.</li>
</ol>
<h2 id="85-securing-e-mail">8.5 Securing e-mail</h2>
<p>Security functionalities are provided by many layers of the network stack. Why? There is a need for security at higher layers as well as blanket coverage at lower layers and it easier to provide security at higher layers.</p>
<h3 id="851-secure-e-mail">8.5.1 Secure E-Mail</h3>
<p>What features do we want? <em>Confindentiality, Sender authentication, Receiver authentication</em>.</p>
<ul>
<li>Confidentiality: to overcome the problem of sharing a symmetric secret, Alice and Bob use asymmetric cryptography. Bob makes his public key publicly available (key server or web page) and Alice encrypts her message with Bob&rsquo;s public key. Bob can decrypt using his private key. However asymmetric crypto is quite inefficient. A <em>session key</em> can be used: Alice selects a <strong>random symmetric key</strong>. She uses it to encrypt the message. She the encrypts this key using Bob&rsquo;s public key and concatenates the symmetricly encrypted message and the asymmetricly encrypted key.</li>
<li>Sender authentication and message integrity: we suppose that Alice and Bob don&rsquo;t care for confidentiality. They will use <strong>digital signatures</strong> and <strong>message digests</strong>.
Alice applies a hash function <em>H</em> to her message <em>m</em>, obtain a message digest, signs the digest with her private key to create a digital signature, concatenates the original message with the signature to create a package and sends the package to Bob&rsquo;s e-mail address.
Bob uses Alice&rsquo;s public key to the digest and compares the result fo this operation with his own hash <em>H</em> of the message.</li>
<li>Confidentiality, sender authentication and message integrity: the two procedures above can be combined, message and digest are concatenated and the treated as a new message which is encrypted using the first technique.</li>
</ul>
<p>These techniques suppose however that Alice and Bob are able to exchange their public keys. An intruder could in fact send a public key to Bob pretending to be Alice. <em>Certification is needed</em>.</p>
<h4 id="phil-zimmermann-and-pgp">Phil Zimmermann and PGP</h4>
<p>PZ was the creator of PGP. For that he was legally attacked by the US Government, he distributed PGP while it should have stayed a secret weapon in the heads of the defense. The US dropped the case and PGP became the most widely used e-mail encryption software in the world despite the lack of funding, paid staff.</p>
<h3 id="852-pgp">8.5.2 PGP</h3>
<p>Pretty Good Privacy (PGP) is an e-mail encryption scheme that has become the De Facto standard.
It uses the same design shown above, giving the option of signing, encrypting or both.
When PGP is installed, it creates a public key pair for the user, the public key can be posted online while the private key is protected by a password which has to be entered every time the user accesses the private key.
A PGP message appears after the <strong>MIME</strong> header.
PGP also provides a mechanism for public key certification. PGP public keys are certified by <em><strong>Web of Trust</strong></em>: Alice can certify any key/username pair when she believes the pair really belong together and, in addition, PGP permits Alice to say that she trusts another user to vouch for the authenticity of more keys. Some PGP users sign each other&rsquo;s key by holding <em>key-signing parties</em>.</p>
<h2 id="86-securing-tcp-connections-ssl">8.6 Securing TCP Connections: SSL</h2>
<p>We now move to the transport layer. The enhanced version of TCP is called <strong>Secure Socket Layer (SSL)</strong>, a slightly modified version of SSL v3 called <strong>Transport Layer Security (TLS)</strong> has been standardized by the IETF.
Originally developed by Netscape, SSL has enjoyed broad deployment since its origins, providing secure communication between all recent browsers and online services. <strong>SSL provides TCP with confidentiality, data integrity, server authentication and client authentication</strong>.
SSL is often used over HTTP, however, as it secures TCP, it can be employed by any application that runs over TCP. SSL provides a simple <em>Application Programming Interface</em> with sockets, similar to TCP&rsquo;s API.
When an application wants to use SSL, it must include SSL classes/libraries. <strong>Technically SSL resides in the application layer</strong> but from the developer&rsquo;s perspective it is a transport layer protocol that provides TCP&rsquo;s services enhanced with security services.</p>
<h3 id="861-the-big-picture-primitive-almost-ssl">8.6.1 The Big Picture (primitive almost-SSL)</h3>
<p>Three phases:</p>
<ol>
<li><strong>Handshake</strong>: Bob initiates a TCP connection is established (TCP SYN, SYNACK, ACK). Bob sends <em>SSL Hello</em>, Alice responds with her certificate containing her public key (the certificate being certified by a CA, Bob is sure that the key belongs to Alice). Bob generates a <em><strong>master secrect (MS)</strong></em>, encrypts it with Alice&rsquo;s public key to create the <em><strong>Encrypted Master Secret (EMS)</strong></em> and sends it to Alice who will decrypt it with her private key to get the MS which can be used for confidentiality and integrity as seen before.</li>
<li><strong>Key Derivation</strong> instead of using the MS for integrity and confidentiality, it is safer to use different keys for different functions. Therefore <em>both</em> Alice and Bob <strong>use the MS to generate</strong>:
<ul>
<li>Eb = session encryption key for data Bob -&gt; Alice</li>
<li>Mb = session MAC key for data Bob -&gt; Alice</li>
<li>Ea = session encryption key for data Alice -&gt; Bob</li>
<li>Ma = session MAC key for data Alice -&gt; Bob
The MS could simply be split in four chunks, but real SSL does it differently.</li>
</ul>
</li>
<li><strong>Data Transfer</strong> TCP is a byte-stream protocol, so where would we put the MAC for the integrity check? SSL breaks the data stream into <strong>records</strong>, appends a MAC to each record and then encrypts record+MAC. However, in a MITM attack, the order of packets could be reversed as TCP sequence numbers are not encrypted. SSL therefore uses sequence numbers. Bob keeps a sequence number counter which begins at zero and is incremented at each record transmission. He includesthe sequence number in the MAC calculation: MAC = hash(data+Mb+SeqNum). Alice tracks Bob&rsquo;s sequence numbers so that she can verify the MAC.</li>
</ol>
<h4 id="ssl-record">SSL Record</h4>
<p>The real SSL record:</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-sslrecord.png" alt="ssl record"  />
</p>
<ul>
<li>Type: handshake message, data message, connection teardown message</li>
<li>Length: used to extract the records out of the TCP byte stream</li>
</ul>
<h3 id="862-a-more-complete-picture">8.6.2 A More Complete Picture</h3>
<p>SSL allows Alice and Bob to agree on the cryptographic algorithms at the beginning of the SSL session, during handshake. Steps:</p>
<ol>
<li>The client sends a list of cryptographic algorithms it supports, along with a client nonce</li>
<li>The server chooses a symmetric algorithm (ex: AES), a public key algorithm (ex RSA) and a MAC algorithm. It sends back to the client its choices as well as a certificate and a server nonce.</li>
<li>The client verifies the certificate, extracts the server&rsquo;s public key, generates a <em>Pre-Master Secret</em> (PMS), encrypts it with the server&rsquo;s public key and sends the encrypted PMS to server.</li>
<li>Using the same key derivation function (specified by SSL standard), <em>client and server independently compute the Master Secret (MS) from the PMS and the nonces</em>. The MS is sliced up to create the two encryption and the two MAC keys. Furthemore when the symmetric cipher employs CBC (ex 3DES or AES) the two Initialization Vectors (IVs), one for each side of the connection, are also obtained from hte MS. Henceforth <strong>all messages sent between client and server are encrypted and authenticated (using MAC)</strong></li>
<li>The client sends a MAC of all the handshake messages</li>
<li>The server sends a MAC of the handshake messages.</li>
</ol>
<p>5 and 6 protect the handshake from tampering: if in the end MAC are not coherent with the previously sent messages, the connection is stopped. (prevents an attacker from impersonating the server and imposing weak algorithms).
Nonces are used to avoid <em>connection replay attacks</em> (resending packets sniffed during a previous connection again, using nonces allows to have different MACs and therefore messages at each connection, even if the content of the communication is the same).</p>
<h4 id="connection-closure">Connection Closure</h4>
<p>TCP FIN segments can be crafted by an attacker (<em>truncation attack</em>), therefore they cannot be used.
The type field of SSL records is used for these purpose, even if it sent in the clear, it is authenticated at the receivers using record&rsquo;s MAC.</p>
<h2 id="87-network-layer-security-ipsec-and-virtual-private-networks">8.7 Network-Layer Security: IPsec and Virtual Private Networks</h2>
<p>The IP security protocol is called <strong>IPsec</strong>, it secures IP datagrams between any two network-layer entities (host, routers)</p>
<h3 id="871-ipsec-and-virtual-private-networks-vpns">8.7.1 IPsec and Virtual Private Networks (VPNs)</h3>
<p>An institution extending overt multiple geographical regions might want its own IP network so that the machines in it can communicate securely. Such a disjoint network is a <strong>private network</strong>. A physical private network can be expensive. VPN can be used to deploy and maintain a private network over the existing public Internet. The traffic is sent over the Internet but encrypted before entering the public net.
Not all traffic sent into the Internet by the gateway routers or laptops will be IPsec secured (only the portion accessing internal resources)</p>
<h3 id="872-the-ah-and-esp-protocols">8.7.2 The AH and ESP Protocols</h3>
<p>In the IPsec protocol suite, there are two principal protocols: the <strong>Authentication Header (AH)</strong> protocol and the <strong>Encapsulation Security Payload (ESP)</strong> protocol.
When a source IPsec entity (router or host) sends secure datagrams to a destination entity it does so with either ESP or AH. AH provides <em>source authentication</em> and <em>data integrity</em> while ESP provides <em>source authentication, data integrity and confidentiality</em>. Because the latter is often critical for VPNs, ESP is much more widely used AH. We will only study ESP.</p>
<h3 id="873-security-associations">8.7.3 Security Associations</h3>
<p>Before sending IPsec datagrams from source entity to destination entity, source and destination create a network-layer logical connection called <strong>security association (SA)</strong>. SA is a simplex (unidirectional from source to destination) logical connection. If both entities want to send datagrams to each other, then two SAs need to be established, one in each direction.
The VPN server (headquarters gateway router) will maintain state information about the SA, which will include:</p>
<ul>
<li>32-bit identifier for the SA, called <em>Security Parameter Index (SPI)</em></li>
<li>The origin interface (client outside) of the SA and its destination (its out facing interface) [IP addresses]</li>
<li>Type of the encryption used</li>
<li>Encryption key</li>
<li>Type of the integrity check</li>
<li>Authentication key</li>
</ul>
<p>An IPsec entity often maintains state information for many SAs (all outside clients) using its <em>Security Association Database</em> (SAD) which is a data structure in the entity&rsquo;s OS kernel.</p>
<h3 id="874-the-ipsec-datagram">8.7.4 The IPsec Datagram</h3>
<p>IPsec has two different packet forms, one for <strong>tunnel mode</strong> and one for <strong>transport mode</strong>, the first one, being more appropriate for VPNs, is more widely deployed than the transport mode, we will therefore only focus on it.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipsecdatagram.png" alt="ipsec datagram"  />
</p>
<p>The headquarters&rsquo;s gateway receives an IPv4 datagram from inside the network directed to a VPN client outside. Here is what happens:</p>
<ol>
<li>It appends to the back of the original datagram (which includes the original header fields) in the <em>ESP trailer</em> field</li>
<li>It encrypts the result using the algorithm and key specified in the SA</li>
<li>Appends to the front of the result a <em>ESP Header</em> creating the &ldquo;enchilada&rdquo;</li>
<li>Creates an authentication MAC over the whole enchilada using algorithm and key specified in the SA</li>
<li>Appends the MAC to the back of the enchilada forming the <em>payload</em></li>
<li>Creates a brand new IP header with all the classic IPv4 header fields which it appends before the payload.</li>
</ol>
<p>The protocol number field is set to 50, designating IPsec. The routers along the path will treat the datagram as a normal one, oblivious that it is an IPsec datagram.
To decide whether outgoing packets should be treated as above or simply let through, the gateway maintains a <em>Security Policy Database</em> (SPD) which indicates what types of datagrams (as a function of the source and destination IPs and of the protocol) are to be IPsec processed and, for those that are, which SA should be used.
<strong>IPsec provides confidentiality, source authentication, data integrity, replay-attack prevention.</strong></p>
<h3 id="875-ike-key-management-in-ipsec">8.7.5 IKE: Key Management in IPsec</h3>
<p>Who/What should populate the SAD? For small VPNs this can be done manually. For larger ones there is the <em><strong>Internet Key Exchange (IKE) protocol</strong></em>.
IKE is similar to the handshake in SSL. Here are the steps:</p>
<ul>
<li>During the first exchange of messages, the two sides use Diffie-Hellman to create a Bi-Directional IKE SA between the routers, which is entirely different form the IPsec SA discussed above. This IKESA provides an authenticated and encrypted channel between the two routers. Keys are established for encryption and authentication for IKESA. Also established is a master secret.</li>
<li>During the second exchange of messages, both sides reveal their identity to each other by signing their messages. However the identities are not revealed to an eventual sniffer, since the messages are sent over the IKE sa channel. The two sides also negotiate the IPsec encryption and authentication algorithms to be employed by the IPsec SA. Finally the two sides create an SA n each direction.</li>
</ul>
<p>We have two phases to reduce computational costs: we don&rsquo;t need asymmetric cryptography during second phase, allowing IKE to generate many SAs with relatively little computational cost.</p>
<h2 id="89-operational-security-firewalls-and-intrusion-detection-systems">8.9 Operational Security: Firewalls and Intrusion Detection Systems</h2>
<h3 id="891-firewalls">8.9.1 Firewalls</h3>
<p>A firewall is a combination of hardware and software that isolates an organization&rsquo;s internal network from the Internet at large, allowing some packets to pass and blocking others. It has three goals</p>
<ol>
<li><em>All traffic from outside to inside, and vice versa, passes through the firewall</em></li>
<li><em>Only authorized traffic, as defined by the local security by the local policy, will be allowed to pass</em>.</li>
<li><em>The firewall itself is immune to penetration</em></li>
</ol>
<p>Firewalls can be classified in three categories:</p>
<h4 id="1-traditional-packet-filters">1: Traditional Packet Filters</h4>
<p>Packet filters examine each datagram in isolation determining whether the datagram should be allowed to pass or should be dropped based on administrator-specific rules.
Filtering decisions can be based on IP source/destination, protocol type, TCP/UDP, TCP flags/ ICMP message type, rules for leaving/entering, rules for different router interfaces.
The parameters are based on the policy of the organization taking account of user productivity and bandwidth usage as well as security concerns.</p>
<h4 id="2-stateful-packet-filters">2: Stateful Packet Filters</h4>
<p>Decisions are made on each packet in isolation. Stateful filters track TCP connecions and use this knowledge to make filtering decisions.</p>
<h4 id="3-application-gateways">3: Application Gateways</h4>
<p>Application Gateways look beyond the IP/TCP/UDP headers and make policy decisions based on application data. An <strong>Application Gateway</strong> is an application-specific server through which all application data must pass. Multiple AG can run on the same host, but each gateway is a separate server with its own processes.</p>
<h3 id="892-intrusion-detection-systems">8.9.2 Intrusion Detection Systems</h3>
<p>An <strong>intrusion detection system (IDS)</strong> is a device that alerts when it observes potentially malicious traffic. An <strong>intrusion prevention system (IPS)</strong>  is a device that filters out suspicious traffic. Both types of device perform <strong>deep packet inspection</strong>: they look beyond the header fields and into the actual application data that the packets carry.</p>
<p>An IDS can detect a wide range of attacks, including network mapping, port scans, TCP stack scans, DoS, worms, viruses, OS vulnerability attacks and application vulnerability attacks.
An organization can deploy one more IDS sensors in its network. When many are used, they work together, usually coordinated by a central server. More than one is often a good solution as each one compare each passing packet with tens of thousands of signatures. They are usually classified as either <strong>signature-based systems</strong> or <strong>anomaly-based systems</strong>.
A signature based IDS maintains an extensive database of attack signature, each of which being a set of rules pertaining to an intrusion activity. A signature can be a list of packet characteristics or may relate to a series of packets. They are created by network security engineers researching attacks. The ids sniffs every packet passing by it, comparing it with signatures.
Signature based IDS, although widely deployed, have a number of limitations: they require a previous knowledge of the attack to generate an accurate signature, false alarms may be generated, they can be slow and fail to detect attacks if overwhelmed.
Anomaly-based packets study normal traffic and looks for statistically unusual events. They don&rsquo;t rely on previous knowledge of attacks.</p>
<h1 id="chapter-5-the-link-layer-links-access-networks-and-lans">Chapter 5: The Link Layer: Links, Access Networks and LANs</h1>
<h2 id="51-introduction-to-the-link-layer">5.1 Introduction to the Link Layer</h2>
<p>Some terminology:</p>
<ul>
<li><strong>node</strong> = any device running a link-layer protocol (hosts, routers, switches&hellip;)</li>
<li><strong>link</strong> = communication channels connecting adjacent nodes along the path.</li>
<li>Over a given link, a transmitting node encapsulates the datagram in a <strong>link-layer frame</strong> and transmits the frame into the link.</li>
</ul>
<h3 id="511-the-services-provided-by-the-link-layer">5.1.1 The Services Provided by The Link Layer</h3>
<p>Possible services offered by a link-layer protocol include:</p>
<ul>
<li><em>Framing</em>: all link layer protocols encapsulate each network layer datagram  within a link-layer frame before transmission. A frame consists of a data field, containing the datagram, and a number of header fields, whose structure is determined by the protocol.</li>
<li><em>Link access</em>: A <strong>Medium Access Control</strong> (MAC) protocol specifies the rules by which a frame is transmitted onto the link.</li>
<li><em>Reliable delivery</em>: the protocol guarantees to move each datagram across the link without loss or errors. A reliable delivery protocol is often used for links highly prone to errors (WiFi) so that the error can be corrected locally, where it happens, rather than forcing an end-to-end retransmission. However it can represent a significant overhead for low bit-error links (cable) and therefore many wired link-layer protocols do not provide a reliable delivery service.</li>
<li><em>Error detection and correction</em>: signal attenuation and electromagnetic noise can introduce errors. Because there is no need to forward a datagram that has an error, may link-layer protocols provide a mechanism to detect such bit errors so that they can drop the frames. This can be accomplished transmitting error-detection bits in the frame. Link layer error detection is usually more sophisticated and <em>implemented in hardware</em>.</li>
</ul>
<h3 id="512-where-is-the-link-layer-implemented">5.1.2 Where Is the Link Layer Implemented?</h3>
<p>In routers, the link layer is implemented in the line card. Is a host&rsquo;s link layer implemented in hardware or software?
For the most part, the link layer is implemented in a <strong>network adapter</strong>, sometimes known as <strong>network interface card (NIC)</strong>. At the heart of the NIC is the link-layer controller, usually a single, special purpose chip that implements many of the link-layer services. Thus, much of a link-layer controller&rsquo;s functionality is implemented in hardware.
Part of the link layer is implemented in software that runs on the host&rsquo;s CPU, this part implement higher-level functionalities.
Link-Layer is a combination of hardware and software, the place in the protocol stack where software meets hardware.</p>
<h2 id="52-error-detection-and--correction-techniques">5.2 Error-Detection and -Correction Techniques</h2>
<p>Error detection and correction allow the receiver to sometimes, <em>but not always</em>, detect that bit errors have occurred. Even with the use of error-detection bits, there still may be <strong>undetected bit errors</strong> (the receiver is unaware of the presence of corrupted bits).
We want to keep the probability of such an event small. Let&rsquo;s now consider three techniques for detecting errors in the transmitted data: parity checks, checksumming methods and cyclic redundancy checks</p>
<h3 id="521-parity-checks">5.2.1 Parity Checks</h3>
<p>Perhaps the simplest form of error detection is the use of a single <strong>parity bit</strong>. Suppose that the information to be sent, <em>D</em>, has <em>d</em> bits.
In an even parity scheme, the sender simply includes one additional bit and chooses its value such that the total number of 1s in the <em>d+1</em> bits (original + parity bit) is even. (odd parity scheme, parity bit to one if #1s % 2 != 0).
The receiver only needs to count the number of 1s in the <em>d+1</em> bits. If an odd number of 1 valued bits are found with an even parity scheme, the receiver knows that <em>some odd number</em> of bit error has occurred.
If an even number of bit errors occur, this would result in an undetected error.
Another approach is to use a <em><strong>two dimensional even parity</strong></em>: the <em>d</em> bits are divided into <em>i</em> rows and <em>j</em> columns. A parity value is computed for each row and for each column. The result <em>i + j + 1</em> parity bits comprise the error-detection bits.
A single bit error in the original <em>d</em> bits will cause the parity of both the column and the row containing the flipped bit to to be in error. The receiver can not only detect the error, but also use the column and row indices of the column and row with parity errors to actually identify the bit that was corrupted and <em>correct</em> the error.
This technique also allows to detect an error in the <em>parity bits</em>.
The ability of the receiver to both detect and correct errors is known as <strong>forward error correction (FEC)</strong></p>
<h3 id="522-checksumming-methods">5.2.2 Checksumming Methods</h3>
<p>The <em>d</em> bits of data are treated as a sequence of <em>k</em>-bit integers for example the Internet checksum already studied: bytes of data are treated as integers and summed, the 1s complement of this sum forms the Internet checksum carried in the header. The receiver checks the checksum by taking the 1s complement of the sum of the received data (including checksum) and checking whether the result is all 1 bits, if there are any 0, an error is indicated. In TCP and UDP the checksum is computed over all fields (header and data).
Checksumming methods require little packet overhead but they provide relatively weak protection against errors.
Why is checksumming used in transport layer and cyclic redundancy check used at the link layer?
Transport layer is implemented in software (OS) and therefore needs a simple and fast error detection scheme while error detection at link layer is implemented in hardware which can perform the more complex CRC operations.</p>
<h3 id="523-cyclic-redundancy-check-crc">5.2.3 Cyclic Redundancy Check (CRC)</h3>
<p><strong>Cyclic Redundancy Check (CRC) codes</strong> are also known as <strong>polynomial codes</strong> since it is possible to view the string to be sent as a polynomial whose coefficients are the 0 and 1 values in the bit string with operation interpreted as polynomial arithmetic.
Sender and receiver must agree on a <em>r+1</em> bit pattern know as <strong>generator</strong> which we&rsquo;ll denote as <em>G</em>. We require the leftmost bit of G to be a 1. For a given piece of data <em>D</em> the sender will choose <em>r</em> additional bits, <em>R</em>, and append them to <em>D</em> such that the resulting <em>d + r</em> bit pattern, interpreted as a binary number, is exactly divisible by G using modulo-2 arithmetic.
Checking is therefore easy: the receiver divides the <em>d + r</em> received by bits by <em>G</em>, if the remainder is nonzero, an error has occurred, otherwise the data is accepted as being correct.
All CRC calculations are done in modulo 2 without carries in addition or borrows in subtraction (+ = - = xor).</p>
<h2 id="53-multiple-access-links-and-protocols">5.3 Multiple Access Links and Protocols</h2>
<p>There are two types of network links: point-to-point and broadcast links. A <strong>point-to-point link</strong> consists of a single sender at one end of the link and a single receiver at the other end of the link. A <strong>broadcast link</strong> can have multiple sending and receiving nodes all connected to the same, single, shared broadcast channel. The term <em>broadcast</em> is used because when any node transmits a frame, the channel broadcasts the frame and each other node receives a copy (ex: ethernet, wireless).</p>
<p>The <strong>multiple access problem</strong>: How to coordinate the access of multiple sending and receiving nodes to a shared broadcast channel?
Computer networks have <strong>multiple access protocols</strong> by which nodes regulate their transmission into the shared broadcast channel.
More than two nodes can transmit frames at the same time, which will result in all of the nodes receiving multiple frames at the same time: the frames <strong>collide</strong> at all of the receivers. Typically in case of collision, <em>none of the receiving nodes can make any sense of any of the frames</em>, they become inextricably tangled together and are therefore <strong>lost</strong>, the channel being wasted during collision.
Thus it is necessary to coordinate the transmission of the active nodes.
We can classify multiple access protocols in three categories: <strong>channel partitioning protocols, random access protocols, taking-turns protocols</strong>.</p>
<h3 id="531-channel-partitioning-protocols">5.3.1 Channel Partitioning Protocols</h3>
<p>TDM and FDM (from circuit switching) are in this category.
A third channel partitioning tool is <strong>code division multiple access (CDMA)</strong> which assigns a different <em>code</em> to each node. Each node then uses its unique code to encode the data bits it sends. If the codes are chosen carefully, then all nodes can transmit simultaneously and yet have their respective receivers correctly receive a sender&rsquo;s encoded data bits. Originally used in military systems, it&rsquo;s now widely used for civilian use, particularly in cellular telephony.</p>
<h3 id="532-random-access-protocols">5.3.2 Random Access Protocols</h3>
<p>A transmitting node always transmits at the full rate of the channel, <em>R</em> bps. When there is a collision, each node involved in the collision repeatedly retransmits its frame until the frame gets through without a collision.
But when a node experiences a collision, <em>it waits a random dely before retransmitting the frame</em>. The delay is chosen independently.
Here a few of the most commonly used random access protocols:</p>
<h4 id="slotted-aloha">Slotted ALOHA</h4>
<p>All frames consist of <em>L</em> bits, time is divided into slots of size <em>L/R</em> seconds, nodes start to transmit frames only at the beginning of slots. Moreover nodes are synchronized so that each node when the slot begins. If two or more frames collide in a slot, then all the nodes detect the collision event before the slot ends.</p>
<p>If <em>p</em> is a probability then the operation of slotted ALOHA in each node is simple:</p>
<ul>
<li>each node waits the beginning of the next slot to transmit the entire frame in a slot</li>
<li>If no collision occurs, the frame is considered delivered</li>
<li>If collision, this is detect before the end of the slot. The node retransmits its frame <em>in each subsequent slot</em> with probability <em>p</em> (probability of retransmission) until the frame is transmitted  without a collision.</li>
</ul>
<p>Slotted ALOHA allows transmission at full rate <em>R</em>, is highly decentralized, and is extremely simple.
The computed maximal efficiency (successfully used slots in transmission / total slots) of Slotted ALOHA) is 37% thus the effective transmission rate is 0.37<em>R</em> bps.</p>
<h4 id="aloha">Aloha</h4>
<p>all nodes synchronize their transmissions to start at the beginning of a slot. The node immediately transmits a frame in its entirety in the channel. In case of collision, the node will then immediately retransmit the frame with probability <em>p</em> otherwise the node waits for a frame transmission time, after which it transmits the frame with probability <em>p</em> or wait for another frame with probability <em>1-p</em>. The maximum efficiency is 1/(2e) but the protocol is fully decentralized.</p>
<h4 id="carrier-sense-multiple-access-csma">Carrier Sense Multiple Access (CSMA)</h4>
<p>CSMA and CSMA/CD (collision detection) embody two rules:</p>
<ul>
<li><strong>carrier sensing</strong>: if a node is transmitting, the others wait until they detect no transmission for a short amount of time and begin transmission.</li>
<li><strong>collision detection</strong>: a transmitting node listens to the channel while it&rsquo;s transmitting, if it detects that another node is transmitting, it stops transmitting and waits for a random amount of time before repeating the sense-and-transmit-when-idle-cycle.</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-csmaDIA.png" alt="csmaDIA"  />
</p>
<p>It is evident that the <strong>propagation delay</strong> of the channel plays a crucial role: the longer, the larger the chance that a carrier sensing node is not yet able to sense a transmission that has already begun.</p>
<h4 id="carrier-sense-multiple-access-with-collision-detection-csmacd">Carrier Sense Multiple Access with Collision Detection (CSMA/CD)</h4>
<p>When a node detects a collision, it ceases transmission immediately in Collision Detection.
A link layer frame is prepared, if the node senses that the channel is idle (no energy is entering the adapter from the channel), it starts to transmit the frame, else it waits until it detects idle. While transmitting, the node monitors the channel for usage from other nodes, if the entire frame is transmitted without detecting usage, then the adapter is finished. If energy is detected from other adapters while transmitting, the node aborts transmission (stops), waits for  a random amount of time and then returns to checking for idle.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-csmacdDIA.png" alt="csmacdDIA"  />
</p>
<p>The wait for random amount of time is required in order to avoid the nodes to keep colliding.</p>
<h4 id="csmacd-efficiency">CSMA/CD Efficiency</h4>
<p>Is the long run fraction of time during which frames are being transmitted without collision. If the propagation delay approaches 0, the efficiency approaches 1.
Also if the propagation delay becomes very large, efficiency approaches 1.</p>
<h3 id="533-taking-turns-protocols">5.3.3 Taking-Turns Protocols</h3>
<p>There are a lot of them, we&rsquo;ll cover two of the more important, the first one being the <strong>polling protocol</strong>. It requires one of the nodes to be designated as a master node which <strong>polls</strong> each of the nodes in a round-robin fashion.
The master tells node 1 that it can transmit up to some maximum number of frames, when node 1 is finished (the master checks for energy in the channel) the master tells the same to node 2 and so on.
The polling protocol eliminates the collisions and empty slots that plague random access protocols, resulting in a much higher efficiency.
However it introduces a <em>polling delay</em> (the amount of time required to notify a node that it can transmit) [if only one is transmitting, it will have to wait for the master to poll all the others]. Moreover the master node represents a single point of failure.</p>
<p>The second protocol is the <strong>token-passing protocol</strong> in which there is no master method. A small, special purpose frame known as <strong>token</strong> is exchanged among the nodes in some fixed order. When a node receives a toke, it holds it only if it has some frames to transmit otherwise it immediately forwards it to the next node.If a node has frames to transmit when it receives the token, it sends up to a maximum number of frames and then passes the token. Token passing is decentralized and highly efficient but the failure of one node could crash the entire channel, or a node could neglect to release the token&hellip;.</p>
<h3 id="534-docsis-the-link-layer-protocol-for-cable-internet-access">5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access</h3>
<p>The Data-Over-Cable-Service-Interface-Specifications specifies the cable data network architecture and its protocols. DOCSIS uses FDM to divide the downstream and upstream network segments into multiple frequency channels. Each upstream and downstream channel is a broadcast channel. Several cable modems share the same upstream channel (frequency) to the CMTS and thus collision can potentially occur.
Each upstream channel is divided into intervals of time (TDM-like) each containing a sequence of mini-slots during which cable modems can transmit to the CMTS, which explicitly grants permission to individual modems to transmit during specific mini-slots. This is done sending a special control message known as a MAP message on a downstream channel to specify which cable modem can transmit during which mini-slot.
Modems send mini-slot-request frames to the CMTS during a special set of interval mini-slots dedicated for this purpose. The requests are transmitted in a random access manner and may collide with each other. The modem cannot detect activity nor collisions: it simply infers that its request experienced collision if it does not receive a response in the next downstream control message.
When a collision is inferred, a modem uses binary exponential backoff to defer the transmission to a future slot.</p>
<h2 id="54-switched-local-area-networks">5.4 Switched Local Area Networks</h2>
<p>Switched local networks connect hosts using link-layer switches which <strong>do not run networks-layer protocols</strong>.</p>
<h3 id="541-link-layer-addressing-and-arp">5.4.1 Link-Layer Addressing and ARP</h3>
<h4 id="mac-addresses">MAC Addresses</h4>
<p>Network interfaces in hosts and routers have link-layer addresses, however <em>link-layer switches do not have link-layer addresses associated with their interfaces</em> so that they can carry datagrams without having routers or hosts having to explicitly address the frame to the intervening switch.
A link-layer address is called <strong>LAN address</strong>, <strong>physical address</strong> or <strong>MAC address</strong>, the last name being the most popular. This address is <strong>6 bytes long</strong>, typically expressed in hexadecimal notation. They are supposed to be permanent but can be changed via software.
<strong>No two adapters have the same address</strong>: the IEEE manages the MAC address space, usually assigning a 24 prefix to each manufacturer and letting him choose the content of the remaining 24 bits.
MAC address have a flat structure (no hierarchy such as in IP) and do not change.
When an adapter wants to send a frame to some destination adapter, it inserts the destination adapter&rsquo;s MAC address into the frame and then sends the frame into the LAN. An adapter might receive a frame that isn&rsquo;t addressed to it, when this happens, the adapter checks whether the frame&rsquo;s destination address matches its own, if not it discards the frame. When a sending adapter want to broadcast to the whole network, it inserts a special <strong>MAC broadcast address</strong> into the destination address field, for 6bytes addresses that is FF-FF-FF-FF-FF-FF</p>
<h4 id="address-resolution-protocol-arp">Address Resolution Protocol (ARP)</h4>
<p>The <strong>Address Resolution Protocol (ARP)</strong> translates network-layer addresses into link-layer addresses, analogously to DNS, but ARP resolves IP addresses only for hosts and router interfaces on the same subnet.
Each host and router has an <strong>ARP table</strong> which contain mappings of IP addresses to MAC addresses and a time-to-live TTL value which indicates when each mapping will be deleted from the table. A typical TTL is 20 minutes from when an entry is placed in the ARP table.
The table does not necessarily contain an entry for every host and router on the subnet.
What if a frame has to be sent to an address which does not appear in the table?
The sender creates a special packet, an <strong>ARP packet</strong>, containing the sending and receiving IP and MAC addresses. Both ARP query and response have the same format: the sending forwards the ARP request to the broadcast address (destination address) the frame containing the query is received by all the other adapters in the subnet. Each adapter passes the frame to the ARP module which checks if its IP address matches the destination IP address in the query. The one with a match sends back the response with the desired mapping. The querying can update its table and send the IP datagram encapsulated in a link-layer frame.
ARP is plug and play: the table gets build automatically.
ARP stands in the boundary between the link and network layers.</p>
<h3 id="sending-a-datagram-off-the-subnet">Sending a Datagram off the Subnet</h3>
<p>A datagram that has to be sent out of the subnet is first sent to the first-hop router on the path to the final destination (which is outside the subnet). How is its MAC acquired? Using ARP.
When the frame reaches the next-hop router of the destination subnet, it has to be moved inside, the router having to decide what interface to use. This is done using the forwarding table: the router extracts the datagram and checks the destination IP. The datagram is encapsulated again and sent into the subnet, this time the MAC address of the frame is indeed the destination MAC address of the ultimate destination, which the router acquire via ARP.</p>
<h3 id="542-ethernet">5.4.2 Ethernet</h3>
<p>It has pretty much taken over the wired LAN market. Since its invention in the 70&rsquo;s, it has grown and become faster.
At the beginning the original Ethernet LAN used a coaxial bus to interconnect the nodes, creating a broadcast LAN. By the late 90s, most companies and universities had replaces their LANs with Ethernet installation using a hub-based star topology: hosts and routers are directly connected to a hub with twisted-pair copper wire. A <strong>hub</strong> is a physical layer device that acts on individual bits rather than frames. When a hub receives a bit, it simply recreates it boosting its energy strength and transmits the bit onto all the other interfaces (it&rsquo;s still a broadcast LAN). In the early 2000s, the star topology evolved: the hub was replaced with a <strong>switch</strong>, allowing a collision-less LAN.</p>
<h4 id="ethernet-frame-structure">Ethernet Frame Structure</h4>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ethernetframe.png" alt="ethernet frame"  />
</p>
<ul>
<li><em>Data fields</em> (46 to 1,500 bytes): carries the IP datagram (or other network-layer datagram). The MTU (maximum transmission unit) is 1500 bytes, compensated with fragmentation. The minimum is 46, is less, the data is &ldquo;stuffed&rdquo; and the receiving network layer uses the length field to eliminate the stuffing</li>
<li><em>Destination address</em> (6 bytes) destination MAC address.</li>
<li><em>Source address</em> (6 bytes)</li>
<li><em>Type field</em> (2 bytes) allows to multiplex network layer protocols (if not only IP is used, also ARP has its own type number 0x0806)</li>
<li><em>Cyclic redundant check (CRC)</em> (4 bytes): used for bit error detection</li>
<li><em>Preamble</em> (8 bytes): the first seven have value 10101010, the last has value 10101011. The first seven serve as &ldquo;wake up&rdquo; the receiving side and to <em>synchronize their clocks to that of the sender&rsquo;s clock</em> the two 1s at the end of byte 8 alerts the receiver that the important stuff is about to come.</li>
</ul>
<p>All of the Ethernet technologies provide <strong>connectionless service</strong>  (no handshaking, similar to UDP) and <strong>unrealiable service</strong> to the network layer (no ACK, drop in case of errors) which help to make Ethernet simple and cheap.
If there are gaps due to discarded Ethernet frames, the fact that the application sees the gaps or not depends on the transport layer protocol used: not with TCP (reliable data transfer), yes with UDP.</p>
<h4 id="ethernet-technologies">Ethernet Technologies</h4>
<p>There are many variants and flavors of Ethernet which have been standardized over the years by the IEEE. They vary in speed: 10 Megabit, 100 Megabit, 1000 Megabit, 10 Gigabit&hellip;
They can also vary in the type of traffic they can transport&hellip;.</p>
<h3 id="543-link-layer-switches">5.4.3 Link-Layer Switches</h3>
<p>Switch receive and forward frames. They are <strong>transparent</strong>: adapters address each other, without knowing that the switch is sitting in the middle. As they&rsquo;re output rate might be smaller than the input rate, they also have buffers to queue frames.</p>
<h3 id="forwarding-and-filtering">Forwarding and Filtering</h3>
<p><strong>Filtering</strong> is the switch function that determines whether a frame should be forwarded to some interface or should just be dropped.
<strong>Forwarding</strong> is the switch function that the determines the interfaces to which a frame should be directed and then moves the frame to those interfaces.
Switch filtering and forwarding are done with a <strong>switch table</strong> which contains entries for some (not necessarily all) of the hosts and routers on a LAN. Each entry contains:
<code>(MAC address, interface leading toward that MAC, time at which the entry was placed in the table)</code>
Switches forward frames based on the MAC addresses rather than on IP addresses.</p>
<p>When a switch receives a frame:</p>
<ul>
<li>There is no entry in the table associated with the destination address -&gt; the packet is broadcast through all the interfaces (except the one through which the frame was received)</li>
<li>There is an entry in the table that point to the same interface through which the frame was received -&gt; The frame is discarded (filtering)</li>
<li>There is an entry in the table that point to an interface different from the one through which the frame was received -&gt; the frame is put in the output buffer preceding the interface discovered thanks to the table (forwarding)</li>
</ul>
<h4 id="self-learning">Self-Learning</h4>
<p>The switch table is build <em><strong>automatically, dynamically and autonomously</strong></em> without any intervention from a network administrator: <strong>switches are self learning</strong>.</p>
<ol>
<li>The switch table is initially empty</li>
<li>For each incoming frame, the switch stores in its table
<ol>
<li>the MAC address in the frame&rsquo;s <em>source address field</em></li>
<li>the interface from which the frame arrived</li>
<li>the current time</li>
</ol>
</li>
<li>The switch deletes an address in the table if no frame are received with that address as the source after some period (<strong>aging time</strong>) so that to eliminate unused entries from the table</li>
</ol>
<p>Thus switches are <strong>plug-and-play devices</strong>: they require no human intervention. Switches are also full-duplex, meaning any interface can send and receive at the same time.</p>
<h4 id="properties-of-link-layer-switching">Properties of Link-Layer Switching</h4>
<p>Advantages over buses or hubs:</p>
<ul>
<li><em>Elimination of collisions</em>: the switch buffers frames and never transmit more than one frame on a segment at any one time. The maximum aggregated throughput is the sum of all the switch interface rates</li>
<li><em>Heterogeneous links</em>: The switch providing isolation, different links can operate at different speeds and run over different media. Therefore switches are ideal for mixing legacy equipment with new equipment.</li>
<li><em>Management</em>: A switch can disconnect a malfunctioning adapter and a cut cable isolates only one host. Switches can gather statistics useful for debugging and planning the evolution of the network.</li>
</ul>
<h4 id="switches-versus-routers">Switches Versus Routers</h4>
<p>They are both packet switches but switches are layer-2 packet switches while routers are layer-3 packet switches.
Switches are plug-and-play, have relatively high filtering and forwarding rates.
However to <strong>prevent the cycling of broadcast frames, the active topology of a swtiched network is restricted to a spanning tree</strong>. A large network requires large ARP tables in hosts and routers and would generate substantial ARP traffic and processing. Switches are also susceptible to broadcast storms: if one goes crazy and send an endless stream of broadcast frames, the others will forward all of the frames resulting in a network collapse.
Routers network addressing is hierarchical, packets do not normally cycle and the topology is not limited to a spanning tree even when the network has redundant paths. Therefore packets can use the best path between source and destination. But routers are not plug-and-play (a host need the IP to connect) and often have a larger per-packet processing time than switches. Finally two pronunciation cause a lot of disputes.</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-interconnectiondevices.png" alt="interconnectiondevices"  />
</p>
<h3 id="pdf-note">PDF Note👇</h3>
<object data="/assets/doc/computer_networking_notes_for_tech_placements.pdf" loading="lazy" type="application/pdf" width="100%" height="700px">
</object>
]]></content:encoded>
    </item>
    
    <item>
      <title>Curated List of Project Based Tutorials</title>
      <link>https://samirpaul1.github.io/blog/posts/curated-list-of-project-based-tutorials/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/curated-list-of-project-based-tutorials/</guid>
      <description>Curated List of Project Based Tutorials</description>
      <content:encoded><![CDATA[<h1 id="project-based-learning">Project Based Learning</h1>
<blockquote>
<p>A list of programming tutorials in which aspiring software developers learn how to build an application from scratch. These tutorials are divided into different primary programming languages. Tutorials may involve multiple technologies and languages.</p>
</blockquote>
<h2 id="table-of-contents">Table of Contents:</h2>
<ul>
<li><a href="#c">C#</a></li>
<li><a href="#cc">C/C++</a></li>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elixir">Elixir</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#f">F#</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html-and-css">HTML/CSS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#kotlin">Kotlin</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#ocaml">OCaml</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#additional-resources">Additional resources</a></li>
</ul>
<h2 id="cc">C/C++:</h2>
<ul>
<li><a href="http://www.craftinginterpreters.com/">Build an Interpreter</a> (Chapter 14 on is written in C)</li>
<li><a href="https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory">Memory Allocators 101 - Write a simple memory allocator</a></li>
<li><a href="https://brennan.io/2015/01/16/write-a-shell-in-c/">Write a Shell in C</a></li>
<li><a href="https://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/">Write a FUSE Filesystem</a></li>
<li><a href="http://viewsourcecode.org/snaptoken/kilo/">Build Your Own Text Editor</a></li>
<li><a href="http://www.buildyourownlisp.com/">Build Your Own Lisp</a></li>
<li><a href="https://nesdoug.com/">How to Program an NES Game in C</a></li>
<li><a href="https://github.com/tuhdo/os01">Write an OS from scratch</a></li>
<li><a href="https://github.com/cfenollosa/os-tutorial">How to create an OS from scratch </a></li>
<li><a href="https://austinmorlan.com/posts/chip8_emulator/">Building a CHIP-8 Emulator</a></li>
<li><a href="http://lazyfoo.net/tutorials/SDL/">Beginning Game Programming with C++ and SDL</a></li>
<li><a href="http://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/">Implementing a Key-Value Store</a></li>
<li>Tiny 3D graphics projects
<ul>
<li><a href="https://github.com/ssloy/tinyrenderer/wiki">Tiny Renderer or how OpenGL works: software rendering in 500 lines of code</a></li>
<li><a href="https://github.com/ssloy/tinyraytracer/wiki">Understandable RayTracing in 256 lines of bare C++</a></li>
<li><a href="https://github.com/ssloy/tinykaboom/wiki">KABOOM! in 180 lines of bare C++</a></li>
<li><a href="https://github.com/ssloy/tinyraycaster/wiki">486 lines of C++: old-school FPS in a weekend</a></li>
</ul>
</li>
<li>Writing a minimal x86-64 JIT compiler in C++
<ul>
<li><a href="https://solarianprogrammer.com/2018/01/10/writing-minimal-x86-64-jit-compiler-cpp/">Part 1</a></li>
<li><a href="https://solarianprogrammer.com/2018/01/12/writing-minimal-x86-64-jit-compiler-cpp-part-2/">Part 2</a></li>
</ul>
</li>
<li><a href="http://howistart.org/posts/cpp/1/index.html">Build a Live Code-reloader Library for C++</a></li>
<li><a href="https://github.com/jamesroutley/write-a-hash-table">Write a hash table in C</a></li>
<li><a href="https://cstack.github.io/db_tutorial/">Let&rsquo;s Build a Simple Database</a></li>
<li><a href="http://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel">Let&rsquo;s Write a Kernel</a></li>
<li><a href="http://3zanders.co.uk/2017/10/13/writing-a-bootloader/">Write a Bootloader in C</a></li>
<li><a href="https://blog.lizzie.io/linux-containers-in-500-loc.html">Linux Container in 500 Lines of Code</a></li>
<li><a href="https://justinmeiners.github.io/lc3-vm/">Write Your Own Virtual Machine</a></li>
<li><a href="https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html">Learning KVM - Implement Your Own Linux Kernel</a></li>
<li>Write a C compiler
<ul>
<li><a href="https://norasandler.com/2017/11/29/Write-a-Compiler.html">Part 1: Integers, Lexing and Code Generation</a></li>
<li><a href="https://norasandler.com/2017/12/05/Write-a-Compiler-2.html">Part 2: Unary Operators</a></li>
<li><a href="https://norasandler.com/2017/12/15/Write-a-Compiler-3.html">Part 3: Binary Operators</a></li>
<li><a href="https://norasandler.com/2017/12/28/Write-a-Compiler-4.html">Part 4: Even More Binary Operators</a></li>
<li><a href="https://norasandler.com/2018/01/08/Write-a-Compiler-5.html">Part 5: Local Variables</a></li>
<li><a href="https://norasandler.com/2018/02/25/Write-a-Compiler-6.html">Part 6: Conditionals</a></li>
<li><a href="https://norasandler.com/2018/03/14/Write-a-Compiler-7.html">Part 7: Compound Statements</a></li>
<li><a href="https://norasandler.com/2018/04/10/Write-a-Compiler-8.html">Part 8: Loops</a></li>
<li><a href="https://norasandler.com/2018/06/27/Write-a-Compiler-9.html">Part 9: Functions</a></li>
<li><a href="https://norasandler.com/2019/02/18/Write-a-Compiler-10.html">Part 10: Global Variables</a></li>
</ul>
</li>
<li><a href="https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm">Implementing a Language with LLVM</a></li>
<li><a href="https://jguegant.github.io//jguegant.github.io/blogs/tech/meta-crush-saga.html">Meta Crush Saga: a C++17 compile-time game</a></li>
<li><a href="https://gist.github.com/nadavrot/5b35d44e8ba3dd718e595e40184d03f0">High-Performance Matrix Multiplication</a></li>
<li>Space Invaders from Scratch
<ul>
<li><a href="http://nicktasios.nl/posts/space-invaders-from-scratch-part-1.html">Part 1</a></li>
<li><a href="http://nicktasios.nl/posts/space-invaders-from-scratch-part-2.html">Part 2</a></li>
<li><a href="http://nicktasios.nl/posts/space-invaders-from-scratch-part-3.html">Part 3</a></li>
<li><a href="http://nicktasios.nl/posts/space-invaders-from-scratch-part-4.html">Part 4</a></li>
<li><a href="http://nicktasios.nl/posts/space-invaders-from-scratch-part-5.html">Part 5</a></li>
</ul>
</li>
<li><a href="http://javilop.com/gamedev/tetris-tutorial-in-c-platform-independent-focused-in-game-logic-for-beginners/">Tetris Tutorial in C++ Platform Independent</a></li>
<li>Writing a Linux Debugger
<ul>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/">Part 1: Setup</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-breakpoints/">Part 2: Breakpoints</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-registers/">Part 3: Registers and memory</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-elf-dwarf/">Part 4: Elves and dwarves</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-source-signal/">Part 5: Source and signals</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-dwarf-step/">Part 6: Source-level stepping</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-source-break/">Part 7: Source-level breakpoints</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-unwinding/">Part 8: Stack unwinding</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-variables/">Part 9: Handling variables</a></li>
<li><a href="https://blog.tartanllama.xyz/writing-a-linux-debugger-advanced-topics/">Part 10: Advanced topics</a></li>
</ul>
</li>
<li>Let&rsquo;s write a compiler
<ul>
<li><a href="https://briancallahan.net/blog/20210814.html">Part 1: Introduction, selecting a language, and doing some planning</a></li>
<li><a href="https://briancallahan.net/blog/20210815.html">Part 2: A lexer</a></li>
<li><a href="https://briancallahan.net/blog/20210816.html">Part 3: A parser</a></li>
<li><a href="https://briancallahan.net/blog/20210817.html">Part 4: Testing</a></li>
<li><a href="https://briancallahan.net/blog/20210818.html">Part 5: A code generator</a></li>
<li><a href="https://briancallahan.net/blog/20210819.html">Part 6: Input and output</a></li>
<li><a href="https://briancallahan.net/blog/20210822.html">Part 7: Arrays</a></li>
<li><a href="https://briancallahan.net/blog/20210826.html">Part 8: Strings, forward references, and conclusion</a></li>
</ul>
</li>
</ul>
<h3 id="network-programming">Network programming</h3>
<ul>
<li>
<p>Let&rsquo;s Code a TCP/IP Stack</p>
<ul>
<li><a href="http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/">Part 1: Ethernet &amp; ARP</a></li>
<li><a href="http://www.saminiir.com/lets-code-tcp-ip-stack-2-ipv4-icmpv4/">Part 2: IPv4 &amp; ICMPv4</a></li>
<li><a href="http://www.saminiir.com/lets-code-tcp-ip-stack-3-tcp-handshake/">Part 3: TCP Basics &amp; Handshake</a></li>
<li><a href="http://www.saminiir.com/lets-code-tcp-ip-stack-4-tcp-data-flow-socket-api/">Part 4: TCP Data Flow &amp; Socket API</a></li>
<li><a href="http://www.saminiir.com/lets-code-tcp-ip-stack-5-tcp-retransmission/">Part 5: TCP Retransmission</a></li>
</ul>
</li>
<li>
<p>Programming concurrent servers</p>
<ul>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-1-introduction/">Part 1 - Introduction</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-2-threads/">Part 2 - Threads</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-3-event-driven/">Part 3 - Event-driven</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-4-libuv/">Part 4 - libuv</a></li>
<li><a href="https://eli.thegreenplace.net/2017/concurrent-servers-part-5-redis-case-study/">Part 5 - Redis case study</a></li>
<li><a href="https://eli.thegreenplace.net/2018/concurrent-servers-part-6-callbacks-promises-and-asyncawait/">Part 6 - Callbacks, Promises and async/await</a></li>
</ul>
</li>
<li>
<p>MQTT Broker from scratch</p>
<ul>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker">Part 1 - The protocol</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p2">Part 2 - Networking</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p3">Part 3 - Server</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p4">Part 4 - Data structures</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p5">Part 5 - Topic abstraction</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-p6">Part 6 - Handlers</a></li>
<li><a href="https://codepr.github.io/posts/sol-mqtt-broker-bonus">Bonus - Multithreading</a></li>
</ul>
</li>
</ul>
<h3 id="opengl">OpenGL:</h3>
<ul>
<li>Creating 2D Breakout game clone in C++ with OpenGL
<ul>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Breakout">Breakout</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Setting-up">Setting up</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Rendering-Sprites">Rendering Sprites</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Levels">Levels</a></li>
<li>Collisions
<ul>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Ball">Ball</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-detection">Collision detection</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-resolution">Collision resolution</a></li>
</ul>
</li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Particles">Particles</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Postprocessing">Postprocessing</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Powerups">Powerups</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Audio">Audio</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Render-text">Render text</a></li>
<li><a href="https://learnopengl.com/In-Practice/2D-Game/Final-thoughts">Final thoughts</a></li>
</ul>
</li>
<li><a href="https://handmadehero.org">Handmade Hero</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLMZ_9w2XRxiZq1vfw1lrpCMRDufe2MKV_">How to Make Minecraft in C++/OpenGL</a> (video)</li>
</ul>
<h2 id="c">C#:</h2>
<ul>
<li><a href="http://scottlilly.com/learn-c-by-building-a-simple-rpg-index/">Learn C# By Building a Simple RPG Game</a></li>
<li><a href="https://roguesharp.wordpress.com/">Create a Rogue-like game in C#</a></li>
<li><a href="https://www.intertech.com/Blog/xamarin-tutorial-part-1-create-a-blank-app/">Create a Blank App with C# and Xamarin (work in progress)</a></li>
<li><a href="https://www.raywenderlich.com/134049/building-ios-apps-with-xamarin-and-visual-studio">Build iOS Photo Library App with Xamarin and Visual Studio</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLVMqA0_8O85yC78I4Xj7z48ES48IQBa7p">Building the CoreWiki</a> This is a Wiki-style content management system that has been completely written in C# with ASP.NET Core and Razor Pages. You can find the source code <a href="https://github.com/csharpfritz/CoreWiki">here</a>.</li>
</ul>
<h2 id="clojure">Clojure:</h2>
<ul>
<li><a href="http://howistart.org/posts/clojure/1/index.html">Build a Twitter Bot with Clojure</a></li>
<li><a href="https://bernhardwenzel.com/articles/clojure-spellchecker/">Building a Spell-Checker</a></li>
<li><a href="https://hackernoon.com/building-a-jira-integration-with-clojure-atlassian-connect-506ebd112807">Building a JIRA integration with Clojure &amp; Atlassian Connect</a></li>
<li><a href="https://github.com/aliaksandr-s/prototyping-with-clojure">Prototyping with Clojure</a></li>
<li><a href="https://shaunlebron.github.io/t3tr0s-slides">Tetris in ClojureScript</a></li>
</ul>
<h2 id="dart">Dart:</h2>
<h3 id="flutter">Flutter:</h3>
<ul>
<li><a href="https://youtu.be/O3nmP-lZAdg">Amazon Clone with Admin Panel</a></li>
<li><a href="https://youtu.be/7dAt-JMSCVQ">Food Delivery App</a></li>
<li><a href="https://youtu.be/0_GJ1w_iG44">Google Docs Clone</a></li>
<li><a href="https://youtu.be/mEPm9w5QlJM">Instagram Clone</a></li>
<li><a href="https://youtu.be/Aut-wfXacXg">Multiplayer TicTacToe Game</a></li>
<li><a href="https://youtu.be/4E4V9F3cbp4">TikTok Clone</a></li>
<li><a href="https://youtu.be/71AsYo2q_0Y">Ticket Booking App</a></li>
<li><a href="https://youtu.be/x4DydJKVvQk">Travel App</a></li>
<li><a href="https://youtu.be/U9YKZrDX0CQ">Twitch Clone</a></li>
<li><a href="https://youtu.be/yqwfP2vXWJQ">WhatsApp Clone</a></li>
<li><a href="https://youtu.be/_W0RN_Cqhpg">Wordle Clone</a></li>
<li><a href="https://youtu.be/sMA1dKbv33Y">Zoom Clone</a></li>
</ul>
<h2 id="elixir">Elixir</h2>
<ul>
<li><a href="https://sheharyar.me/blog/simple-chat-phoenix-elixir/">Building a Simple Chat App With Elixir and Phoenix</a></li>
<li><a href="https://medium.com/free-code-camp/how-to-write-a-super-fast-link-shortener-with-elixir-phoenix-and-mnesia-70ffa1564b3c">How to write a super fast link shortener with Elixir, Phoenix, and Mnesia</a></li>
</ul>
<h2 id="erlang">Erlang</h2>
<ul>
<li><a href="https://medium.com/@kansi/chatbus-build-your-first-multi-user-chat-room-app-with-erlang-otp-b55f72064901">ChatBus : build your first multi-user chat room app with Erlang/OTP</a></li>
<li><a href="http://marianoguerra.org/posts/making-a-chat-app-with-erlang-rebar-cowboy-and-bullet.html">Making a Chat App with Erlang, Rebar, Cowboy and Bullet</a></li>
</ul>
<h2 id="f">F#:</h2>
<ul>
<li><a href="http://tomasp.net/blog/2018/write-your-own-excel">Write your own Excel in 100 lines of F#</a></li>
</ul>
<h2 id="java">Java:</h2>
<ul>
<li><a href="http://www.craftinginterpreters.com/">Build an Interpreter</a> (Chapter 4-13 is written in Java)</li>
<li><a href="http://javarevisited.blogspot.com/2015/06/how-to-create-http-server-in-java-serversocket-example.html">Build a Simple HTTP Server with Java</a></li>
<li><a href="https://www.youtube.com/watch?v=dhWL4DC7Krs">Build an Android Flashlight App</a> (video)</li>
<li><a href="https://spring.io/guides/gs/securing-web/">Build a Spring Boot App with User Authentication</a></li>
</ul>
<h2 id="javascript">JavaScript:</h2>
<ul>
<li><a href="https://javascript30.com">Build 30 things in 30 days with 30 tutorials</a></li>
<li><a href="https://medium.com/codingthesmartway-com-blog/pure-javascript-building-a-real-world-application-from-scratch-5213591cfcd6">Build an App in Pure JS</a></li>
<li><a href="https://link.medium.com/wWUO7TN8SS">Build a Jupyter Notebook Extension</a></li>
<li><a href="https://medium.com/javascript-in-plain-english/build-tic-tac-toe-game-using-javascript-3afba3c8fdcc">Build a TicTacToe Game with JavaScript</a></li>
<li><a href="https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893">Build a Simple Weather App With Vanilla JavaScript</a></li>
<li><a href="https://github.com/dwyl/javascript-todo-list-tutorial">Build a Todo List App in JavaScript</a></li>
</ul>
<h2 id="html-and-css">HTML and CSS:</h2>
<ul>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-delightful-loading-screen-in-5-minutes-847991da509f">Build A Loading Screen</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-an-html-calculator-app-from-scratch-using-javascript-4454b8714b98">Build an HTML Calculator with JS</a></li>
<li><a href="https://www.freecodecamp.org/news/think-like-a-programmer-how-to-build-snake-using-only-javascript-html-and-css-7b1479c3339e/">Build Snake using only JavaScript, HTML &amp; CSS</a></li>
</ul>
<h3 id="mobile-application">Mobile Application:</h3>
<ul>
<li><a href="https://egghead.io/courses/build-a-react-native-todo-application">Build a React Native Todo Application</a></li>
<li><a href="https://medium.com/@alialhaddad/how-to-use-redux-thunk-in-react-and-react-native-4743a1321bd0">Build a React Native Application with Redux Thunk</a></li>
</ul>
<h3 id="web-applications">Web Applications:</h3>
<h4 id="react">React:</h4>
<ul>
<li><a href="http://serverless-stack.com/">Create Serverless React.js Apps</a></li>
<li><a href="http://codeloveandboards.com/blog/2016/01/04/trello-tribute-with-phoenix-and-react-pt-1/">Create a Trello Clone</a></li>
<li><a href="http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio">Create a Character Voting App with React, Node, MongoDB and SocketIO</a></li>
<li><a href="https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/">React Tutorial: Cloning Yelp</a></li>
<li><a href="https://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html">Build a Full Stack Movie Voting App with Test-First Development using Mocha, React, Redux and Immutable</a></li>
<li><a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">Build a Twitter Stream with React and Node</a></li>
<li><a href="https://medium.com/@kris101/clone-medium-on-node-js-and-react-js-731cdfbb6878">Build A Simple Medium Clone using React.js and Node.js</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-integrate-mailchimp-in-a-javascript-web-app-2a889fb43f6f">Integrate MailChimp in JS</a></li>
<li><a href="https://medium.freecodecamp.org/building-chrome-extensions-in-react-parcel-79d0240dd58f">Build A Chrome Extension with React + Parcel</a></li>
<li><a href="https://blog.hasura.io/tutorial-fullstack-react-native-with-graphql-and-authentication-18183d13373a">Build A ToDo App With React Native</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-chat-application-using-react-redux-redux-saga-and-web-sockets-47423e4bc21a">Make a Chat Application</a></li>
<li><a href="https://medium.freecodecamp.org/create-a-news-app-using-react-native-ced249263627">Create a News App with React Native</a></li>
<li><a href="https://medium.freecodecamp.org/learn-webpack-for-react-a36d4cac5060">Learn Webpack For React</a></li>
<li><a href="https://blog.bitsrc.io/testing-your-react-app-with-puppeteer-and-jest-c72b3dfcde59">Testing React App With Puppeteer and Jest</a></li>
<li><a href="https://medium.freecodecamp.org/how-to-build-your-own-react-boilerplate-2f8cbbeb9b3f">Build Your Own React Boilerplate</a></li>
<li><a href="https://medium.freecodecamp.org/create-gameoflife-with-react-in-one-hour-8e686a410174">Code The Game Of Life With React</a></li>
<li><a href="https://hackernoon.com/a-basic-react-redux-introductory-tutorial-adcc681eeb5e">A Basic React+Redux Introductory Tutorial</a></li>
<li><a href="https://hackernoon.com/build-an-appointment-scheduler-using-react-twilio-and-cosmic-js-95377f6d1040">Build an Appointment Scheduler</a></li>
<li><a href="https://codeburst.io/build-a-chat-app-with-sentiment-analysis-using-next-js-c43ebf3ea643">Build A Chat App with Sentiment Analysis</a></li>
<li><a href="https://hackernoon.com/full-stack-web-application-using-react-node-js-express-and-webpack-97dbd5b9d708">Build A Full Stack Web Application Setup</a></li>
<li><a href="https://www.youtube.com/watch?v=hT3j87FMR6M">Create Todoist clone with React and Firebase</a></li>
<li>Build A Random Quote Machine
<ul>
<li><a href="https://www.youtube.com/watch?v=3QngsWA9IEE">Part 1</a></li>
<li><a href="https://www.youtube.com/watch?v=XnoTmO06OYo">Part 2</a></li>
<li><a href="https://www.youtube.com/watch?v=us51Jne67_I">Part 3</a></li>
<li><a href="https://www.youtube.com/watch?v=iZx7hqHb5MU">Part 4</a></li>
<li><a href="https://www.youtube.com/watch?v=lpba9vBqXl0">Part 5</a></li>
<li><a href="https://www.youtube.com/watch?v=Jvp8j6zrFHE">Part 6</a></li>
<li><a href="https://www.youtube.com/watch?v=M_hFfrN8_PQ">Part 7</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=-edmQKcOW8s">React Phone E-Commerce Project(video)</a></li>
</ul>
<h4 id="angular">Angular:</h4>
<ul>
<li>
<p><a href="https://hackhands.com/building-instagram-clone-angularjs-satellizer-nodejs-mongodb/">Build an Instagram Clone with Angular 1.x</a></p>
</li>
<li>
<p>Build an offline-capable Hacker News client with Angular 2+</p>
<ul>
<li><a href="https://houssein.me/angular2-hacker-news">Part 1</a></li>
<li><a href="https://houssein.me/progressive-angular-applications">Part 2</a></li>
</ul>
</li>
<li>
<p><a href="https://thinkster.io/django-angularjs-tutorial">Build a Google+ clone with Django and AngularJS (Angular 1.x)</a></p>
</li>
<li>
<p>Build A Beautiful Real World App with Angular 8 :</p>
<ul>
<li><a href="https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e">Part I</a></li>
<li><a href="https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-8-the-ultimate-guide-2019-part-ii-fe70852b2d6d">Part II</a></li>
</ul>
</li>
<li>
<p><a href="https://medium.com/@tomastrajan/how-to-build-responsive-layouts-with-bootstrap-4-and-angular-6-cfbb108d797b">Build Responsive layout with BootStrap 4 and Angular 6</a></p>
</li>
<li>
<p>ToDo App with Angular 5</p>
<ul>
<li><a href="http://www.discoversdk.com/blog/intro-to-angular-and-the-evolution-of-the-web">Introduction to Angular</a></li>
<li><a href="http://www.discoversdk.com/blog/angular-5-to-do-list-app-part-1">Part 1</a></li>
</ul>
</li>
</ul>
<h4 id="node">Node:</h4>
<ul>
<li><a href="https://scotch.io/tutorials/building-a-real-time-markdown-viewer">Build a real-time Markdown Editor with NodeJS</a></li>
<li><a href="http://mherman.org/blog/2016/04/28/test-driven-development-with-node/">Test-Driven Development with Node, Postgres and Knex</a></li>
<li>Write a Twitter Bot in Node.js
<ul>
<li><a href="https://codeburst.io/build-a-simple-twitter-bot-with-node-js-in-just-38-lines-of-code-ed92db9eb078">Part 1</a></li>
<li><a href="https://codeburst.io/build-a-simple-twitter-bot-with-node-js-part-2-do-more-2ef1e039715d">Part 2</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/how-to-build-a-simple-search-bot-in-30-minutes-eb56fcedcdb1">Build A Simple Search Bot in 30 minutes</a></li>
<li><a href="https://medium.freecodecamp.org/how-i-built-a-job-scraping-web-app-using-node-js-and-indreed-7fbba124bbdc">Build A Job Scraping Web App</a></li>
<li><a href="https://blog.scottlogic.com/2017/05/22/gifbot-github-integration.html">Building a GitHub App</a></li>
<li>How to build your own Uber-for-X App using JavaScript, Node.JS, MongoDB and Web Sockets
<ul>
<li><a href="https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app/">Part 1</a></li>
<li><a href="https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app-part-2/">Part 2</a></li>
</ul>
</li>
</ul>
<h4 id="vue">Vue</h4>
<ul>
<li><a href="https://medium.com/@anas.mammeri/vue-2-firebase-how-to-build-a-vue-app-with-firebase-authentication-system-in-15-minutes-fdce6f289c3c">Vue 2 + Firebase: How to build a Vue app with Firebase authentication system in 15 minutes</a></li>
<li><a href="https://matthiashager.com/complete-vuejs-application-tutorial/">Vue.js Application Tutorial – Creating a Simple Budgeting App with Vue</a></li>
<li><a href="https://scotch.io/tutorials/build-a-blog-with-vue-graphql-and-apollo-client">Build a Blog with Vue, GraphQL and Apollo</a></li>
<li>Build a full stack web application using MEVN (MongoDB, Express, Vue, Node) stack
<ul>
<li><a href="https://medium.com/@anaida07/mevn-stack-application-part-1-3a27b61dcae0">Part 1</a></li>
<li><a href="https://medium.com/@anaida07/mevn-stack-application-part-2-2-9ebcf8a22753">Part 2</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=78tNYZUS-ps">Vue.js To-Do List Tutorial (video)</a></li>
<li><a href="https://www.ably.io/tutorials/peer-to-peer-vue">Vue 2 + Pub/Sub: Build a peer to peer multi-user platform for games</a></li>
</ul>
<h4 id="others-hapi-express">Others (Hapi, Express&hellip;):</h4>
<ul>
<li>Build a Progressive Web Application (PWA)
<ul>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-1-offline-first-with-service-worker/">Part 1</a></li>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-2-instant-loading-with-indexeddb/">Part 2</a></li>
<li><a href="https://bitsofco.de/bitsofcode-pwa-part-3-push-notifications/">Part 3</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/build-native-desktop-apps-with-javascript-a49ede90d8e9">Build A Native Desktop App with JS</a></li>
<li>Build a Powerful API with NodeJs,GraphQL and Hapi
<ul>
<li><a href="https://medium.com/@wesharehoodies/how-to-setup-a-powerful-api-with-nodejs-graphql-mongodb-hapi-and-swagger-e251ac189649">Part I</a></li>
</ul>
</li>
</ul>
<h4 id="d3js">D3.js</h4>
<ul>
<li><a href="https://www.sitepoint.com/d3-js-data-visualizations/">Learn D3 using examples</a></li>
<li><a href="https://medium.freecodecamp.org/learn-to-create-a-line-chart-using-d3-js-4f43f1ee716b">Learn To Make A Line Chart</a></li>
</ul>
<h3 id="game-development">Game Development:</h3>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser">Make 2D Breakout Game using Phaser</a></li>
<li>Make Flappy Bird in HTML5 and JavaScript with Phaser
<ul>
<li><a href="http://www.lessmilk.com/tutorial/flappy-bird-phaser-1">Part 1</a></li>
<li><a href="http://www.lessmilk.com/tutorial/flappy-bird-phaser-2">Part 2</a></li>
</ul>
</li>
</ul>
<h3 id="desktop-application">Desktop Application:</h3>
<ul>
<li><a href="https://medium.freecodecamp.org/build-a-desktop-chat-app-with-react-electron-and-chatkit-744d168e6f2f">Build A Desktop Chat App with React and Electron</a></li>
</ul>
<h3 id="miscellaneous">Miscellaneous:</h3>
<ul>
<li><a href="https://www.pubnub.com/blog/build-yourself-a-web-framework-in-less-than-20-lines-of-code/">How to Build a Web Framework in Less Than 20 Lines of Code</a></li>
<li><a href="https://zapier.com/engineering/how-to-build-redux/">Build Yourself a Redux</a></li>
<li><a href="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060">How to write your own Virtual DOM</a></li>
<li><a href="https://andrewgriffithsonline.com/blog/serverless-websockets-on-aws/">Build A Realtime Serverless GraphQL API with WebSockets on AWS</a></li>
</ul>
<h2 id="kotlin">Kotlin:</h2>
<ul>
<li><a href="https://medium.com/@juanchosaravia/learn-kotlin-while-developing-an-android-app-introduction-567e21ff9664">Keddit - Learn Kotlin While Developing an Android Application</a></li>
</ul>
<h2 id="lua">Lua:</h2>
<h3 id="löve">LÖVE:</h3>
<ul>
<li>BYTEPATH: Creation of a Complete Game with Lua and LÖVE
<ul>
<li><a href="https://github.com/SSYGEN/blog/issues/30">Part 0: Introduction</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/15">Part 1: Game Loop</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/16">Part 2: Libraries</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/17">Part 3: Rooms and Areas</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/18">Part 4: Exercises</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/19">Part 5: Game Basics</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/20">Part 6: Player Basics</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/21">Part 7: Player Stats and Attacks</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/22">Part 8: Enemies</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/23">Part 9: Director and Gameplay Loop</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/24">Part 10: Coding Practices</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/25">Part 11: Passives</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/26">Part 12: More Passives</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/27">Part 13: Skill Tree</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/28">Part 14: Console</a></li>
<li><a href="https://github.com/SSYGEN/blog/issues/29">Part 15: Final</a></li>
</ul>
</li>
</ul>
<h2 id="python">Python:</h2>
<h3 id="web-scraping">Web Scraping:</h3>
<ul>
<li><a href="https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/">Mining Twitter Data with Python</a></li>
<li><a href="https://realpython.com/blog/python/web-scraping-with-scrapy-and-mongodb/">Scrape a Website with Scrapy and MongoDB</a></li>
<li><a href="http://www.byperth.com/2018/04/25/guide-web-scraping-101-what-you-need-to-know-and-how-to-scrape-with-python-selenium-webdriver/">How To Scrape With Python and Selenium WebDriver</a></li>
<li><a href="https://medium.com/@nishantsahoo.in/which-movie-should-i-watch-5c83a3c0f5b1">Which Movie Should I Watch using BeautifulSoup</a></li>
</ul>
<h3 id="web-applications-1">Web Applications:</h3>
<ul>
<li><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world">Build a Microblog with Flask</a></li>
<li><a href="https://tutorial.djangogirls.org/en/">Create a Blog Web App In Django</a></li>
<li><a href="https://www.twilio.com/blog/2015/03/choose-your-own-adventures-presentations-wizard-mode-part-1-of-3.html">Choose Your Own Adventure Presentations</a></li>
<li><a href="https://realpython.com/blog/python/rethink-flask-a-simple-todo-list-powered-by-flask-and-rethinkdb/">Build a Todo List with Flask and RethinkDB</a></li>
<li><a href="http://www.obeythetestinggoat.com/">Build a Todo List with Django and Test-Driven Development</a></li>
<li><a href="http://www.skybert.net/python/developing-a-restful-micro-service-in-python/">Build a RESTful Microservice in Python</a></li>
<li><a href="https://testdriven.io/">Microservices with Docker, Flask, and React</a></li>
<li><a href="https://pythonspot.com/flask-web-app-with-python/">Build A Simple Web App With Flask</a></li>
<li><a href="https://codeburst.io/create-a-django-api-in-under-20-minutes-2a082a60f6f3">Create A Django API in under 20 minutes</a></li>
<li>Build a Community-driven delivery application with Django, Postgres and JavaScript
<ul>
<li><a href="https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead/">Part 1</a></li>
<li><a href="https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead-part-2/">Part 2</a></li>
</ul>
</li>
<li>Realtime Chat application with Vue, django-notifs, RabbitMQ and uWSGI
<ul>
<li><a href="https://danidee10.github.io/2018/01/01/realtime-django-1.html">Part 1</a></li>
<li><a href="https://danidee10.github.io/2018/01/03/realtime-django-2.html">Part 2</a></li>
<li><a href="https://danidee10.github.io/2018/01/07/realtime-django-3.html">Part 3</a></li>
<li><a href="https://danidee10.github.io/2018/01/10/realtime-django-4.html">Part 4</a></li>
<li><a href="https://danidee10.github.io/2018/01/13/realtime-django-5.html">Part 5</a></li>
<li><a href="https://danidee10.github.io/2018/03/12/realtime-django-6.html">Part 6</a></li>
</ul>
</li>
</ul>
<h3 id="bots">Bots:</h3>
<ul>
<li><a href="http://pythonforengineers.com/build-a-reddit-bot-part-1/">Build a Reddit Bot</a></li>
<li><a href="https://www.youtube.com/watch?v=krTUf7BpTc0">How to Make a Reddit Bot - YouTube</a> (video)</li>
<li><a href="https://blog.hartleybrody.com/fb-messenger-bot/">Build a Facebook Messenger Bot</a></li>
<li><a href="https://pythontips.com/2017/04/13/making-a-reddit-facebook-messenger-bot/">Making a Reddit + Facebook Messenger Bot</a></li>
<li>How To Create a Telegram Bot Using Python
<ul>
<li><a href="https://khashtamov.com/en/how-to-create-a-telegram-bot-using-python/">Part 1</a></li>
<li><a href="https://khashtamov.com/en/how-to-deploy-telegram-bot-django/">Part 2</a></li>
</ul>
</li>
<li><a href="https://medium.freecodecamp.org/creating-a-twitter-bot-in-python-with-tweepy-ac524157a607">Create a Twitter Bot In Python</a></li>
</ul>
<h3 id="data-science">Data Science:</h3>
<ul>
<li>Learn Python For Data Science by Doing Several Projects (video):
<ul>
<li><a href="https://www.youtube.com/watch?v=T5pRlIbr6gg">Part 1: Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=o_OZdbCzHUA">Part 2: Twitter Sentiment Analysis</a></li>
<li><a href="https://www.youtube.com/watch?v=9gBC9R-msAk&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&amp;index=3">Part 3: Recommendation Systems</a></li>
<li><a href="https://www.youtube.com/watch?v=SSu00IRRraY&amp;index=4&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU">Part 4: Predicting Stock Prices</a></li>
<li><a href="https://www.youtube.com/watch?v=MrBzgvUNr4w&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&amp;index=5">Part 5: Deep Dream in TensorFlow</a></li>
<li><a href="https://www.youtube.com/watch?v=dSofAXnnFrY&amp;index=6&amp;list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU">Part 6: Genetic Algorithms</a></li>
</ul>
</li>
</ul>
<h3 id="machine-learning">Machine Learning:</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=uwwWVAgJBcM">Write Linear Regression From Scratch in Python</a> (video)</li>
<li><a href="https://machinelearningmastery.com/machine-learning-in-python-step-by-step/">Step-By-Step Machine Learning In Python</a></li>
<li><a href="https://medium.freecodecamp.org/using-machine-learning-to-predict-the-quality-of-wines-9e2e13d7480d">Predict Quality Of Wine</a></li>
<li><a href="https://towardsdatascience.com/solving-a-simple-classification-problem-with-python-fruits-lovers-edition-d20ab6b071d2">Solving A Fruits Classification Problem</a></li>
<li><a href="https://scikit-learn.org/stable/unsupervised_learning.html">Learn Unsupervised Learning with Python</a></li>
<li><a href="https://towardsdatascience.com/how-to-build-your-own-neural-network-from-scratch-in-python-68998a08e4f6">Build Your Own Neural Net from Scratch in Python</a></li>
<li><a href="https://medium.com/we-are-orb/linear-regression-in-python-without-scikit-learn-50aef4b8d122">Linear Regression in Python without sklearn</a></li>
<li><a href="https://medium.com/we-are-orb/multivariate-linear-regression-in-python-without-scikit-learn-7091b1d45905">Multivariate Linear Regression without sklearn</a></li>
<li><a href="https://towardsdatascience.com/how-to-build-a-simple-song-recommender-296fcbc8c85">Music Recommender using KNN</a></li>
<li>Find Similar Quora Questions-
<ul>
<li><a href="https://towardsdatascience.com/finding-similar-quora-questions-with-bow-tfidf-and-random-forest-c54ad88d1370">Using BOW, TFIDF and Xgboost</a></li>
<li><a href="https://towardsdatascience.com/finding-similar-quora-questions-with-word2vec-and-xgboost-1a19ad272c0d">Using Word2Vec and Xgboost</a></li>
</ul>
</li>
<li><a href="https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/">Detecting Fake News with Python and Machine Learning</a></li>
</ul>
<h3 id="opencv">OpenCV:</h3>
<ul>
<li><a href="https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/">Build A Document Scanner</a></li>
<li><a href="https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/">Build A Face Detector using OpenCV and Deep Learning</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLKHYJbyeQ1a0oGzgRXy-QwAN1tSV4XZxg">Build fastest custom object Detection system yusing YOLOv3(video playlist)</a></li>
<li><a href="https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/">Build a Face Recognition System using OpenCV, Python and Deep Learning</a></li>
<li><a href="https://www.pyimagesearch.com/2018/07/16/opencv-saliency-detection/">Detect The Salient Features in an Image</a></li>
<li><a href="https://www.pyimagesearch.com/2018/05/21/an-opencv-barcode-and-qr-code-scanner-with-zbar/">Build A Barcode Scanner</a></li>
<li><a href="https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/">Learn Face Clustering with Python</a></li>
<li><a href="https://www.pyimagesearch.com/wp-content/uploads/2014/11/opencv_crash_course_camshift.pdf">Object Tracking with Camshift</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/03/semantic-segmentation-with-opencv-and-deep-learning/">Semantic Segmentation with OpenCV and Deep Learning</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/20/opencv-text-detection-east-text-detector/">Text Detection in Images and Videos</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/13/opencv-people-counter/">People Counter using OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/06/tracking-multiple-objects-with-opencv/">Tracking Multiple Objects with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/08/27/neural-style-transfer-with-opencv/">Neural Style Transfer with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/17/opencv-ocr-and-text-recognition-with-tesseract/">OpenCV OCR and Text Recognition</a></li>
<li><a href="https://www.pyimagesearch.com/2017/02/20/text-skew-correction-opencv-python/">Text Skew Correction Tutorial</a></li>
<li><a href="https://www.pyimagesearch.com/2017/04/03/facial-landmarks-dlib-opencv-python/">Facial Landmark Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/deep-learning-based-object-detection-and-instance-segmentation-using-mask-r-cnn-in-opencv-python-c/">Object Detection using Mask-R-CNN</a></li>
<li><a href="https://www.pyimagesearch.com/2015/05/04/target-acquired-finding-targets-in-drone-and-quadcopter-video-streams-using-python-and-opencv/">Automatic Target Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/eigenface-using-opencv-c-python/">EigenFaces using OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2018/04/02/faster-facial-landmark-detector-with-dlib/">Faster(5-point) Facial Landmark Detection Tutorial</a></li>
<li><a href="https://www.learnopencv.com/hand-keypoint-detection-using-deep-learning-and-opencv/">Hand Keypoint Detection</a></li>
<li>Dlib Correlation Object Tracking -
<ul>
<li><a href="https://www.pyimagesearch.com/2018/10/22/object-tracking-with-dlib/">Single Object Tracker</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/29/multi-object-tracking-with-dlib/">Mutiple Object Tracker</a></li>
</ul>
</li>
<li><a href="https://www.pyimagesearch.com/2018/12/17/image-stitching-with-opencv-and-python/">Image Stitching with OpenCV and Python</a></li>
<li><a href="https://www.pyimagesearch.com/2018/11/26/instance-segmentation-with-opencv/">Instance Segmentation with OpenCV</a></li>
<li><a href="https://www.pyimagesearch.com/2020/05/04/covid-19-face-mask-detector-with-opencv-keras-tensorflow-and-deep-learning/">Face mask detector</a></li>
</ul>
<h3 id="deep-learning">Deep Learning:</h3>
<ul>
<li><a href="http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/">Using Convolutional Neural Nets to Detect Facial Keypoints</a></li>
<li><a href="https://www.learnopencv.com/average-face-opencv-c-python-tutorial/">Generate an Average Face using Python and OpenCV</a></li>
<li><a href="https://medium.com/@ageitgey/how-to-break-a-captcha-system-in-15-minutes-with-machine-learning-dbebb035a710">Break A Captcha System using CNNs</a></li>
<li><a href="https://medium.com/google-cloud/keras-inception-v3-on-google-compute-engine-a54918b0058">Use pre-trained Inception model to provide image predictions</a></li>
<li><a href="https://hackernoon.com/deep-learning-cnns-in-tensorflow-with-gpus-cba6efe0acc2">Create your first CNN</a></li>
<li><a href="https://hackernoon.com/building-a-facial-recognition-pipeline-with-deep-learning-in-tensorflow-66e7645015b8">Build A Facial Recognition Pipeline</a></li>
<li><a href="https://medium.freecodecamp.org/building-an-image-caption-generator-with-deep-learning-in-tensorflow-a142722e9b1f">Build An Image Caption Generator</a></li>
<li><a href="https://medium.freecodecamp.org/making-your-own-face-recognition-system-29a8e728107c">Make your Own Face Recognition System</a></li>
<li><a href="https://towardsdatascience.com/how-i-trained-a-language-detection-ai-in-20-minutes-with-a-97-accuracy-fdeca0fb7724">Train a Language Detection AI in 20 minutes</a></li>
<li><a href="https://towardsdatascience.com/object-detection-with-neural-networks-a4e2c46b4491">Object Detection With Neural Networks</a></li>
<li>Learn Twitter Sentiment Analysis -
<ul>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-bb5b01ebad90">Part I - Data Cleaning</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-2-333514854913">Part II - EDA, Data Visualisation</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-3-zipfs-law-data-visualisation-fc9eadda71e7">Part III - Zipf&rsquo;s Law, Data Visualisation</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-4-count-vectorizer-b3f4944e51b5">Part IV - Feature Extraction(count vectoriser)</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-5-50b4e87d9bdd">Part V - Feature Extraction(Tfidf vectoriser)</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-6-doc2vec-603f11832504">Part VI - Doc2Vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-7-phrase-modeling-doc2vec-592a8a996867">Part VII - Phrase Modeling + Doc2Vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-8-dimensionality-reduction-chi2-pca-c6d06fb3fcf3">Part VIII - Dimensionality Reduction</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-9-neural-networks-with-tfidf-vectors-using-d0b4af6be6d7">Part IX - Neural Nets with Tfdif vectors</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-10-neural-network-with-a6441269aa3c">Part X - Neural Nets with word2vec/doc2vec</a></li>
<li><a href="https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-11-cnn-word2vec-41f5e28eda74">Part XI - CNN with Word2Vec</a></li>
</ul>
</li>
<li><a href="https://becominghuman.ai/transfer-learning-retraining-inception-v3-for-custom-image-classification-2820f653c557">Use Transfer Learning for custom image classification</a></li>
<li><a href="https://iamtrask.github.io/2015/07/12/basic-python-network/">Learn to Code a simple Neural Network in 11 lines of Python</a></li>
<li><a href="https://iamtrask.github.io/2015/07/27/python-network-part2/">Build a Neural Network using Gradient Descent Approach</a></li>
<li><a href="https://heartbeat.fritz.ai/how-to-train-a-keras-model-to-generate-colors-3bc79e54971b">Train a Keras Model To Generate Colors</a></li>
<li><a href="https://www.pyimagesearch.com/2018/09/10/keras-tutorial-how-to-get-started-with-keras-deep-learning-and-python/">Get Started with Keras on a Custom Dataset</a></li>
<li><a href="https://nicholastsmith.wordpress.com/2016/02/18/eigenfaces-versus-fisherfaces-on-the-faces94-database-with-scikit-learn/">Use EigenFaces and FisherFaces on Faces94 dataset</a></li>
<li><a href="https://medium.com/@lvarruda/how-to-get-top-2-position-on-kaggles-mnist-digit-recognizer-48185d80a2d4">Kaggle MNIST Digit Recognizer Tutorial</a></li>
<li><a href="https://medium.com/tensorflow/hello-deep-learning-fashion-mnist-with-keras-50fcff8cd74a">Fashion MNIST tutorial with tf.keras</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/15/deep-learning-hydroponics-and-medical-marijuana/">CNN using Keras to automatically classify root health</a></li>
<li><a href="https://www.pyimagesearch.com/2018/10/08/keras-vs-tensorflow-which-one-is-better-and-which-one-should-i-learn/">Keras vs Tensorflow</a></li>
<li><a href="https://www.pyimagesearch.com/2018/12/03/deep-learning-and-medical-image-analysis-with-keras/">Deep Learning and Medical Image Analysis for Malaria Detection</a></li>
<li><a href="https://towardsdatascience.com/transfer-learning-for-image-classification-using-keras-c47ccf09c8c8">Transfer Learning for Image Classification using Keras</a></li>
<li><a href="https://github.com/kylemcdonald/SmileCNN">Code a Smile Classifier using CNNS in Python</a></li>
<li><a href="https://towardsdatascience.com/natural-language-processing-count-vectorization-with-scikit-learn-e7804269bb5e">Natural Language Processing using scikit-learn</a></li>
<li><a href="https://towardsdatascience.com/ai-generates-taylor-swifts-song-lyrics-6fd92a03ef7e">Code a Taylor Swift Lyrics Generator</a></li>
<li><a href="https://towardsdatascience.com/how-i-built-a-face-mask-detector-for-covid-19-using-pytorch-lightning-67eb3752fd61">Mask detection using PyTorch Lightning</a></li>
</ul>
<h3 id="miscellaneous-1">Miscellaneous:</h3>
<ul>
<li><a href="https://ruslanspivak.com/lsbasi-part1/">Build a Simple Interpreter</a></li>
<li><a href="https://hackernoon.com/learn-blockchains-by-building-one-117428612f46">Build a Simple Blockchain in Python</a></li>
<li><a href="https://jeffknupp.com/blog/2014/09/01/what-is-a-nosql-database-learn-by-writing-one-in-python/">Write a NoSQL Database in Python</a></li>
<li><a href="https://hackernoon.com/building-a-gas-pump-scanner-with-opencv-python-ios-116fe6c9ae8b">Building a Gas Pump Scanner with OpenCV/Python/iOS</a></li>
<li><a href="https://codequs.com/p/S14jQ5UyG/build-a-distributed-streaming-system-with-apache-kafka-and-python">Build a Distributed Streaming System with Python and Kafka</a></li>
<li><a href="https://csl.name/post/python-jit/">Writing a basic x86-64 JIT compiler from scratch in stock Python</a></li>
<li>Making a low level (Linux) debugger
<ul>
<li><a href="https://blog.asrpo.com/making_a_low_level_debugger">Part 1</a></li>
<li><a href="https://blog.asrpo.com/making_a_low_level_debugger_part_2">Part 2: C</a></li>
</ul>
</li>
<li>Implementing a Search Engine
<ul>
<li><a href="http://www.ardendertat.com/2011/05/30/how-to-implement-a-search-engine-part-1-create-index/">Part 1</a></li>
<li><a href="http://www.ardendertat.com/2011/05/31/how-to-implement-a-search-engine-part-2-query-index/">Part 2</a></li>
<li><a href="http://www.ardendertat.com/2011/07/17/how-to-implement-a-search-engine-part-3-ranking-tf-idf/">Part 3</a></li>
</ul>
</li>
<li><a href="https://robertheaton.com/2018/07/20/project-2-game-of-life/">Build the Game of Life</a></li>
<li><a href="https://robertheaton.com/2018/06/12/programming-projects-for-advanced-beginners-ascii-art/">Create terminal ASCII art</a></li>
<li><a href="https://robertheaton.com/2018/10/09/programming-projects-for-advanced-beginners-3-a/">Write a Tic-Tac-Toe AI</a></li>
<li><a href="https://robertheaton.com/2018/11/03/programming-project-4-photomosaics/">Create photomosaic art</a></li>
<li><a href="https://robertheaton.com/2018/12/02/programming-project-5-snake/">Build the game &ldquo;Snake&rdquo; in the terminal</a></li>
<li><a href="https://wyag.thb.lt/">Write yourself a Git</a></li>
<li><a href="https://www.aosabook.org/en/500L/a-python-interpreter-written-in-python.html">A Python implementation of a Python bytecode runner</a></li>
<li><a href="https://www.geeksforgeeks.org/voice-assistant-using-python/">Create a Voice assistant using Python</a></li>
</ul>
<h2 id="go">Go:</h2>
<ul>
<li><a href="https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/">Create a Real Time Chat App with Golang, Angular 2, and WebSocket</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin">Building Go Web Applications and Microservices Using Gin</a></li>
<li><a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">How to Use Godog for Behavior-driven Development in Go</a></li>
<li>Building Blockchain in Go
<ul>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-1/">Part 1: Basic Prototype</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-2/">Part 2: Proof of Work</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-3/">Part 3: Persistence and CLI</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-4/">Part 4: Transactions 1</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-5/">Part 5: Address</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-6/">Part 6: Transactions 2</a></li>
<li><a href="https://jeiwan.net/posts/building-blockchain-in-go-part-7/">Part 7: Network</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=8fi7uSYlOdc">Building a container from scratch in Go - Liz Rice (Microscaling Systems)(video)</a></li>
<li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/">Build Web Application with GoLang</a></li>
<li>Building a Chat Application in Go with ReactJS
<ul>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-1-initial-setup/">Part 1: Initial Setup</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-2-simple-communication/">Part 2: Simple Communication</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/">Part 3: Designing our Frontend</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/">Part 4: Handling Multiple Clients</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-5-improved-frontend/">Part 5: Improving the Frontend</a></li>
<li><a href="https://tutorialedge.net/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/">Part 6: Dockerizing your Backend</a></li>
</ul>
</li>
<li><a href="https://tutorialedge.net/golang/go-webassembly-tutorial/">Go WebAssembly Tutorial - Building a Calculator Tutorial</a></li>
<li>REST Servers in Go
<ul>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-1-standard-library/">Part 1 - standard library</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-2-using-a-router-package/">Part 2 - using a router package</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-3-using-a-web-framework/">Part 3 - using a web framework</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-4-using-openapi-and-swagger/">Part 4 - using OpenAPI and Swagger</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-5-middleware/">Part 5 - middleware</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-6-authentication/">Part 6 - authentication</a></li>
<li><a href="https://eli.thegreenplace.net/2021/rest-servers-in-go-part-7-graphql/">Part 7 - GraphQL</a></li>
</ul>
</li>
<li>Let&rsquo;s build a URL shortener in Go - with Gin &amp; Redis
<ul>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go/">Part 1 - Project setup</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-with-redis-part-2-storage-layer/">Part 2 - Storage Layer</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-3-short-link-generation/">Part 3 - Short Link Generator</a></li>
<li><a href="https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-iv-forwarding/">Part 4 - Forwarding</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=Sphme0BqJiY">Building a TCP Chat in Go(video)</a></li>
<li><a href="https://blog.jse.li/posts/torrent/">Building a BitTorrent client from the ground up in Go</a></li>
<li><a href="https://www.youtube.com/watch?v=rx6CPDK_5mU&amp;list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE">REST API masterclass with Go, PostgreSQL and Docker(video playlist)<code>in progress</code></a></li>
</ul>
<h2 id="php">PHP:</h2>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLwAKR305CRO-Q90J---jXVzbOd4CDRbVx">How To Build A Blog With Laravel</a> (video)</li>
<li><a href="http://ilovephp.jondh.me.uk/en/tutorial/make-your-own-blog">Make Your Own Blog (in Pure PHP)</a></li>
<li><a href="https://www.silverstripe.org/learn/lessons/">Build A Real Estate Website Example with SilverStripe</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLXsbBbd36_uVjOFH_P25__XAyGsohXWlv">Building Realtime Chat App with Laravel 5.4 and VueJS</a> (video)</li>
<li><a href="https://www.youtube.com/playlist?list=PLfdtiltiRHWGGxaR6uFtwZnnbcXqyq8JD">Build A Social Network: Laravel 5 - Youtube</a> (video)</li>
<li>Build a full-featured multi-tenant app with Laravel
<ul>
<li><a href="https://medium.com/@ashokgelal/writing-a-full-featured-multi-tenant-laravel-app-from-scratch-a0e1a7350d9d">Part 0: Introduction</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-1-4049a3cc229d">Part 1: Setup</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-roles-and-permissions-d9a5bfe5d525">Part 2: Roles and Permissinos</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-3-invitation-c982dca55eb9">Part 3: Invitation</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-4-tenancy-aware-authentication-e0ee37270bc8">Part 4: Authentication</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-unit-tests-96d6dfbf0617">Part 5: Testing</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-5-user-profile-5c3d0c655f3a">Part 6: User Profile</a></li>
<li><a href="https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-7-deployment-40bb3c895627">Part 7: Deployment</a></li>
</ul>
</li>
<li><a href="https://www.codewall.co.uk/laravel-crud-demo-with-resource-controller-tutorial/">Build a Laravel CRUD Application From Scratch</a></li>
</ul>
<h2 id="ocaml">OCaml:</h2>
<ul>
<li><a href="https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm-in-objective-caml">Implement a Language with LLVM in OCaml</a></li>
</ul>
<h2 id="ruby">Ruby:</h2>
<ul>
<li><a href="https://medium.com/geckoboard-under-the-hood/how-to-build-a-network-stack-in-ruby-f73aeb1b661b">Build a Network Stack with Ruby</a></li>
<li>Build your own Redis
<ul>
<li><a href="https://rohitpaulk.com/articles/redis-0">Part 0: Introduction</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-1">Part 1: Barebones TCP Server</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-2">Part 2: PING &lt;-&gt; PONG</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-3">Part 3: Concurrent Clients</a></li>
<li><a href="https://rohitpaulk.com/articles/redis-4">Part 4: ECHO</a></li>
</ul>
</li>
<li><a href="https://thoughtbot.com/blog/rebuilding-git-in-ruby">Rebuilding Git in Ruby</a></li>
</ul>
<h3 id="ruby-on-rails">Ruby on Rails:</h3>
<ul>
<li><a href="https://www.railstutorial.org/book">The Ruby on Rails Tutorial</a></li>
<li><a href="https://www.dropbox.com/s/9vq430e9s3q7pu8/Let%27s%20Build%20Instagram%20with%20Ruby%20on%20Rails%20-%20Free%20Edition.pdf?dl=0">Build Instagram From Scratch with Ruby on Rails</a></li>
<li><a href="https://medium.com/rails-ember-beyond/how-to-build-a-social-network-using-rails-eb31da569233">Build a Social Network using Rails</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-ruby-on-rails-application">How To Build a Ruby on Rails Application</a></li>
</ul>
<h2 id="haskell">Haskell:</h2>
<ul>
<li><a href="http://dev.stephendiehl.com/fun/">Write You a Haskell - Build a modern functional compiler</a></li>
<li><a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a></li>
<li><a href="https://github.com/write-you-a-scheme-v2/scheme">Write You A Scheme, Version 2</a></li>
<li><a href="https://wiki.haskell.org/Roll_your_own_IRC_bot">Roll Your Own IRC Bot</a></li>
<li><a href="https://lettier.github.io/posts/2016-08-15-making-movie-monad.html">Making Movie Monad</a></li>
<li><a href="http://adit.io/posts/2013-04-15-making-a-website-with-haskell.html">Making a Website with Haskell <strong>(outdated)</strong></a></li>
</ul>
<h2 id="r">R:</h2>
<ul>
<li><a href="http://shiny.rstudio.com/tutorial/">Build Web Apps with Shiny</a></li>
<li><a href="https://towardsdatascience.com/build-a-cryptocurrency-trading-bot-with-r-1445c429e1b1">Build A Cryptocurrency Bot</a></li>
<li><a href="https://towardsdatascience.com/association-rule-mining-in-r-ddf2d044ae50">Learn Associate Rule Mining in R</a></li>
</ul>
<h2 id="rust">Rust:</h2>
<ul>
<li>A Simple Web App in Rust
<ul>
<li><a href="http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-1/">Part 1</a></li>
<li><a href="http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2a/">Part 2a</a></li>
<li><a href="http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2b/">Part 2b</a></li>
</ul>
</li>
<li><a href="https://os.phil-opp.com/">Write an OS in pure Rust</a></li>
<li><a href="https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html">Build a browser engine in Rust</a></li>
<li><a href="http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/">Write a Microservice in Rust</a></li>
<li><a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html">Learning Rust with Too Many Linked Lists</a></li>
<li>Rust in Detail: Writing Scalable Chat Service from Scratch
<ul>
<li><a href="https://nbaksalyar.github.io/2015/07/10/writing-chat-in-rust.html">Part 1: Implementing WebSocket. Introduction.</a></li>
<li><a href="https://nbaksalyar.github.io/2015/11/09/rust-in-detail-2.html">Part 2: Sending and Receiving Messages</a></li>
</ul>
</li>
<li><a href="https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/">Writing a Rust Roguelike for the Desktop and the Web</a></li>
<li><a href="http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/">Single Page Applications using Rust</a></li>
<li><a href="https://bugzmanov.github.io/nes_ebook/">Writing NES Emulator in Rust</a></li>
<li>Create a simulation of evolution using neural network and genetic algorithm, and compile the application to WebAssembly
<ul>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt1/">Part 1</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt2/">Part 2</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt3/">Part 3</a></li>
<li><a href="https://pwy.io/en/posts/learning-to-fly-pt4/">Part 4</a></li>
</ul>
</li>
</ul>
<h2 id="scala">Scala:</h2>
<ul>
<li><a href="https://www.freecodecamp.org/news/how-to-build-a-simple-actor-based-blockchain-aac1e996c177/">Simple actor-based blockchain</a></li>
<li><a href="https://rcoh.svbtle.com/no-magic-regular-expressions">No Magic: Regular Expressions</a></li>
</ul>
<h2 id="swift">Swift:</h2>
<ul>
<li><a href="https://www.hackingwithswift.com/read">Hacking with Swift - Learn Swift by doing 39 projects</a></li>
<li><a href="https://github.com/nicklockwood/RetroRampage">Retro first-person shooter from scratch</a></li>
</ul>
<h2 id="additional-resources">Additional Resources</h2>
<ul>
<li><a href="https://github.com/markerikson/react-redux-links">React Redux Links</a></li>
<li><a href="https://www.udemy.com/">Udemy.com</a></li>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://nodeschool.io/">Node School</a></li>
<li><a href="https://scotch.io/">ScotchIO</a></li>
<li><a href="http://www.exercism.io/">Exercism</a></li>
<li><a href="http://www.egghead.io/">Egghead.io</a></li>
<li><a href="http://mherman.org/">Michael Herman&rsquo;s Blog</a></li>
<li><a href="http://thinkster.io">Thinkster.io</a></li>
<li><a href="https://enlight.nyc/">Enlight</a></li>
<li><a href="https://hackclub.com/workshops/">Hack Club Workshops</a></li>
<li><a href="https://codecrafters.io/">CodeCrafters</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Data Structures and Algorithms for Coding Interview</title>
      <link>https://samirpaul1.github.io/blog/posts/data-structures-and-algorithms-for-coding-interview/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/data-structures-and-algorithms-for-coding-interview/</guid>
      <description>Data Structures and Algorithms for Coding Interview</description>
      <content:encoded><![CDATA[<blockquote>
<p>In this repository, I have stored solutions to various problems and concepts of <strong>Data Structures and Algorithms</strong> in Python3 in a structured manner.</p>
</blockquote>
<h3 id="topics-covered"><em><strong>Topics Covered</strong></em>:</h3>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming"><strong>Dynamic Programming</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/03_Sorting-Algorithms"><strong>Sorting Algorithms</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/04_LinkedList"><strong>LinkedList</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/05_Object-Oriented-Programming"><strong>Object-Oriented Programming</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/06_Binary-Trees"><strong>Binary Trees</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/07_Graph"><strong>Graph Algorithms</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/08_Heap"><strong>Heap</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/09_Matrix"><strong>Matrix</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/10_Trie"><strong>Trie</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/11_Binary-Search"><strong>Binary Search</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/12_Backtracking"><strong>Backtracking</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/13_Stack"><strong>Stack</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/14_Queue"><strong>Queue</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/15_Greedy"><strong>Greedy</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/16_String"><strong>String</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/17_Bit-Manipulation"><strong>Bit Manipulation</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/18_Array"><strong>Array</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/19_HashMap"><strong>HashMap</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/20_DFS-BFS"><strong>DFS BFS</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/21_Two-Pointers"><strong>Two Pointers</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/22_Math"><strong>Math</strong></a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/23_Recursion"><strong>Recursion</strong></a></li>
</ul>
<p>In various folders of the above topics, you can find questions and concepts related to that topic.</p>
<ul>
<li>
<p>In the <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming">Dynamic Programming</a> section, you can find all the questions covered and not covered in <a href="https://www.youtube.com/c/AdityaVermaTheProgrammingLord">Aditya Verma&rsquo;s</a> <a href="https://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go">dynamic programming playlist</a> folder-wise with my <a href="https://raw.githubusercontent.com/SamirPaul1/DSAlgo/main/02_Dynamic-Programming/Dynamic-Programming-NOTE.pdf">handwritten notes</a>.✍️</p>
</li>
<li>
<p>If you are preparing for an interview from <a href="https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/">Striver’s SDE Sheet</a> then the <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice"><strong>30-Days-SDE-Sheet-Practice</strong></a> will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.🎯</p>
</li>
<li>
<p>In the  <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet"><strong>Questions-Sheet</strong></a> directory, you can find questions asked by top product-based companies.</p>
</li>
<li>
<p>There is a collection of books and pdfs on various important computer science fundamentals in the <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs"><strong>BOOKS-and-PDFs</strong></a> directory.📚</p>
</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/repository-image-dsalgo-samirpaul1-leetcode-post.jpeg" alt="DSAlgo repo"  title="DSAlgo repository"  />
</p>
<p>I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.💻</p>
<div align="center">
<b>View this repository with improved user experience▶️<a href="https://samirpaul1.github.io/DSAlgo">https://samirpaul.in/DSAlgo</a></b>🚀
</div>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/samirpaul.in-DSAlgo-demo.png" alt="DSA Online VSCode"  title="DSA Online VSCode"  />
</p>
<p><strong>Things you can contribute to:</strong></p>
<ul>
<li>Update the existing solution with a better one (better complexity).</li>
<li>Add new questions and solutions in <code>Python3</code> to the respective directory.</li>
<li>Add new resources to <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs">BOOKS-and-PDFs</a> &amp; <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet">Questions-Sheet</a>.</li>
<li>Solve issues raised by other people or yourself.</li>
<li>Provide well-documented source code with detailed explanations.</li>
</ul>
<hr>
<h3 id="list-of-important-questions">List of Important Questions:✨</h3>
<p>The following list of questions was recommended by <a href="https://www.youtube.com/c/LoveBabbar1">Love Babbar</a> on this <a href="https://youtu.be/4iFALQ1ACdA">video</a>. I have documented all those questions here.✌️</p>
<table>
<thead>
<tr>
<th>Topic</th>
<th>Important DSA Questions</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Topic:</td>
<td>Problem:</td>
<td>Related Link</td>
</tr>
<tr>
<td>&lt;-&gt;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Array</td>
<td>Reverse the array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the maximum and minimum element in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the &ldquo;Kth&rdquo; max and min element of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Move all the negative elements to one side of the array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the Union and Intersection of the two sorted arrays.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Write a program to cyclically rotate an array by one.</td>
<td><a href="https://leetcode.com/problems/rotate-array/">https://leetcode.com/problems/rotate-array/</a></td>
</tr>
<tr>
<td>Array</td>
<td>find Largest sum contiguous Subarray [V. IMP]</td>
<td><a href="https://leetcode.com/problems/maximum-subarray/">https://leetcode.com/problems/maximum-subarray/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Minimise the maximum difference between heights [V.IMP]</td>
<td><a href="https://leetcode.com/problems/smallest-range-ii/">https://leetcode.com/problems/smallest-range-ii/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Minimum no. of Jumps to reach end of an array</td>
<td><a href="https://leetcode.com/problems/jump-game">https://leetcode.com/problems/jump-game</a></td>
</tr>
<tr>
<td>Array</td>
<td>find duplicate in an array of N+1 Integers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Merge 2 sorted arrays without using Extra space.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Kadane&rsquo;s Algorithm</td>
<td><a href="https://leetcode.com/problems/maximum-subarray/">https://leetcode.com/problems/maximum-subarray/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Merge Intervals</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Next Permutation</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Count Inversion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Best time to buy and Sell stock</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>find all pairs on integer array whose sum is equal to given number</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>find common elements In 3 sorted arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Rearrange the array in alternating positive and negative items with O(1) extra space</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find if there is any subarray with sum equal to 0</td>
<td><a href="https://leetcode.com/problems/subarray-sum-equals-k/">https://leetcode.com/problems/subarray-sum-equals-k/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Find factorial of a large number</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>find maximum product subarray</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find longest coinsecutive subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Given an array of size n and a number k, fin all elements that appear more than &quot; n/k &quot; times.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Maximum profit by buying and selling a share atmost twice</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find whether an array is a subset of another array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the triplet that sum to a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Trapping Rain water problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Chocolate Distribution problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Smallest Subarray with sum greater than a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Three way partitioning of an array around a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Minimum swaps required bring elements less equal K together</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Minimum no. of operations required to make an array palindrome</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Median of 2 sorted arrays of equal size</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Median of 2 sorted arrays of different size</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Subarray Sums Divisible by K</td>
<td></td>
</tr>
<tr>
<td>Array</td>
<td>Continuous Subarray Sum</td>
<td></td>
</tr>
<tr>
<td>&lt;-&gt;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;-&gt;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Matrix</td>
<td>Spiral traversal on a Matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Search an element in a matriix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Find median in a row wise sorted matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Find row with maximum no. of 1&rsquo;s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Print elements in sorted order using row-column wise sorted matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Largest Rectangle in Histogram</td>
<td></td>
</tr>
<tr>
<td>Matrix</td>
<td>Maximum size rectangle</td>
<td><a href="https://practice.geeksforgeeks.org/problems/max-rectangle/1">https://practice.geeksforgeeks.org/problems/max-rectangle/1</a></td>
</tr>
<tr>
<td>Matrix</td>
<td>Find a specific pair in matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Rotate matrix by 90 degrees</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Kth smallest element in a row-cpumn wise sorted matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Common elements in all rows of a given matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Reverse a String</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Check whether a String is Palindrome or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find Duplicate characters in a string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Why strings are immutable in Java?</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a Code to check whether one string is a rotation of another</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a Program to check whether a string is a valid shuffle of two strings or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Count and Say problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find Longest Recurring Subsequence in String</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Print all Subsequences of a string.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Print all the permutations of the given string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Split the Binary string into two substring with equal 0’s and 1’s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Word Wrap Problem [VERY IMP].</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>EDIT Distance [Very Imp]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find next greater number with same set of digits. [Very Very IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Balanced Parenthesis problem.[Imp]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Word break Problem[ Very Imp]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Rabin Karp Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>KMP Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Convert a Sentence into its equivalent mobile numeric keypad sequence.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Minimum number of bracket reversals needed to make an expression balanced.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Count All Palindromic Subsequence in a given String.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Count of number of given string in 2D character array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Search a Word in a 2D Grid of characters.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Boyer Moore Algorithm for Pattern Searching.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Converting Roman Numerals to Decimal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Longest Common Prefix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Number of flips to make binary string alternate</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find the first repeated word in string.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Minimum number of swaps for bracket balancing.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find the longest common subsequence between two strings.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Program to generate all possible valid IP addresses from given  string.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a program tofind the smallest window that contains all characters of string itself.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Rearrange characters in a string such that no two adjacent are same</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Minimum characters to be added at front to make string palindrome</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Given a sequence of words, print all anagrams together</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find the smallest window in a string containing all characters of another string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Recursively remove all adjacent duplicates</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>String matching where one string contains wildcard characters</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Function to find Number of customers who could not get a computer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Transform One String to Another using Minimum Number of Given Operation</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Check if two given strings are isomorphic to each other</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Recursively print all sentences that can be formed from list of word lists</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find first and last positions of an element in a sorted array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find a Fixed Point (Value equal to index) in a given array</td>
<td><a href="https://leetcode.com/problems/find-pivot-index/">https://leetcode.com/problems/find-pivot-index/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Search in a rotated sorted array</td>
<td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>square root of an integer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Maximum and minimum of an array using minimum number of comparisons</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Optimum location of point to minimize total distance</td>
<td><a href="https://leetcode.com/problems/best-meeting-point/">https://leetcode.com/problems/best-meeting-point/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find the repeating and the missing</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>find majority element</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Searching in an array where adjacent differ by at most k</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>find a pair with a given difference</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>find four elements that sum to a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>maximum sum such that no 2 elements are adjacent</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Count triplet with sum smaller than a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>merge 2 sorted arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>print all subarrays with 0 sum</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Product array Puzzle</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Sort array according to count of set bits</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>minimum no. of swaps required to sort the array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Bishu and Soldiers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Rasta and Kheshtak</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Kth smallest number again</td>
<td>Using Min Heap</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find pivot element in a sorted array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>K-th Element of Two Sorted Arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Aggressive cows</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Book Allocation Problem</td>
<td><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/">https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>EKOSPOJ:</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Job Scheduling Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Missing Number in AP</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Smallest number with atleastn trailing zeroes infactorial</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Painters Partition Problem:</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>ROTI-Prata SPOJ</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>DoubleHelix SPOJ</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Subset Sums</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Findthe inversion count</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Implement Merge-sort in-place</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Partitioning and Sorting Arrays with Many Repeated Entries</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a Program to reverse the Linked List. (Both Iterative and recursive)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Reverse a Linked List in group of Given Size. [Very Imp]</td>
<td><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a program to Detect loop in a linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a program to Delete loop in a linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find the starting point of the loop.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Remove Duplicates in a sorted Linked List.</td>
<td></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Remove Duplicates from Sorted List II</td>
<td></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Remove Duplicates in a Un-sorted Linked List.</td>
<td></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a Program to Move the last element to Front in a Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Add “1” to a number represented as a Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Add two numbers represented by linked lists.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Intersection of two Sorted Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Intersection Point of two Linked Lists.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Merge Sort For Linked lists.[Very Important]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Quicksort for Linked Lists.[Very Important]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find the middle Element of a linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Check if a linked list is a circular linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Split a Circular linked list into two halves.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a Program to check whether the Singly Linked list is a palindrome or not.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Deletion from a Circular Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Reverse a Doubly Linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find pairs with a given sum in a DLL.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Count triplets in a sorted DLL whose sum is equal to given value “X”.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Sort a “k”sorted Doubly Linked list.[Very IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Rotate DoublyLinked list by N nodes.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Rotate a Doubly Linked list in group of Given Size.[Very IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Can we reverse a linked list in less than O(n) ?</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Flatten a Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Sort a LL of 0&rsquo;s, 1&rsquo;s and 2&rsquo;s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Clone a linked list with next and random pointer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Merge K sorted Linked list</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Multiply 2 no. represented by LL</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Delete nodes which have a greater value on right side</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Segregate even and odd nodes in a Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Program for n’th node from the end of a Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find the first non-repeating character from a stream of characters</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>level order traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Reverse Level Order traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Height of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Diameter of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Mirror of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Inorder Traversal of a tree both using recursion and Iteration</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Preorder Traversal of a tree both using recursion and Iteration</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Postorder Traversal of a tree both using recursion and Iteration</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Left View of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Right View of Tree</td>
<td><a href="https://leetcode.com/problems/binary-tree-right-side-view/">https://leetcode.com/problems/binary-tree-right-side-view/</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Top View of a tree</td>
<td><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/">https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Bottom View of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Zig-Zag traversal of a binary tree</td>
<td><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if a tree is balanced or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Diagnol Traversal of a Binary tree</td>
<td><a href="https://www.youtube.com/watch?v=e9ZGxH1y_PE">https://www.youtube.com/watch?v=e9ZGxH1y_PE</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Boundary traversal of a Binary tree</td>
<td><a href="https://www.youtube.com/watch?v=0ca1nvR0be4">https://www.youtube.com/watch?v=0ca1nvR0be4</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Construct Binary Tree from String with Bracket Representation</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Convert Binary tree into Doubly Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Convert Binary tree into Sum tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Construct Binary tree from Inorder and preorder traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find minimum swaps required to convert a Binary tree into BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if Binary tree is Sum tree or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if all leaf nodes are at same level or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if 2 trees are mirror or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Sum of Nodes on the Longest path from root to leaf node</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if given graph is tree or not.  [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find Largest subtree sum in a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Maximum Sum of nodes in Binary tree such that no two are adjacent</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Print all &ldquo;K&rdquo; Sum paths in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find LCA in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find distance between 2 nodes in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Kth Ancestor of node in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find all Duplicate subtrees in a Binary tree [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Tree Isomorphism Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Copy List with Random Pointer</td>
<td></td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Fina a value in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Deletion of a node in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find min and max value in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find inorder successor and inorder predecessor in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check if a tree is a BST or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Populate Inorder successor of all nodes</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find LCA  of 2 nodes in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Construct BST from preorder traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Convert Binary tree into BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Convert a normal BST into a Balanced BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Merge two BST [ V.V.V&gt;IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find Kth largest element in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find Kth smallest element in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Count pairs from 2 BST whose sum is equal to given value &ldquo;X&rdquo;</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find the median of BST in O(n) time and O(1) space</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Count BST ndoes that lie in a given range</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Replace every element with the least greater element on its right</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Given &ldquo;n&rdquo; appointments, find the conflicting appointments</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check preorder is valid or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check whether BST contains Dead end</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Largest BST in a Binary Tree [ V.V.V.V.V IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Flatten BST to sorted list</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check Completeness of a Binary Tree</td>
<td></td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Non-overlapping Intervals</td>
<td></td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Largest BST in Binary Tree</td>
<td><a href="https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/">https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/</a></td>
</tr>
<tr>
<td>Greedy</td>
<td>Activity Selection Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Job SequencingProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Huffman Coding</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Water Connection Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Fractional Knapsack Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Greedy Algorithm to find Minimum number of Coins</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum trains for which stoppage can be provided</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum Platforms Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Buy Maximum Stocks if i stocks can be bought on i-th day</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find the minimum and maximum amount to buy all N candies</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimize Cash Flow among a given set of friends who have borrowed money from each other</td>
<td>Optimal Account Balancing</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum Cost to cut a board into squares</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Number of Islands</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find maximum meetings in one room</td>
<td><a href="https://www.lintcode.com/problem/919">https://www.lintcode.com/problem/919</a></td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum product subset of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximize array sum after K negations</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximize the sum of arr[i]*i</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum sum of absolute difference of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximize sum of consecutive differences in a circular array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum sum of absolute difference of pairs of two arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Program for Shortest Job First (or SJF) CPU Scheduling</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Program for Least Recently Used (LRU) Page Replacement algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Smallest subset with sum greater than all other elements</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Chocolate Distribution Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>DEFKIN -Defense of a Kingdom</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>DIEHARD -DIE HARD</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>GERGOVIA -Wine trading in Gergovia</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Picking Up Chicks</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>CHOCOLA –Chocolate</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>ARRANGE -Arranging Amplifiers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>K Centers Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum Cost of ropes</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find smallest number with given number of digits and sum of digits</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Rearrange characters in a string such that no two adjacent are same</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find maximum sum possible equal sum of three stacks</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum Sub-String after at most K changes</td>
<td><a href="https://leetcode.com/problems/maximize-the-confusion-of-an-exam/">https://leetcode.com/problems/maximize-the-confusion-of-an-exam/</a></td>
</tr>
<tr>
<td>BackTracking</td>
<td>Rat in a maze Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Printing all solutions in N-Queen Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Word Break Problem using Backtracking</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Remove Invalid Parentheses</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Sudoku Solver</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>m Coloring Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Print all palindromic partitions of a string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Subset Sum Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>The Knight’s tour problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Tug of War</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find shortest safe route in a path with landmines</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Combinational Sum</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find Maximum number possible by doing at-most K swaps</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Print all permutations of a string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find if there is a path of more than k length from a source</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Longest Possible Route in a Matrix with Hurdles</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Print all possible paths from top left to bottom right of a mXn matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Partition of a set intoK subsets with equal sum</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find the K-th Permutation Sequence of first N natural numbers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Stack from Scratch</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Queue from Scratch</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement 2 stack in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>find the middle element of a stack</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement &ldquo;N&rdquo; stacks in an Array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Check the expression has valid or Balanced parenthesis or not.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse a String using Stack</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Design a Stack that supports getMin() in O(1) time and O(1) extra space.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Find the next Greater element</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>The celebrity Problem</td>
<td><a href="https://www.youtube.com/watch?v=CiiXBvrX-5A">https://www.youtube.com/watch?v=CiiXBvrX-5A</a></td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Arithmetic Expression evaluation</td>
<td><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/">https://leetcode.com/problems/evaluate-reverse-polish-notation/</a></td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Evaluation of Postfix expression</td>
<td><a href="https://www.youtube.com/watch?v=422Q_yx2yA8">https://www.youtube.com/watch?v=422Q_yx2yA8</a></td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement a method to insert an element at its bottom without using any other data structure.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse a stack using recursion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Sort a Stack using recursion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Merge Overlapping Intervals</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Largest rectangular Area in Histogram</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Length of the Longest Valid Substring</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Expression contains redundant bracket or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Stack using Queue</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Stack using Deque</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Stack Permutations (Check if an array is stack permutation of other)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Queue using Stack</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement &ldquo;n&rdquo; queue in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement a Circular queue</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>LRU Cache Implementationa</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse a Queue using recursion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse the first “K” elements of a queue</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Interleave the first half of the queue with second half</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Find the first circular tour that visits all Petrol Pumps</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Minimum time required to rot all oranges</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Distance of nearest cell having 1 in a binary matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>First negative integer in every window of size “k”</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Check if all levels of two trees are anagrams or not.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Sum of minimum and maximum elements of all subarrays of size “k”.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Minimum sum of squares of character counts in a given string after removing “k” characters.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Queue based approach or first non-repeating character in a stream.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Next Smaller Element</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Implement a Maxheap/MinHeap using arrays and recursion.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Sort an Array using heap. (HeapSort)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Maximum of all subarrays of size k.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>“k” largest element in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Kth smallest and largest element in an unsorted array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge “K” sorted arrays. [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge 2 Binary Max Heaps</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Kth largest sum continuous subarrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Leetcode- reorganize strings</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge “K” Sorted Linked Lists [V.IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Smallest range in “K” Lists</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Median in a stream of Integers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Check if a Binary Tree is Heap</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Connect “n” ropes with minimum cost</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Convert BST to Min Heap</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Convert min heap to max heap</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Rearrange characters in a string such that no two adjacent are same.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Minimum sum of two numbers formed from digits of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Create a Graph, print it</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement BFS algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement DFS Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Detect Cycle in Directed Graph using BFS/DFS Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Detect Cycle in UnDirected Graph using BFS/DFS Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Search in a Maze</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimum Step by Knight</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>flood fill algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Clone a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Making wired Connections</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>word Ladder</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Dijkstra algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Topological Sort</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimum time taken by each job to be completed given by a Directed Acyclic Graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find whether it is possible to finish all tasks or not from given dependencies</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find the no. of Isalnds</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Given a sorted Dictionary of an Alien Language, find order of characters</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Kruksal’sAlgorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Prim’s Algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Total no. of Spanning tree in a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Bellman Ford Algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Floyd warshallAlgorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Travelling Salesman Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Graph ColouringProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Snake and Ladders Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find bridge in a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Count Strongly connected Components(Kosaraju Algo)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Check whether a graph is Bipartite or Not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Detect Negative cycle in a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Longest path in a Directed Acyclic Graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Journey to the Moon</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Cheapest Flights Within K Stops</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Oliver and the Game</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Water Jug problem using BFS</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Water Jug problem using BFS</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find if there is a path of more thank length from a source</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>M-ColouringProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimum edges to reverse o make path from source to destination</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Paths to travel each nodes using each edge(Seven Bridges)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Vertex Cover Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Chinese Postman or Route Inspection</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Number of Triangles in a Directed and Undirected Graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimise the cashflow among a given set of friends who have borrowed money from each other</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Two Clique Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Construct a trie from scratch</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Find shortest unique prefix for every word in a given list</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Word Break Problem</td>
<td>(Trie solution)</td>
</tr>
<tr>
<td>Trie</td>
<td>Given a sequence of words, print all anagrams together</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Implement a Phone Directory</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Print unique rows in a given boolean matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Coin ChangeProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Knapsack Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Binomial CoefficientProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Permutation CoefficientProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Program for nth Catalan Number</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Matrix Chain Multiplication</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Edit Distance</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Subset Sum Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Friends Pairing Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Gold Mine Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Assembly Line SchedulingProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Painting the Fenceproblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximize The Cut Segments</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Common Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Repeated Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Increasing Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Space Optimized Solution of LCS</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>LCS (Longest Common Subsequence) of three strings</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum Sum Increasing Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count all subsequences having product less than K</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest subsequence such that difference between adjacent is one</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum subsequence sum such that no three are consecutive</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Egg Dropping Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum Length Chain of Pairs</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum size square sub-matrix with all 1s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum sum of pairs with specific difference</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Min Cost PathProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum difference of zeros and ones in binary string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Minimum number of jumps to reach end</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Minimum cost to fill given weight in a bag</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Minimum removals from array to make max –min &lt;= K</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Common Substring</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count number of ways to reacha given score in a game</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count Balanced Binary Trees of Height h</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>LargestSum Contiguous Subarray [V&gt;V&gt;V&gt;V IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Smallest sum contiguous subarray</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Unbounded Knapsack (Repetition of items allowed)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Word Break Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Largest Independent Set Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Partition problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Palindromic Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count All Palindromic Subsequence in a given String</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Palindromic Substring</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest alternating subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Weighted Job Scheduling</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Coin game winner where every player has three choices</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum profit by buying and selling a share at most twice [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Optimal Strategy for a Game</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Optimal Binary Search Tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Palindrome PartitioningProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Word Wrap Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Mobile Numeric Keypad Problem [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Boolean Parenthesization Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Largest rectangular sub-matrix whose sum is 0</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Largest area rectangular sub-matrix with equal number of 1’s and 0’s [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum sum rectangle in a 2D matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum profit by buying and selling a share at most k times</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Find if a string is interleaved of two other strings</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum Length of Pair Chain</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Partition Equal Subset Sum</td>
<td><a href="https://leetcode.com/submissions/detail/561942165/">https://leetcode.com/submissions/detail/561942165/</a></td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Target Sum</td>
<td></td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Count set bits in an integer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Find the two non-repeating elements in an array of repeating elements</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Count number of bits to be flipped to convert A to B</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Count total set bits in all numbers from 1 to n</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Program to find whether a no is power of two</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Find position of the only set bit</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Copy set bits in a range</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Divide two integers without using multiplication, division and mod operator</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Calculate square of a number without using *, / and pow()</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Power Set</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Moore voting algorithm</td>
<td>Majority Element</td>
<td><a href="https://www.youtube.com/watch?v=n5QY3x_GNDg">https://www.youtube.com/watch?v=n5QY3x_GNDg</a></td>
</tr>
<tr>
<td>Moore voting algorithm</td>
<td>Majority Element II</td>
<td><a href="https://www.youtube.com/watch?v=yDbkQd9t2ig">https://www.youtube.com/watch?v=yDbkQd9t2ig</a></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="30-days-interview-preparation-planhttpsgithubcomsamirpaul1dsalgotreemain30-days-sde-sheet-practice"><a href="https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice">30 Days Interview Preparation Plan</a>🎯</h3>
<p><b></b>
Originally the below sheet was prepared by <a href="https://www.youtube.com/c/takeUforward">Raj Vikramaditya</a> A.K.A <a href="https://www.youtube.com/channel/UCvEKHATlVq84hm1jduTYm8g">Striver</a>. I have documented this sheet here in markdown.</p>
<p><b> </b></p>
<p>Day1: (Arrays)</p>
<ol>
<li>
<p>Sort an array of 0’s 1’s 2’s without using extra space or sorting algo</p>
</li>
<li>
<p>Repeat and Missing Number</p>
</li>
<li>
<p>Merge two sorted Arrays without extra space</p>
</li>
<li>
<p>Kadane’s Algorithm</p>
</li>
<li>
<p>Merge Overlapping Subintervals</p>
</li>
<li>
<p>Find the duplicate in an array of N+1 integers.</p>
</li>
</ol>
<p>Day2: (Arrays)</p>
<ol>
<li>
<p>Set Matrix Zeros</p>
</li>
<li>
<p>Pascal Triangle</p>
</li>
<li>
<p>Next Permutation</p>
</li>
<li>
<p>Inversion of Array (Using Merge Sort)</p>
</li>
<li>
<p>Stock Buy and Sell</p>
</li>
<li>
<p>Ro tate Matrix</p>
</li>
</ol>
<p>Day3: (Arrays/maths)</p>
<ol>
<li>
<p>Search in a 2D matrix</p>
</li>
<li>
<p>Pow(X,n)</p>
</li>
<li>
<p>Majority Element (&gt;N/2 times)</p>
</li>
<li>
<p>Majority Element (&gt;N/3 times)</p>
</li>
<li>
<p>Grid Unique Paths</p>
</li>
<li>
<p>Reverse Pairs (Leetcode)</p>
</li>
<li>
<p>Go through Puzzles from GFG** (Search on own)</p>
</li>
</ol>
<p>Day4: (Hashing)</p>
<ol>
<li>
<p>2 Sum problem</p>
</li>
<li>
<p>4 Sum problem</p>
</li>
<li>
<p>Longest Consecutive Sequence</p>
</li>
<li>
<p>Largest Subarray with 0 sum</p>
</li>
<li>
<p>Count number of subarrays with given XOR (this clearsa lot of problems)</p>
</li>
<li>
<p>Longest substring without repeat</p>
</li>
</ol>
<p>Day5: (LinkedList)</p>
<ol>
<li>
<p>Reverse a LinkedList</p>
</li>
<li>
<p>Find middle of LinkedList</p>
</li>
<li>
<p>Merge two sorted Linked List</p>
</li>
<li>
<p>Remove N-th node from back of LinkedList</p>
</li>
<li>
<p>Delete a given Node when a node is given. (0(1) solution)</p>
</li>
<li>
<p>Add two numbers as LinkedList</p>
</li>
</ol>
<p>Day6:</p>
<ol>
<li>
<p>Find intersection point of Y LinkedList</p>
</li>
<li>
<p>Detect a cycle in Linked List</p>
</li>
<li>
<p>Reverse a LinkedList in groups of size k</p>
</li>
<li>
<p>Check if a LinkedList is palindrome or not.</p>
</li>
<li>
<p>Find the starting point of the Loop of LinkedList</p>
</li>
<li>
<p>Flattening of a LinkedList**</p>
</li>
<li>
<p>Rotate a LinkedList</p>
</li>
</ol>
<p>Day7: (2-pointer)</p>
<ol>
<li>
<p>Clone a Linked List with random and next pointer</p>
</li>
<li>
<p>3 sum</p>
</li>
<li>
<p>Trapping rainwater</p>
</li>
<li>
<p>Remove Duplicate from Sorted array</p>
</li>
<li>
<p>Max consecutive ones</p>
</li>
</ol>
<p>Day8: (Greedy)</p>
<ol>
<li>
<p>N meeting in one room</p>
</li>
<li>
<p>Minimum number of platforms required for a railway</p>
</li>
<li>
<p>Job sequencing Problem</p>
</li>
<li>
<p>Fractional Knapsack Problem</p>
</li>
<li>
<p>Greedy algorithm to find minimum number of coins</p>
</li>
<li>
<p>Activity Selection (it i</p>
</li>
<li>
<p>s same as N meeting in one room)</p>
</li>
</ol>
<p>Day9 (Recursion):</p>
<ol>
<li>
<p>Subset Sums</p>
</li>
<li>
<p>Subset-II</p>
</li>
<li>
<p>Combination sum-</p>
</li>
<li>
<p>Combination sum</p>
</li>
<li>
<p>Palindrome Partitioning</p>
</li>
<li>
<p>K-th permutation Sequence</p>
</li>
</ol>
<p>Day10: (Recursion and Backtracking)</p>
<ol>
<li>
<p>Print all Permutations of a string/array</p>
</li>
<li>
<p>N queens Problem</p>
</li>
<li>
<p>SudokuSolver</p>
</li>
<li>
<p>M coloring Problem</p>
</li>
<li>
<p>Rat in a Maze</p>
</li>
</ol>
<p>6.Word Break -&gt; print all ways</p>
<p>Day11 : (Binary Search)</p>
<ol>
<li>
<p>N-th root of an integer (use binary search) (square root, cube root, ..)</p>
</li>
<li>
<p>Matrix Median</p>
</li>
<li>
<p>Find the element that appears once in sorted array, and rest element appears twice (Binary search)</p>
</li>
<li>
<p>Search element in a sorted and rotated array/ find pivot where it is rotated**</p>
</li>
<li>
<p>Median of 2 sorted arrays</p>
</li>
<li>
<p>K-th element of two sorted arrays</p>
</li>
<li>
<p>Allocate Minimum Number of Pages</p>
</li>
<li>
<p>Aggressive Cows</p>
</li>
</ol>
<p>Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might
ask)</p>
<ol>
<li>Check if a number if a power of 2 or not in O(1)</li>
<li>Count total set bits</li>
<li>Divide Integers without / operator</li>
<li>Power Set (this is very important)</li>
<li>Find MSB in o(1)</li>
<li>Find square of a number without using multiplication or division operators.</li>
</ol>
<p>Day13: (Stack and Queue)</p>
<ol>
<li>
<p>Implement Stack Using Arrays</p>
</li>
<li>
<p>Implement Queue Using Arrays</p>
</li>
<li>
<p>Implement Stack using Queue (using single queue)</p>
</li>
<li>
<p>Implement Queue using Stack (0(1) amortised method)</p>
</li>
<li>
<p>Check for balanced parentheses</p>
</li>
<li>
<p>Next Greater Element</p>
</li>
<li>
<p>Sort a Stack</p>
</li>
</ol>
<p>Day14:</p>
<ol>
<li>
<p>Next Smaller Element
Similar to previous question next greater element, just do pop the greater elements
out ..</p>
</li>
<li>
<p>LRU cache (vvvv. imp)</p>
</li>
<li>
<p>LFU Cache (Hard, can be ignored)</p>
</li>
</ol>
<p>4.Largest rectangle in histogram (Do the one pass solution)</p>
<p><a href="https://www.youtube.com/watch?v=X0X6G-eWgQ8&amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;index=">Two pass</a></p>
<p><a href="https://www.youtube.com/watch?v=jC_cWLy7jSI&amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;index=">One pass</a></p>
<ol start="5">
<li>Sliding Window maximum <a href="https://www.youtube.com/watch?v=CZQGRp93K4k&amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;index=">video</a></li>
<li>Implement Min Stack</li>
<li>Rotten Orange (Using BFS)</li>
<li>Stock Span Problem</li>
<li>Find maximum of minimums of every window size
10.The Celebrity Problem</li>
</ol>
<p>Day15: (String)</p>
<ol>
<li>Reverse Words in a String</li>
<li>Longest Palindrome in a string</li>
<li>Roman Number to Integer and vice versa</li>
<li>Implement ATOI/STRSTR</li>
<li>Longest Common Prefix</li>
<li>Rabin Karp</li>
</ol>
<p>Day16: (String)</p>
<ol>
<li>Prefix Function/Z-Function</li>
<li>KMP algo / LPS(pi) array</li>
<li>Minimum characters needed to be inserted in the beginning to make it palindromic.</li>
<li>Check for Anagrams</li>
<li>Count and Say</li>
<li>Compare version numbers</li>
</ol>
<p>Day17: (Binary Tree)</p>
<ol>
<li>Inorder Traversal (with recursion and without recursion)</li>
<li>Preorder Traversal (with recursion and without recursion)</li>
<li>Postorder Traversal (with recursion and without recursion)</li>
<li>LeftView Of Binary Tree</li>
<li>Bottom View of Binary Tree</li>
<li>Top View of Binary Tree**</li>
</ol>
<p>Day18: (Binary Tree)</p>
<ol>
<li>Level order Traversal / Level order traversal in spiral form</li>
<li>Height of a Binary Tree</li>
<li>Diameter of Binary Tree</li>
<li>Check if Binary tree is height balanced or not</li>
<li>LCA in Binary Tree</li>
<li>Check if two trees are identical or not**</li>
</ol>
<p>Day 19: (Binary Tree)</p>
<ol>
<li>Maximum path sum</li>
<li>Construct Binary Tree from inorder and preorder</li>
<li>Construct Binary Tree from Inorder and Postorder</li>
<li>Symmetric Binary Tree</li>
<li>Flatten Binary Tree to LinkedList</li>
<li>Check if Binary Tree is mirror of itself or not</li>
</ol>
<p>Day 20: (Binary Search Tree)</p>
<ol>
<li>Populate Next Right pointers of Tree</li>
<li>Search given Key in BST</li>
<li>Construct BST from given keys.</li>
<li>Check is a BT is BST or not</li>
<li>Find LCA of two nodes in BST</li>
<li>Find the inorder predecessor/successor of a given Key in BST.**</li>
</ol>
<p>Day21: (BinarySearchTree)</p>
<ol>
<li>Floor and Ceil in a BST</li>
<li>Find K-th smallest and K-th largest element in BST (2 different Questions)</li>
<li>Find a pair with a given sum in BST</li>
<li>BST iterator</li>
<li>Size of the largest BST in a Binary Tree</li>
<li>Serialize and deserialize Binary Tree</li>
</ol>
<p>Day22: (Mixed Questions)</p>
<ol>
<li>Binary Tree to Double Linked List</li>
<li>Find median in a stream of running integers.</li>
<li>K-th largest element in a stream.</li>
<li>Distinct numbers in Window.</li>
<li>K-th largest element in an unsorted array.</li>
<li>Flood-fill Algorithm</li>
</ol>
<p>Day23: (Graph) <a href="https://www.youtube.com/watch?v=LCrovIMurxY&amp;list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&amp;index=">Theory</a></p>
<ol>
<li>Clone a graph (Not that easy as it looks)</li>
<li>DFS</li>
<li>BFS</li>
<li>Detect A cycle in Undirected Graph/Directed Graph</li>
<li>Topo Sort</li>
<li>Number of islands (Do in Grid and Graph both)</li>
<li>Bipartite Check</li>
</ol>
<p>Day24: (Graph) <a href="https://www.youtube.com/watch?v=LCrovIMurxY&amp;list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&amp;index=">Theory</a></p>
<ol>
<li>SCC(using KosaRaju’s algo)</li>
<li>Djisktra’s Algorithm</li>
<li>Bellman Ford Algo</li>
<li>Floyd Warshall Algorithm</li>
<li>MST using Prim’s Algo</li>
<li>MST using Kruskal’s Algo</li>
</ol>
<p>Day25: (Dynamic Programming)</p>
<ol>
<li>Max Product Subarray</li>
<li>Longest Increasing Subsequence</li>
<li>Longest Common Subsequence</li>
<li>0-1 Knapsack</li>
<li>Edit Distance</li>
<li>Maximum sum increasing subsequence</li>
<li>Matrix Chain Multiplication</li>
</ol>
<p>Day26: (DP)</p>
<ol>
<li>Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find
the maximum path)</li>
<li>Coin change</li>
<li>Subset Sum</li>
<li>Rod Cutting</li>
<li>Egg Dropping</li>
<li>Word Break</li>
<li>Palindrome Partitioning (MCM Variation)</li>
<li>Maximum profit in Job scheduling
<a href="https://docs.google.com/document/d/1sQlRDw6--HwyxeFL7b4kBsOG-Tz7rXMbpWNnfvJErA4/edit">For core revision&lt;/&gt;</a></li>
</ol>
<p>Day27:</p>
<ol>
<li>Revise OS notes that you would have made during your sem</li>
<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>
</ol>
<p>Day28:</p>
<ol>
<li>Revise DBMS notes that you would have made during your semesters.</li>
<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>
</ol>
<p>Day29:</p>
<ol>
<li>Revise CN notes, that you would have made during your sem.</li>
<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>
</ol>
<p>Day30:</p>
<ol>
<li>Make a note of how will your represent your projects, and prepare all questions
related to tech which you have used in your projects. Prepare a note which you can
say for 3-10 minutes when he asks you that say something about the project.</li>
</ol>
<hr>
<h3 id="system-design--concepts">System Design – Concepts📚</h3>
<ol>
<li>
<p><a href="https://github.com/SamirPaul1/system-design-primer">https://github.com/SamirPaul1/system-design-primer</a></p>
</li>
<li>
<p><a href="https://www.freecodecamp.org/news/systems-design-for-interviews/">https://www.freecodecamp.org/news/systems-design-for-interviews/</a></p>
</li>
<li>
<p><a href="https://github.com/shashank88/system_design">https://github.com/shashank88/system_design</a></p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Leetcode Solutions Cheatsheet</title>
      <link>https://samirpaul1.github.io/blog/posts/leetcode-solutions-cheatsheet/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/leetcode-solutions-cheatsheet/</guid>
      <description>Leetcode Solutions Cheatsheet</description>
      <content:encoded><![CDATA[<h2 id="quick-access-links">Quick Access Links</h2>
<h3 id="leetcode">LeetCode</h3>
<ul>
<li>LeetCode - CheatSheet
<ul>
<li>Getting Started
<ul>
<li>Prerequisites</li>
</ul>
</li>
<li>Built With</li>
<li>Authors</li>
<li>Acknowledgments</li>
<li><a href="#quick-access-links">Quick Access Links</a>
<ul>
<li><a href="#leetcode">LeetCode</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#1-two-sum">1-Two Sum</a>
<ul>
<li><a href="#brute-force">Brute Force</a></li>
<li><a href="#one-pass-hash-table">One Pass Hash Table</a></li>
</ul>
</li>
<li><a href="#2-add-two-numbers">2-Add Two Numbers</a>
<ul>
<li><a href="#elementary-math-solution">Elementary Math Solution</a></li>
</ul>
</li>
<li><a href="#3-substring-no-repeat">3-Substring No Repeat</a>
<ul>
<li><a href="#brute-force-1">Brute Force</a></li>
<li><a href="#sliding-window">Sliding Window</a></li>
<li><a href="#sliding-window-optimized">Sliding Window Optimized</a></li>
</ul>
</li>
<li><a href="#4-median-of-two-sorted-arrays">4-Median of Two Sorted Arrays</a>
<ul>
<li><a href="#recursive-approach">Recursive Approach</a></li>
</ul>
</li>
<li><a href="#5-longest-palindromic-substring">5-Longest Palindromic Substring</a>
<ul>
<li><a href="#longest-common-substring">Longest Common Substring</a></li>
<li><a href="#brute-force-2">Brute Force</a></li>
<li><a href="#dynamic-programming">Dynamic Programming</a></li>
<li><a href="#expand-around-center">Expand Around Center</a></li>
<li><a href="#manachers-algorithm">Manacher&rsquo;s Algorithm</a></li>
</ul>
</li>
<li><a href="#6-zigzag-conversion">6-ZigZag Conversion</a>
<ul>
<li><a href="#sort-by-row">Sort by Row</a></li>
<li><a href="#visit-by-row">Visit by Row</a></li>
</ul>
</li>
<li><a href="#7-reverse-integer">7-Reverse Integer</a>
<ul>
<li><a href="#pop-and-push-digits-and-check-before-overflow">Pop and Push Digits and Check Before Overflow</a></li>
</ul>
</li>
<li><a href="#8-string-to-integer-atoi">8-String to Integer (atoi)</a>
<ul>
<li><a href="#ascii-conversion">ASCII Conversion</a></li>
</ul>
</li>
<li><a href="#9-palindrome-number">9-Palindrome Number</a>
<ul>
<li><a href="#revert-half-of-the-number">Revert Half of the Number</a></li>
</ul>
</li>
<li><a href="#10-regular-expression-matching">10-Regular Expression Matching</a>
<ul>
<li><a href="#recursion">Recursion</a></li>
<li><a href="#dynamic-programming-1">Dynamic Programming</a></li>
<li><a href="#non-recursive">Non-Recursive</a></li>
</ul>
</li>
<li><a href="#11-container-with-the-most-water">11-Container with the Most Water</a>
<ul>
<li><a href="#brute-force-3">Brute Force</a></li>
<li><a href="#two-pointer-approach">Two Pointer Approach</a></li>
</ul>
</li>
<li><a href="#12-integer-to-roman">12-Integer To Roman</a>
<ul>
<li><a href="#string-array">String Array</a></li>
</ul>
</li>
<li><a href="#13-roman-to-integer">13-Roman to Integer</a>
<ul>
<li><a href="#character-array">Character Array</a></li>
</ul>
</li>
<li><a href="#14-longest-common-prefix">14-Longest Common Prefix</a>
<ul>
<li><a href="#horizontal-scanning">Horizontal Scanning</a></li>
<li><a href="#vertical-scanning">Vertical Scanning</a></li>
<li><a href="#divide-and-conquer">Divide and Conquer</a></li>
<li><a href="#binary-search">Binary Search</a></li>
<li><a href="#further-thoughts">Further Thoughts</a></li>
</ul>
</li>
<li><a href="#15-3sum">15-3Sum</a>
<ul>
<li><a href="#sorted-array">Sorted Array</a></li>
</ul>
</li>
<li><a href="#16-3sum-closest">16-3Sum Closest</a>
<ul>
<li><a href="#3-pointers">3 Pointers</a></li>
</ul>
</li>
<li><a href="#17-letter-combinations-of-a-phone-number">17-Letter Combinations of a Phone Number</a>
<ul>
<li><a href="#backtracking">Backtracking</a></li>
<li><a href="#first-in-first-out-fifo-queue">First In First Out (FIFO) Queue</a></li>
</ul>
</li>
<li><a href="#18-4sum">18-4Sum</a>
<ul>
<li><a href="#sorted-array-1">Sorted Array</a></li>
</ul>
</li>
<li><a href="#19-remove-nth-node-from-end-of-list">19-Remove Nth Node From End of List</a>
<ul>
<li><a href="#two-pass-algorithm">Two Pass Algorithm</a></li>
<li><a href="#one-pass-algorithm">One Pass Algorithm</a></li>
</ul>
</li>
<li><a href="#20-valid-parentheses">20-Valid Parentheses</a>
<ul>
<li><a href="#counting-method">Counting method</a></li>
<li><a href="#stacks">Stacks</a></li>
</ul>
</li>
<li><a href="#21-merge-two-sorted-lists">21-Merge Two Sorted Lists</a>
<ul>
<li><a href="#recursive">Recursive</a></li>
<li><a href="#non-recursive-1">Non-Recursive</a></li>
</ul>
</li>
<li><a href="#22-generate-parentheses">22-Generate Parentheses</a>
<ul>
<li><a href="#brute-force-4">Brute Force</a></li>
<li><a href="#backtracking-1">Backtracking</a></li>
<li><a href="#closure-number">Closure Number</a></li>
</ul>
</li>
<li><a href="#23-merge-k-sorted-lists">23-Merge k Sorted Lists</a>
<ul>
<li><a href="#brute-force-5">Brute Force</a></li>
</ul>
</li>
<li><a href="#146-lru-cache">146-LRU Cache</a></li>
</ul>
<p><a name="twoSum"></a></p>
<h1 id="1-two-sum">1-Two Sum</h1>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.
You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>
<p>Example:</p>
<pre tabindex="0"><code>Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
</code></pre><p><br><br>
<a name="twoSumBruteForce"></a></p>
<h2 id="brute-force">Brute Force</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]==</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;No two sum solution&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>* Time complexity:   O(n^2)       we have a nested loop 
* Space complexity:  O(1) 	  we do not allocate any additional memory
</code></pre><p><a name="twoSumOnePassHashTable"></a></p>
<h2 id="one-pass-hash-table">One Pass Hash Table</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">complement</span><span class="o">=</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">complement</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">complement</span><span class="o">),</span><span class="n">i</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;No two sum solution&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>* Time complexity:   O(n)		each lookup in the hash table only requires O(1) time
* Space complexity:  O(n)		we require additional space for the hash table which stores at most n
</code></pre><p><br><br><br></p>
<hr>
<p><a name="addTwoNumbers"></a></p>
<h1 id="2-add-two-numbers">2-Add Two Numbers</h1>
<p>Given two non-empty linked lists representing two non-negative integers with the digits stored in
reverse order and each node containing a single digit, add the two numbers and return as a linked list</p>
<p>Example:</p>
<pre tabindex="0"><code>Input (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 
Output 7 -&gt; 0 -&gt; 8 

342 + 465 = 807
</code></pre><p><br><br>
<a name="addTwoNumbersElementaryMath"></a></p>
<h2 id="elementary-math-solution">Elementary Math Solution</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * public class ListNode {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     int val;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     ListNode next;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     ListNode(int x) { val = x; }
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">addTwoNumbers</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">dummyHead</span><span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">p</span><span class="o">=</span><span class="n">l1</span><span class="o">,</span> <span class="n">q</span><span class="o">=</span><span class="n">l2</span><span class="o">,</span> <span class="n">curr</span><span class="o">=</span><span class="n">dummyHead</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">carry</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">||</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">x</span><span class="o">=</span> <span class="o">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">:</span><span class="n">0</span><span class="o">;</span> <span class="c1">//if (p!=null) then x contains p.val
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span> <span class="o">(</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">:</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="n">carry</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">carry</span><span class="o">=</span><span class="n">sum</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">sum</span><span class="o">%</span><span class="n">10</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span><span class="o">=</span><span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">p</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">q</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">carry</span><span class="o">&gt;</span><span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">carry</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">dummyHead</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity analysis</strong></p>
<pre tabindex="0"><code>* Time Complexity:  O(max(m,n))         depends on the lengths of the two linked lists 
* Space Complexity: O(max(m,n))		the maximum length of the new list is max(m,n)+1
</code></pre><p><br><br><br></p>
<hr>
<p><a name="substringNoRepeat"></a></p>
<h1 id="3-substring-no-repeat">3-Substring No Repeat</h1>
<p>Longest Substring Without Repeating Characters</p>
<p>Given a string find the length of the longest substring without repeating characters.</p>
<pre tabindex="0"><code>Example
Input: 		&#34;abcabcbb&#34;
Output:		3
Explanation:	The answer is &#34;abc&#34;, with the length of 3
</code></pre><pre tabindex="0"><code>Example 2
Input:		&#34;bbbbb&#34;
Output:		1
Explanation:	The answer is &#34;b&#34;, with the length of 1
</code></pre><pre tabindex="0"><code>Example 3
Input:		&#34;pwwkew&#34;
Output:		3
Explanation: 	The answer is &#34;wke&#34;, with the length of 3. Note that the answer must be a substring
		&#34;pwke&#34; is a subsequence and not a substring 
</code></pre><p><br><br>
<a name="substringNoRepeatBruteForce"></a></p>
<h2 id="brute-force-1">Brute Force</h2>
<p><em>Algorithm</em></p>
<p>Suppose we have a function &ldquo;boolean allUnique(String substring)&rdquo; which returns true if all the
characters in the substring are unique and false otherwise. We can iterate through all the possible
substrings of the given string s and call the function allUnique. If it turns out to be true, then we
update our answer of the maximum length of substring without duplicate characters.</p>
<p>To enumerate all substrings of a given string we enumerate the start and end indices of them. Suppose
the start and end indices are i and j respectively. Then we have 0 &lt;= i &lt;= j &lt;= n. Thus using two
nested loops with i from 0 to n-1 and j from i+1 to n, we can enumerate all the substrings of s</p>
<p>To check if one string has duplicate characters we can use a set. We iterate through all the
characters in the string and put them into the set one by one. Before putting one character, we check
if the set already contains it. If so we return false and after the loop we return true.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">allUnique</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">))</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">allUnique</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Character</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ch</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>* Time Complexity:   O(n^3)		Verifying if characters in   [i,j) are unique requires us to scan all of
					them which would cost O(j-i) time. 

					For a given i, the sum of time costed by each j -&gt; [i+1,n] is 
					&#34;Summation from i+1 to n O(j-1)&#34;

					Thus, the sum of all the time consumption is: 
					O(summation from 0 to n-1(summation from j=i+1 to n (j-1))) 
					O(summation from i=0 to n-1(1+n-i)(n-i)/2)) = O(n^3)


					*Note that the sum of all numbers up to n 1+2+3+...+n = n(n+1)/2


* Space Complexity:  O(min(n,m))	We require O(k) space for checking a substring has no duplicate 
					characters, where k is the size of the set. The size of the Set is 
					upper bounded by the size of the string n amd the size of the charset
					or alphabet m 
				
				
</code></pre><p><br><br>
<a name="substringNoRepeatSlidingWindow"></a></p>
<h2 id="sliding-window">Sliding Window</h2>
<p>A sliding window is an abstract concept commonly used in array/string problems. A window is a range of
elements in the array/string which usually defined by the start and end indices</p>
<pre tabindex="0"><code>Ex. [i,j) left-closed, right-open
</code></pre><p>A sliding window is a window that slides its two boundaries in a certain direction, for example if we
slide [i,j) to the right by 1 element, then it becomes [i+1, j+1) - left closed, right open.</p>
<p>Sliding Window approach, whenever we are looking at a section on an array usual to perform calculations
we don&rsquo;t need to completely recalculate everything for every section of the array. Usually we can use
the value obtained from another section of the array to determine something about this section of the
array. For example if we are calculating the sum of sections of an array we can use the previously
calculated value of a section to determine the sum of an adjacent section in the array.</p>
<pre tabindex="0"><code>Ex. 1 2 3 4 5 6 7 8 
</code></pre><p>If we calculate the first section of four values we get 1+2+3+4 = 10 , then to calculate the next section
2+3+4+5 we can just take our first section (window_sum) and perform the operation:</p>
<pre tabindex="0"><code>window_sum-first entry + last entry = 10-1+5= 14
</code></pre><p>So essentially for the window sliding technique we use what we know about an existing window to
determine properties for another window.</p>
<p><br><br>
<em>Algorithm</em></p>
<p>In the brute force approach, we repeatedly check a substring to see if it has duplicate characters but
this is unnecessary. If a substring from index i to j-1 is already checked to have no duplicate
characters we only need to check if s[j] is already in the substring.</p>
<p>To check if a character is already in the substring we can scan the substring which leads to an O(n^2)
algorithm but we can improve on this runtime using a HashSet as a sliding window to check if a
character exists in the current set O(1).</p>
<p>We use a HashSet to store the characters in the current window [i,j) and then we slide the index j to
the right, if it is not in the HashSet, we slide j further until s[j] is already in the HashSet. At
this point we found the maximum size of substrings without duplicate characters starting with index i.
If we do this for all i, then we obtain our answer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// try to extend the range [i, j]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))){</span>
</span></span><span class="line"><span class="cl">                <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">++));</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">++));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time complexity:	O(2n)=O(n)	Worst case each character will be visited twice by i and j

Space complexity: 	O(min(m,n))	Same as the brute force method, we need O(k) space for the 
					sliding window where k is the size of the set. The size of the
					set is bounded by the size of the string n and the size of the
					charset/alphabet m
</code></pre><p><br><br>
<a name="substringNoRepeatOptimized"></a></p>
<h2 id="sliding-window-optimized">Sliding Window Optimized</h2>
<p>The previously discussed sliding window approach requires at most 2n steps and this could in fact be
optimized even further to require only n steps. Instead of using a set to tell if a character exists or
not, we could define a mapping of the characters to its index. Then we can skip the characters
immediately when we found a repeated character</p>
<p>If s[j] has a duplicate in the range [i , j) with index j&rsquo;, we don&rsquo;t need to increase i little be little
we can just skip all the elements in the range [i , j&rsquo;] and let i be j&rsquo;+1 directly</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span> <span class="c1">// current index of character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// try to extend the range [i, j]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)),</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">),</span> <span class="n">j</span> <span class="o">+</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="medianofTwoSortedArrays"></a></p>
<h1 id="4-median-of-two-sorted-arrays">4-Median of Two Sorted Arrays</h1>
<p>There are two sorted arrays num1 and num2 of size m and n respectively. Find the median of the two
sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2
cannot be both empty.</p>
<pre tabindex="0"><code>Example 

nums1 = [1, 3] 
nums2 = [2]

The median is 2.0
</code></pre><pre tabindex="0"><code>Example 2

nums1= [1, 2] 
nums2= [3, 4] 

The median is (2+3)/2 = 2.5
</code></pre><p><br><br>
<a name="medianofTwoSortedArraysRecursiveApproach"></a></p>
<h2 id="recursive-approach">Recursive Approach</h2>
<p>In statistics the median is used for dividing a set into two equal length subsets with one set being
always greater than the other set. To approach this problem first we cut A into two parts at a random
position i:</p>
<pre tabindex="0"><code>         left_A                |           right_A 

  A[0], A[1], ... , A[i-1]         A[i], A[i+1], ... , A[m-1]
</code></pre><p>Since A has m elements, there are m+1 kinds of cutting as i can range from 0-m. We can also see that
left_A is empty when i is zero and right_A is empty when i=m</p>
<pre tabindex="0"><code>len(left_A) = i and len(right_A)= m-i
</code></pre><p>We can similarly cut B into two parts at a random position j:</p>
<pre tabindex="0"><code>	left_B			|	right_B

  B[0], B[1], ... , B[j-1]	   B[j], B[j+1], ... , B[n-1]
</code></pre><p>Now if we put left_A and left_B into one set and put right_A and right_B into another set and name
them left_part and right_part, then we get</p>
<pre tabindex="0"><code>	left_part		|	right_part
  A[0], A[1], ... , A[i-1]	  A[i], A[i+1], ... , A[m-1]
  B[0], B[1], ... , B[j-1]	  B[j], B[j+1], ... , B[n-1]
</code></pre><p>If we can ensure that</p>
<ol>
<li>the len(left_part) = len(right_part)</li>
<li>max(left_part) &lt;= min(right_part)</li>
</ol>
<p>then we divide all the elements in {A,B} into two parts with equal length and one part is always
greater than the other. Then</p>
<pre tabindex="0"><code>median= (max(left_part)+min(right_part))/2
</code></pre><p>To ensure these two conditions, we need to ensure:</p>
<ol>
<li>i+j= m-i+n-j (or: m-i+n-j+1) if n&gt;m, we just need to set i=0~m, j= (m+n+1)/2 - i</li>
<li>B[j-1]&lt;=A[i] and A[i-1]&lt;=B[j]</li>
</ol>
<p>So, all we need to do is search for i in [0,m] to find an object i such that
B[j-1]&lt;=A[i] and A[i-1]&lt;=B[j] where j=(m+n+1)/2 -i</p>
<p>Then we perform a binary search following the steps described below:</p>
<ol>
<li>Set imin=0, imax=0, then start searching in [imin, imax]</li>
<li>Set i=(imin+imax)/2 , j=(m+n+1)/2 - i</li>
<li>Now we have len(left_part) = len(right_part) and there are only 3 more situations which we may
encounter:</li>
</ol>
<pre tabindex="0"><code>   - B[j-1] &lt;= A[i] and A[i-1]&lt;=B[j] 
     This means that we have found the object i, so we can stop searching

   - B[j-1] &gt; A[i]
     Means A[i] is too small, we must adjust i to get B[j-1]&lt;=A[i] so we increase i because this will
     cuase j to be decreased. We cannot decrease i because when i is decreased, j will be increased
     so B[j-1] is increased and A[i] is decreased (B[j-1]&lt;= A[i] will never be satisfied)

   - A[i-1] &gt; B[j] 
     Means A[i-1] is too big and thus we must decrease i to get A[i-1]&lt;=B[j]. In order to do that we 
     must adjust the searching range to [imin, i-1] so we set imax=i-1 and go back to step 2
</code></pre><p>When the object i is found, then the media is:</p>
<p>max(A[i-1],B[j-1]), when m+n is odd
(max(A[i-1],B[j-1])+min(A[i],B[j]))/2, when m+n is even</p>
<p>Next is to consider the edge values i=0, i=m, j=0, j=n where A[i-1], B[j-1], A[i], B[j] may not exist</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">double</span> <span class="nf">findMedianSortedArrays</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">B</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">m</span><span class="o">&gt;</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>   	<span class="c1">//ensuring that m&lt;=n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span><span class="o">=</span><span class="n">A</span><span class="o">;</span> <span class="n">A</span><span class="o">=</span><span class="n">B</span><span class="o">;</span> <span class="n">B</span><span class="o">=</span><span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">tmp</span><span class="o">=</span><span class="n">m</span><span class="o">;</span> <span class="n">m</span><span class="o">=</span><span class="n">n</span><span class="o">;</span> <span class="n">n</span><span class="o">=</span><span class="n">tmp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">iMin</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">iMax</span><span class="o">=</span><span class="n">m</span><span class="o">,</span> <span class="n">halfLen</span><span class="o">=(</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">iMin</span><span class="o">&lt;=</span><span class="n">iMax</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">i</span><span class="o">=(</span><span class="n">iMin</span><span class="o">+</span><span class="n">iMax</span><span class="o">)/</span><span class="n">2</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">j</span><span class="o">=</span> <span class="n">halfLen</span> <span class="o">-</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">iMax</span> <span class="o">&amp;&amp;</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">				<span class="n">iMin</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span> <span class="c1">//i is too small
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">iMin</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]&gt;</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">iMax</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="c1">//i is too big
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span><span class="o">{</span> <span class="c1">//we have found the object i 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="kt">int</span> <span class="n">maxLeft</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">maxLeft</span><span class="o">=</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">					<span class="n">maxLeft</span><span class="o">=</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">maxLeft</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">],</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">((</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">)%</span><span class="n">2</span> <span class="o">==</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="n">maxLeft</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="kt">int</span> <span class="n">minRIght</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">minRight</span><span class="o">=</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">minRight</span><span class="o">=</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">minRight</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="o">(</span><span class="n">maxLeft</span><span class="o">+</span><span class="n">minRight</span><span class="o">)/</span><span class="n">2</span><span class="o">.</span><span class="na">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">0</span><span class="o">.</span><span class="na">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: O(log(min(m,n)))	At first the searching range is [0,m] and the length of this 
					searching range will be reduced by half after each loop so we
					only need log(m) loops. Since we do constant operations in 
					each loop the time complexity is O(log(m) and since m&lt;=n the
					time complexity is O(log(min(m,n))

Space Complexity: O(1)			We only need constant memory to store 9 local variables so the
					space complexity is O(1)
</code></pre><p><br><br><br></p>
<hr>
<p><a name="longestPalindromicSubstring"></a></p>
<h1 id="5-longest-palindromic-substring">5-Longest Palindromic Substring</h1>
<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length
of s is 1000.</p>
<pre tabindex="0"><code>Example 1: 

Input: &#34;babad&#34; 
Output: &#34;bab&#34; 

Note: &#34;aba&#34; is also a valid answer 
</code></pre><pre tabindex="0"><code>Example 2: 

Input: &#34;cbbd&#34;
Output: &#34;bb&#34; 
</code></pre><p><br><br>
<a name="longestPalindromicSubstringLongestCommonSubstring"></a></p>
<h2 id="longest-common-substring">Longest Common Substring</h2>
<p>Some people will be tempted to come up with this quick solution which is unforunately flawed, &ldquo;reverse
S and become S&rsquo;. Find the longest common substring between S and S&rsquo; and that will be the longest
palindromic substring.&rdquo; This will work with some examples but there are some cases where the longest
common substring is not a valid palindrome.</p>
<pre><code>Ex. S=&quot;abacdfgdcaba&quot;, S'=&quot;abacdgfdcaba&quot; 	
</code></pre>
<p>The longest common substring between S and S&rsquo; is &ldquo;abacd&rdquo; and clearly this is not a valid
palindrome</p>
<p>We can solve this problem however by checking if the substring&rsquo;s indices are the same as the reversed
substring&rsquo;s original indices each time we find a longest common substring. If it is, then we attempt
to update the longest palindrome found so far, if not we skip this and find the next candidate</p>
<p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: O(n^2) 
Space Complexity: O(n^2) 
</code></pre><p><br><br>
<a name="longestPalindromicSubstringBruteForce"></a></p>
<h2 id="brute-force-2">Brute Force</h2>
<p>The obvious brute force solution is to pick all possible starting and ending position for a substring
and verify if it is a palindrome</p>
<p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: O(n^3)		If n is the length of the input string, there are a total of 
				(n 2) = n(n-1)/2 substrings and since verifying each substring takes 
				O(n) time, the run time complexity is O(n^3)

Space Complexity: O(1) 
</code></pre><p><br><br>
<a name="longestPalindromicSubstringDynamicProgramming"></a></p>
<h2 id="dynamic-programming">Dynamic Programming</h2>
<p>We can improve on the brute force solution by avoid some unnecessary re-computation while validating
palidromes. Consider the word &ldquo;ababa&rdquo;, if we already know that &ldquo;bab&rdquo; is a palindrome then we can
determine that ababa is a palindrome by noticing that the two left and right letters connected to bab
are the same.</p>
<p>This yields a straight forward dynamic programming solution where we initialize the one and two letters
palindromes and then work our way up finding all three letters palindromes and so on.</p>
<p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	O(n^2)	

Space Complexity: 	O(n^2)	Using O(n^2) space to store the table 
</code></pre><p><br><br>
<a name="longestPalindromicSubstringExpandAroundCenter"></a></p>
<h2 id="expand-around-center">Expand Around Center</h2>
<p>This approach allows us to solve this problem in O(n^2) time using only constant space complexity. We
observe that a palindrome mirrors around its enter and therefore a palindrome can be expanded from its
center and there are only 2n-1 such centers (for palindromes with an even number of letters like
&ldquo;abba&rdquo; its center is in between two letters).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>     <span class="c1">//edge case 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">end</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">len1</span><span class="o">=</span><span class="n">expandAroundCenter</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">len2</span><span class="o">=</span><span class="n">expandAroundCenter</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">len1</span><span class="o">,</span><span class="n">len2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">len</span><span class="o">&gt;</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">start</span><span class="o">=</span> <span class="n">i</span><span class="o">-(</span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">end</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">len</span><span class="o">/</span><span class="n">2</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">end</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">expandAroundCenter</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">L</span><span class="o">=</span><span class="n">left</span><span class="o">,</span> <span class="n">R</span><span class="o">=</span><span class="n">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="o">(</span><span class="n">L</span><span class="o">&gt;=</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">R</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">L</span><span class="o">)==</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">R</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">L</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">		<span class="n">R</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br>
<a name="longestPalindromicSubstringManacherAlgorithm"></a></p>
<h2 id="manachers-algorithm">Manacher&rsquo;s Algorithm</h2>
<p>There is an O(n) algorithm called Manacher&rsquo;s algorithm, however, it is a non-trivial algorithm and no
one would expect you to come up with this algorithm in a 45 minute coding session</p>
<p><br><br><br></p>
<hr>
<p><a name="zigZagConversion"></a></p>
<h1 id="6-zigzag-conversion">6-ZigZag Conversion</h1>
<p>The string &ldquo;PAYPALISHIRING&rdquo; is written in a zigzag pattern on a given number of rows like this:</p>
<pre tabindex="0"><code>P   A   H   N
A P L S I I G
Y   I   R
</code></pre><p>And then read line by line: &ldquo;PAHNAPLSIIGYIR&rdquo;. Write a code that will take a string and make this
conversion given a number of rows:</p>
<pre tabindex="0"><code>string convert(string s, int numRows);
</code></pre><pre tabindex="0"><code>Example 1: 

Input: s=&#34;PAYPALISHIRING&#34;, numRows=3
Output: &#34;PAHNAPLSIIGYIR&#34;
</code></pre><pre tabindex="0"><code>Example 2:

Input: s=&#34;PAYPALISHIRING&#34;, numRows=4
Output: &#34;PINALSIGYAHRPI&#34;

Explanation:

P           I          N
A       L   S      I   G
Y   A       H   R
P           I
</code></pre><p><br><br>
<a name="zigZagConversionSortbyRow"></a></p>
<h2 id="sort-by-row">Sort by Row</h2>
<p>By iterating through the string from left to right we can easily determine which row in the Zig-Zag
pattern that a character belongs to</p>
<p><br><br>
<em>Algorithm</em></p>
<p>We can use min(numRows,len(s)) lists to represent the non-empty rows of the Zig-Zag Pattern.
Iterate through s from left to right appending each character to the appropriate row. The appropriate
row can be tracked using two variables: the current row and the current direction.</p>
<p>The current direction only changes when we moved to the topmost row or moved down to the bottommost
row</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">convert</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">numRows</span><span class="o">==</span><span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">s</span><span class="o">;</span>		<span class="c1">//if there is only one row return string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;</span> <span class="n">rows</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">numRows</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">			<span class="n">rows</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">curRow</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">boolean</span> <span class="n">goingDown</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">rows</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">curRow</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">curRow</span><span class="o">==</span><span class="n">0</span> <span class="o">||</span> <span class="n">curRow</span><span class="o">==</span><span class="n">numRows</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">goingDown</span><span class="o">=!</span><span class="n">goingDown</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">curRow</span><span class="o">+=</span><span class="n">goingDown</span> <span class="o">?</span> <span class="n">1</span> <span class="o">:</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">StringBuilder</span> <span class="n">ret</span><span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="o">(</span><span class="n">StringBuilder</span> <span class="n">row</span><span class="o">:</span><span class="n">rows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ret</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">row</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity:  O(n)	where n==len(s)
Space Complexity: O(n)
</code></pre><p><br><br>
<a name="zigZagConversionVisitbyRow"></a></p>
<h2 id="visit-by-row">Visit by Row</h2>
<p>Visit the characters in the same order as reading the Zig-Zag pattern line by line</p>
<p><br><br>
<em>Algorithm</em></p>
<p>Visit all characters in row 0 first, then row 1, then row 2, and so on.
For all whole numbers k,
* characters in row 0 are located at indexes  k*(2*numRows-2)
* characters in row numRows -1 are located at indexes  k*(2*numRows-2)+ numRows -1
* characters in inner row i are located at indexes  k*(2*numRows-2)+i and (k+1)(2*numRows-2)-i</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">convert</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">numRows</span><span class="o">==</span><span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">s</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">StringBuilder</span> <span class="n">ret</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">cycleLen</span><span class="o">=</span> <span class="n">2</span><span class="o">*</span> <span class="n">numRows</span> <span class="o">-</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numRows</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span> <span class="n">cycleLen</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ret</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">!=</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span><span class="o">!=</span><span class="n">numROws</span><span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">+</span><span class="n">cycleLen</span><span class="o">-</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">ret</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">cycleLen</span><span class="o">-</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: O(n)	where n==len(s) Each index is visited once

Space Complexity: O(n) 	C++ implementation can achieve O(1) if the return string is not considered 
			extra space
</code></pre><p><br><br><br></p>
<hr>
<p><a name="reverseInteger"></a></p>
<h1 id="7-reverse-integer">7-Reverse Integer</h1>
<p>Given a 32- bit signed integer, reverse digits of an integer.</p>
<pre tabindex="0"><code>Example 1: 

Input: 123
Output: 321
</code></pre><pre tabindex="0"><code>Example 2: 

Input: -123
Output: -321
</code></pre><pre tabindex="0"><code>Example 3: 

Input: 120 
Output: 21
</code></pre><p>For the purpose of this problem assume that your function returns 0 when the reversed integer overflows</p>
<p><br><br>
<a name="reverseIntegerPopandPush"></a></p>
<h2 id="pop-and-push-digits-and-check-before-overflow">Pop and Push Digits and Check Before Overflow</h2>
<p>We can build up the reverse integer one digit at and time and before doing so we can check whether or
not appedning another digit would cause overflow</p>
<p><br><br>
<em>Algorithm</em></p>
<p>Reversing an integer can be done similarly to reversing a string. We want to repeatedly &ldquo;pop&rdquo; the last
digit off of x and push it to the back of the rev so that in the end rev is the reverse of x.</p>
<p>To push and pop digits without the help of some auxiliar stack/array we can use math</p>
<pre tabindex="0"><code>//pop operation: 
pop = x%10; 
x/=10;

//push operation:
temp=rev*10+pop;
rev =temp;
</code></pre><p>This statement is dangerous however as the statement temp=rev*10+pop may cause an overflow and luckily
it is easy to check beforehand whether or not this statement would cause an overflow.</p>
<ol>
<li>If temp=rev*10+pop causes an overflow, then rev&gt;=INTMAX/10</li>
<li>If rev&gt; INTMAX/10, then temp=rev*10+pop is guaranteed to overflow</li>
<li>if rev==INTMAX/10, then temp=rev*10 + pop will overflow if an only if pop&gt;7</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">rev</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">x</span><span class="o">!=</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">pop</span><span class="o">=</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">x</span><span class="o">/=</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">rev</span><span class="o">&gt;</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span><span class="o">||(</span><span class="n">rev</span><span class="o">==</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">&amp;&amp;</span> <span class="n">pop</span><span class="o">&gt;</span><span class="n">7</span><span class="o">))</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">rev</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="n">10</span><span class="o">||(</span><span class="n">rev</span><span class="o">==</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">&amp;&amp;</span> <span class="n">pop</span><span class="o">&lt;-</span><span class="n">8</span><span class="o">))</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">rev</span><span class="o">=</span><span class="n">rev</span><span class="o">*</span><span class="n">10</span> <span class="o">+</span><span class="n">pop</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">rev</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity:  O(log(x))	There are roughly log10(x) digits in x 
Space Complexity: O(1)
</code></pre><p><br><br><br></p>
<hr>
<p><a name="stringtoInteger"></a></p>
<h1 id="8-string-to-integer-atoi">8-String to Integer (atoi)</h1>
<p>Implement atoi which converts a string to an integer</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace
character is found. Then, starting from this character, takes an optional initial plus or minus sign
followed by as many numerical digits as possible and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are
ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such
sequence exits because either str is empty or it contains only whitespace characters, no conversion is
performed.</p>
<p>If no valid conversion could be performed a zero value is returned</p>
<p>Note:</p>
<ul>
<li>only the space character &rsquo; &rsquo; is considered as whitespace character</li>
<li>assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-2^31, 2^31-1]. If the numerical value is out of the range of representable values, INT_MAX (2^31-1) or INT_MIN (-2^31) is returned</li>
</ul>
<pre tabindex="0"><code>	Example 1: 

	Input: &#34;42&#34;
	Output: 42
</code></pre><pre tabindex="0"><code>	Example 2: 

	Input: &#34;      -42&#34; 
	Output: -42
</code></pre><pre tabindex="0"><code>	Example 3:

	Input: &#34;4193 with words &#34;
	Output: 4193
</code></pre><pre tabindex="0"><code>	Example 4: 
	
	Input: &#34;words and 987&#34;
	Output: 0
</code></pre><pre tabindex="0"><code>	Example 5:
	
	Input: &#34;-91283472332&#34;
	Output: -2147483648 	//out of the range of a 32-bit signed integer so INT_MIN is returned
</code></pre><p><br><br>
<a name="stringtoIntegerASCII"></a></p>
<h2 id="ascii-conversion">ASCII Conversion</h2>
<p>Recognize that ASCII characters are actually numbers and 0-9 digits are numbers starting from decimal
48 (0x30 hexadecimal)</p>
<pre tabindex="0"><code>	&#39;0&#39; is 48
	&#39;1&#39; is 49
	...
	&#39;9&#39; is 57
</code></pre><p>So to get the value of any character digit you can just remove the &lsquo;0&rsquo;</p>
<pre tabindex="0"><code>	&#39;1&#39; - &#39;0&#39; =&gt; 1
	49  -  48 =&gt; 1
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">myAtoi</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">index</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">sign</span><span class="o">=</span><span class="n">1</span><span class="o">,</span> <span class="n">total</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//1. Empty string 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//2. Remove Spaces 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)==</span><span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">		<span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//3. Handle signs 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)==</span><span class="sc">&#39;+&#39;</span> <span class="o">||</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)==</span><span class="sc">&#39;-&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="n">sign</span><span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">?</span> <span class="n">1</span><span class="o">:-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//4. COnvert number and avoid overflow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span><span class="o">(</span><span class="n">index</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">digit</span><span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">digit</span><span class="o">&lt;</span><span class="n">0</span><span class="o">||</span><span class="n">digit</span><span class="o">&gt;</span><span class="n">9</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">//check if total will overflow after 10 times and add digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="o">||</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">==</span> <span class="n">total</span> 
</span></span><span class="line"><span class="cl">		    <span class="o">&amp;&amp;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">%</span><span class="n">10</span><span class="o">&lt;</span><span class="n">digit</span><span class="o">)</span> <span class="o">{</span>    
</span></span><span class="line"><span class="cl">		    <span class="k">return</span> <span class="n">sign</span><span class="o">==</span><span class="n">1</span> <span class="o">?</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">:</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">total</span><span class="o">=</span> <span class="n">10</span><span class="o">*</span> <span class="n">total</span><span class="o">+</span><span class="n">digit</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">total</span><span class="o">*</span><span class="n">sign</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="palindromeNumber"></a></p>
<h1 id="9-palindrome-number">9-Palindrome Number</h1>
<p>Determines whether an interger is a palindrome. An integer is a palindrome when it reads the same
backward as forward.</p>
<pre tabindex="0"><code>Example 1: 

Input: 121
Output: true
</code></pre><pre tabindex="0"><code>Example 2: 

Input: -121
Output: false 
Explanation: 	From left to right, it reads -121, meanwhile from right to left it becomes 121- . 
		Therefore it is not a palindrome
</code></pre><pre tabindex="0"><code>Example 3: 

Input: 10 
Output: false 
Explanation: 	Reads 01 from right to left. Therefore it is not a palindrome
</code></pre><p><br><br>
<a name="palindromeNumberRevertHalf"></a></p>
<h2 id="revert-half-of-the-number">Revert Half of the Number</h2>
<p>A first idea which may come to mind is to convert the number into a string and check if the string is a
palindrome but this would require extra non-constant space for creating the string not allowed by the
problem description</p>
<p>Second idea would be reverting the number itself and comparing the number with the original number, if
they are the same then the number is a palindrome, however if the reversed number is larger than
int.MAX we will hit integer overflow problem.</p>
<p>To avoid the overflow issue of the reverted number, what if we only revert half of the int number? The
reverse of the last half of the palindrome should be the same as the first half of the number if the
number is a palindrome.</p>
<p>If the input is 1221, if we can revert the last part of the number &ldquo;1221&rdquo; from &ldquo;21&rdquo; to &ldquo;12&rdquo; and compare
it with the first half of the number &ldquo;12&rdquo;, since 12 is the same as 12, we know that the number is a
palindrome.</p>
<p><br><br>
<em>Algorithm</em></p>
<p>At the very beginning we can deal with some edge cases. All negative numbers are not palindrome and
numbers ending in zero can only be a palindrome if the first digit is also 0 (only 0 satisfies this
property)</p>
<p>Now let&rsquo;s think about how to revert the last half of the number. For the number 1221 if we do 1221%10
we get the last digit 1. To get the second last digit we divide the number by 10 1221/10=122 and then
we can get the last digit again by doing a modulus by 10, 122%10=2. If we multiply the last digit by
10 and add the second last digit 1*10+2=12 which gives us the reverted number we want. COntinuing this
process would give us the reverted number with more digits.</p>
<p>Next is how do we know that we&rsquo;ve reached the half of the number?
Since we divided the number by 10 and multiplied the reversed number by 10 when the original number is
less than the reversed number, it means we&rsquo;ve gone through half of the number digits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">&lt;</span><span class="n">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">==</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">!=</span><span class="n">0</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">revertedNumber</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">x</span><span class="o">&gt;</span><span class="n">revertedNumber</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">revertedNumber</span><span class="o">=</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">+</span><span class="n">revertedNumber</span><span class="o">*</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="o">/=</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//when the length is an odd number, we can get rid of the middle digit by 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//revertedNumber/10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="c1">//For example when the input is 12321, at the end of the while loop we get x=12, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//revertedNumber=123, since the middle digit doesn&#39;t matter in a palindrome we can
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//simply get rid of it 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">x</span><span class="o">==</span><span class="n">revertedNumber</span><span class="o">||</span><span class="n">x</span><span class="o">==</span><span class="n">revertedNumber</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="regularExpressionMatching"></a></p>
<h1 id="10-regular-expression-matching">10-Regular Expression Matching</h1>
<p>Given an input string (s) and a pattern (p), implement regular expression matching with support for &lsquo;.&rsquo;
and &lsquo;*&rsquo;</p>
<pre tabindex="0"><code>	&#39;.&#39; Matches any single character
	&#39;*&#39; Matches zero or more of the preceding element 
</code></pre><p>The matching should cover the entire input string (not partial)</p>
<p>Note:</p>
<ul>
<li>s could be empty and contains only lower case letters a-z</li>
<li>p could be empty and contains only lower case letters a-z and characters like . or *</li>
</ul>
<pre tabindex="0"><code>Example 1: 

Input:
	s=&#34;aa&#34; 
	p=&#34;a&#34; 
	Output: false 
	Explanation: 	&#34;a&#34; does not match the entire string &#34;aa&#34; 
</code></pre><pre tabindex="0"><code>Example 2: 

Input: 
	s=&#34;aa&#34;
	p=&#34;a*&#34; 
	Output: true 
	Explanation: 	&#39;*&#39; means zero of more of the preceding element, &#39;a&#39;. Therefore, by repeating
			&#39;a&#39; once it becomes &#34;aa&#34;
</code></pre><pre tabindex="0"><code>Example 3: 

Input: 
	s=&#34;ab&#34; 
	p=&#34;.*&#34; 
	Output: true 
	Explanation: 	&#39;.*&#39; means &#34;zero or more (*) of any character (.)&#34;
</code></pre><pre tabindex="0"><code>Example 4: 

Input: 
	s=&#34;aab&#34; 
	p=&#34;c*a*b&#34; 
	Output: true
	Explanation: 	c can be repeated 0 times, a can be repeated 1 time. Therefore it matches 
			&#34;aab&#34; 
</code></pre><pre tabindex="0"><code>Example 5: 

Input: 
	s=&#34;mississippi&#34; 
	p=&#34;mis*is*p*.&#34;
	Output: false 
</code></pre><p><br><br>
<a name="regularExpressionMatchingRecursion"></a></p>
<h2 id="recursion">Recursion</h2>
<p>If there were no Kleene stars (the * wildcard characters for regular expressions), the problem would
be easier- we simply check from left to right if each character of the text matches the pattern. When
a star is present we may need to check for may different suffixes of the text and see if they match
the rest of the pattern. A recursive solution is a straightforward way to represent this relationship</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="kt">boolean</span> <span class="n">first_match</span><span class="o">=(!</span><span class="n">text</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> 
</span></span><span class="line"><span class="cl">				    <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)==</span><span class="n">text</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)</span> <span class="o">||</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)==</span><span class="sc">&#39;.&#39;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()&gt;=</span><span class="n">2</span> <span class="o">&amp;&amp;</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">1</span><span class="o">)</span> <span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="o">(</span><span class="n">isMatch</span><span class="o">(</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">2</span><span class="o">))||</span>
</span></span><span class="line"><span class="cl">			       <span class="o">(</span><span class="n">first_match</span> <span class="o">&amp;&amp;</span> <span class="n">isMatch</span><span class="o">(</span><span class="n">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">),</span><span class="n">pattern</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">//note: pattern.substring(2) returns all of the characters after index 2 of pattern
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">first_match</span> <span class="o">&amp;&amp;</span> <span class="n">isMatch</span><span class="o">(</span><span class="n">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">),</span> <span class="n">pattern</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	Let T, P be the lengths of the text and the pattern respectively. In the worst
			case, a call to match(text[i:],pattern[2j:]) will be made (i+j i) times, and 
			strings of the order O(T-i) and O(P-2*j) will be made. Thus the complexity has
			the order: 

			summation from i=0 to T * summation from j=0 to P/2 * (i+j i) O(T+P-i-2j).

			We can show that this is bounded by O((T+P)2^(T+P/2))

Space Complexity:	For every call to match, we will create those strings as described above 
			possibly creating duplicates. If memory is not freed, this will also take a
			total of O((T+P)2^(T+P/2)) space even though there are only order O(T^2+P^2) 
			unique suffixes of P and T that are actually required 
</code></pre><p><br><br>
<a name="regularExpressionMatchingDynamicProgramming"></a></p>
<h2 id="dynamic-programming-1">Dynamic Programming</h2>
<p>As the problem has an optimal substructure, it is natural to cache intermediate results. We ask the
question dp(i,j): does text[i:] and pattern[j:] match? We can describe our answer in terms of answers
to questions involving smaller strings</p>
<p><br><br>
<em>Algorithm</em></p>
<p>We proceed with the same recursion as in Approach 1, except because calls will only ever be made to
match(text[i:], pattern[j:]), we use dp(i,j) to handle those calls instead, saving us expensive
string-building operations and allowing us to cache the intermediate results</p>
<p><strong>Java Top-Down Variation</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="n">Result</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">TRUE</span><span class="o">,</span> <span class="n">FALSE</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Result</span><span class="o">[][]</span> <span class="n">memo</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">		<span class="n">memo</span><span class="o">=</span><span class="k">new</span> <span class="n">Result</span><span class="o">[</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dp</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">0</span><span class="o">,</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dp</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">Result</span><span class="o">.</span><span class="na">TRUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">boolean</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
</span></span><span class="line"><span class="cl">			<span class="n">ans</span><span class="o">=</span><span class="n">i</span><span class="o">==</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">boolean</span> <span class="n">first_match</span><span class="o">=(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="n">text</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">					     <span class="n">patter</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">&lt;</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">)==</span><span class="sc">&#39;*&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="n">ans</span><span class="o">=(</span><span class="n">dp</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">,</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">)||</span><span class="n">first_match</span><span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span><span class="n">j</span><span class="o">,</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ans</span><span class="o">=</span><span class="n">first_match</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">text</span><span class="o">,</span> <span class="n">pattern</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">ans</span><span class="o">?</span> <span class="n">Result</span><span class="o">.</span><span class="na">TRUE</span><span class="o">:</span> <span class="n">Result</span><span class="o">.</span><span class="na">FALSE</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	Let T, P be the lengths of the text and the pattern respectively. The work 
			for every call to dp(i,j) for i=0,...,T; j=0,...,P is done once and it is O(1) 				work. Hence the time complexity is O(TP)

Space Complexity:	The only memory we use is the O(TP) boolean entries in our cache. Hence, the 
			space complexity is O(TP) 
</code></pre><p><br><br>
<a name="regularExpressionMatchingNonRecursive"></a></p>
<h2 id="non-recursive">Non-Recursive</h2>
<p>The recursive programming solutions are pretty confusing so this implementation uses 2D arrays and
Dynamic Programming</p>
<p>The logic works as follows:</p>
<pre tabindex="0"><code>1. If p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1]; 
2. If p.charAt(j) == &#39;.&#39; : dp[i][j] = dp[i-1][j-1]; 
3. If p.charAt(j) == &#39;*&#39;: 
	
	Subconditions
	1. If p.charAt(j-1)!= s.charAt(i):dp[i][j]=dp[i][j-2]  	//in this case a* only counts as empty
	2. If p.charAt(i-1)== s.charAt(i) or p.charAt(i-1) == &#39;.&#39;: 
		
		dp[i][j] = dp[i-1][j]	//in this case a* counts as multiple a 
	     or dp[i][j] = dp[i][j-1]	//in this case a* counts as single a 
	     or dp[i][j] = dp[i][j-2]	//in this case a* counts as empty 
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">p</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="kt">boolean</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="n">1</span><span class="o">][</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="sc">&#39;*&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">			<span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="sc">&#39;.&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">				<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="sc">&#39;*&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">)!=</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">!=</span><span class="sc">&#39;.&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">||</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">||</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="containerwiththeMostWater"></a></p>
<h1 id="11-container-with-the-most-water">11-Container with the Most Water</h1>
<p>Given n non negative integers a1,a2, &hellip; , an where each represents a point at coordinate (i, ai). n
vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two
lines, which together with x-axis forns a container such that the container contains the most water.</p>
<pre tabindex="0"><code class="language-Example:" data-lang="Example:">
		      ^		    ^
	 These two values form the container which could hold water at a max height of 7, these values
	 are also 7 array indexes apart from each other so it could hold water at a max width of 7. The
	 area of water which could be held is thus 7 x 7 = 49
</code></pre><p><a name="containerwiththeMostWaterBruteForce"></a></p>
<h2 id="brute-force-3">Brute Force</h2>
<p>In this case we simply consider the area for every possible pair of the lines and find out the maximum
area out of those.</p>
<pre tabindex="0"><code>public class Solution {
	public int maxArea(int[] height) {
		int maxarea=0; 
		for (int i=0; i&lt;height.length; i++){
			for (int j=i+1;j&lt;height.length;j++){
				maxarea=Math.max(maxarea, Math.min(height[i],height[j])*(j-i));
			}
		}
		return maxarea;
	}
}
</code></pre><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time complexity: 	O(n^2) 	Calculating the area for all n(n-1)/2 height pairs 
Space complexity: 	O(1) 	Constant extra space is used 
</code></pre><p><br><br>
<a name="containerwiththeMostWaterTwoPointer"></a></p>
<h2 id="two-pointer-approach">Two Pointer Approach</h2>
<p>The intuition behind this approach is that the area formed between the lines will always be limited by
the height of the shorter line. Further, the farther the lines, the more will be the area obtained.</p>
<p>We take two pointers, one at the beginning and one at the end of the array constituting the length of
the lines. Further, we maintain a variable maxarea to store the maximum area obtained till now. At
every step, we find out the area formed between them, update maxarea and move the pointer pointing to
the shorter line towards the other end by one step.</p>
<p>Initially we consider the area constituting the exterior most lines. Now to maximize the area we need
to consider the area between the lines of larger lengths. If we try to move the pointer at the longer
line inwards, we won&rsquo;t gain any increase in area, since it is limited by the shorter line. But moving
the shorter line&rsquo;s pointer could turn out to be benefical, as per the same argument, despite the
reduction in width. This is done since a relatively longer line obtained by moving the shorter line&rsquo;s
pointer might overcome the reduction in area caused by the width reduction.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxArea</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">maxarea</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">l</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">r</span><span class="o">=</span><span class="n">height</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">			<span class="n">maxarea</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxarea</span><span class="o">,</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">height</span><span class="o">[</span><span class="n">l</span><span class="o">],</span><span class="n">height</span><span class="o">[</span><span class="n">r</span><span class="o">])*(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">height</span><span class="o">[</span><span class="n">l</span><span class="o">]&lt;</span><span class="n">height</span><span class="o">[</span><span class="n">r</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">				<span class="n">l</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">r</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">maxarea</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time complexity: 	O(n) 	Single pass
Space complexity: 	O(1) 	Constant space is used 
</code></pre><p><br><br><br></p>
<hr>
<p><a name="integertoRoman"></a></p>
<h1 id="12-integer-to-roman">12-Integer To Roman</h1>
<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M</p>
<pre tabindex="0"><code>Symbol		Value 
I		1
V		5
X		10
L		50
C		100
D		500
M		1000
</code></pre><p>For example, two is written as II in Roman numeral, just two one&rsquo;s added together. Twelve is written as
XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for
four is not IIII. Instead, the number four is written as IV. Because the one is before the five we
subtract it making four. The same principle applies to the number nine which is written as IX. There
are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9</li>
<li>X can be placed before L (50) and C(100) to make 40 and 90</li>
<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>
</ul>
<p>Given an integer, convert it to a roman numeral, input is guaranteed to be within the range from
1 to 3999</p>
<pre tabindex="0"><code>Example 1: 

Input: 3 
Output: &#34;III&#34; 
</code></pre><pre tabindex="0"><code>Example 2: 

Input: 4
Output: &#34;IV&#34; 
</code></pre><pre tabindex="0"><code>Example 3: 

Input: 9 
Output: &#34;IX&#34; 
</code></pre><pre tabindex="0"><code>Example 4: 

Input: 58 
Output: &#34;LVIII&#34; 
Explanation: L=50, V=5, III=3
</code></pre><pre tabindex="0"><code>Example 5: 

Input: 1994
Output: &#34;MCMXCIV&#34;
Explanation: M=1000, CM=900, XC=90 and IV=4 
</code></pre><p><a name="integertoRomanStringArray"></a></p>
<h2 id="string-array">String Array</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">intToRoman</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">M</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;M&#34;</span><span class="o">,</span> <span class="s">&#34;MM&#34;</span><span class="o">,</span> <span class="s">&#34;MMM&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 1000, 2000, and 3000 since we know the number is in the range 1 to 3999
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">C</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;C&#34;</span><span class="o">,</span> <span class="s">&#34;CC&#34;</span><span class="o">,</span> <span class="s">&#34;CCC&#34;</span><span class="o">,</span> <span class="s">&#34;CD&#34;</span><span class="o">,</span> <span class="s">&#34;D&#34;</span><span class="o">,</span> <span class="s">&#34;DC&#34;</span><span class="o">,</span> <span class="s">&#34;DCC&#34;</span><span class="o">,</span> <span class="s">&#34;DCCC&#34;</span><span class="o">,</span> <span class="s">&#34;CM&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 0, 100,  200,   300,  400, 500,  600,   700,    800,  900
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">X</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;X&#34;</span><span class="o">,</span> <span class="s">&#34;XX&#34;</span><span class="o">,</span> <span class="s">&#34;XXX&#34;</span><span class="o">,</span> <span class="s">&#34;XL&#34;</span><span class="o">,</span> <span class="s">&#34;L&#34;</span><span class="o">,</span> <span class="s">&#34;LX&#34;</span><span class="o">,</span> <span class="s">&#34;LXX&#34;</span><span class="o">,</span> <span class="s">&#34;LXXX&#34;</span><span class="o">,</span> <span class="s">&#34;XC&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 0,  10,   20,    30,   40,  50,   60,    70,     80,   90
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">I</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;I&#34;</span><span class="o">,</span> <span class="s">&#34;II&#34;</span><span class="o">,</span> <span class="s">&#34;III&#34;</span><span class="o">,</span> <span class="s">&#34;IV&#34;</span><span class="o">,</span> <span class="s">&#34;V&#34;</span><span class="o">,</span> <span class="s">&#34;VI&#34;</span><span class="o">,</span> <span class="s">&#34;VII&#34;</span><span class="o">,</span> <span class="s">&#34;VIII&#34;</span><span class="o">,</span> <span class="s">&#34;IX&#34;</span><span class="o">};</span> 
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 0,   1,    2,     3,    4,  5,    6,     7,      8,    9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">M</span><span class="o">[</span><span class="n">num</span><span class="o">/</span><span class="n">1000</span><span class="o">]</span> <span class="o">+</span> <span class="n">C</span><span class="o">[(</span><span class="n">num</span><span class="o">%</span><span class="n">1000</span><span class="o">)/</span><span class="n">100</span><span class="o">]</span> <span class="o">+</span> <span class="n">X</span><span class="o">[(</span><span class="n">num</span><span class="o">%</span><span class="n">100</span><span class="o">)/</span><span class="n">10</span><span class="o">]</span> <span class="o">+</span> <span class="n">I</span><span class="o">[</span><span class="n">num</span><span class="o">%</span><span class="n">10</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="romantoInteger"></a></p>
<h1 id="13-roman-to-integer">13-Roman to Integer</h1>
<p>Roman numerals are represented by seven different symbols I, V, X, L, C, D and M</p>
<pre tabindex="0"><code>Symbol 		Value 
I		1
V		5
X		10 
L		50
C		100
D		500
M		1000
</code></pre><p>For example, two is written as II in Roman numeral, just two one&rsquo;s added together. Twelve is written as
XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for
four is not IIII. Instead, the number four is written as IV. Because the one is before the five we
subtract it making four. The same principle applies to the number nine which is written as IX. There
are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9</li>
<li>X can be placed before L (50) and C(100) to make 40 and 90</li>
<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>
</ul>
<p>Given an integer, convert it to a roman numeral, Input is guaranteed to be within the range from
1 to 3999</p>
<pre tabindex="0"><code>Example 1: 
	
Input: &#34;III&#34; 
Output: 3 
</code></pre><pre tabindex="0"><code>Example 2: 

Input: &#34;IV&#34; 
Output: 4
</code></pre><pre tabindex="0"><code>Example 3: 

Input: &#34;IX&#34; 
Output: 9 
</code></pre><pre tabindex="0"><code>Example 4: 

Input: &#34;LVIII&#34; 
Output: 58 
Explanation: L=50, V=5, III=3
</code></pre><pre tabindex="0"><code>Example 5: 

Input: &#34;MCMXCIV&#34; 
Output: 1994
Explanation: M=1000, CM=900, XC=90 and IV=4
</code></pre><p><br><br>
<a name="romantoIntegerCharacterArray"></a></p>
<h2 id="character-array">Character Array</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">romanToInt</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;I&#39;</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;V&#39;</span><span class="o">,</span> <span class="n">5</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;X&#39;</span><span class="o">,</span> <span class="n">10</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;L&#39;</span><span class="o">,</span> <span class="n">50</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;C&#39;</span><span class="o">,</span> <span class="n">100</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;D&#39;</span><span class="o">,</span> <span class="n">500</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;M&#39;</span><span class="o">,</span> <span class="n">1000</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kt">char</span><span class="o">[]</span> <span class="n">sc</span><span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">total</span><span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span> 
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">pre</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">sc</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">curr</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span> 
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">curr</span><span class="o">&lt;=</span><span class="n">pre</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">total</span><span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">curr</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">total</span><span class="o">=</span><span class="n">total</span><span class="o">+</span><span class="n">curr</span> <span class="o">-</span><span class="n">2</span><span class="o">*</span><span class="n">pre</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">pre</span><span class="o">=</span><span class="n">curr</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">total</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="longestCommonPrefix"></a></p>
<h1 id="14-longest-common-prefix">14-Longest Common Prefix</h1>
<p>Write a function to find the longest common prefix string amongst an array of strings. If there is no
common prefix, return an empty string &quot;&quot;</p>
<pre tabindex="0"><code>Example 1: 

Input: [&#34;flower&#34;, &#34;flow&#34;, &#34;flight&#34;]
Output: &#34;fl&#34;
</code></pre><pre tabindex="0"><code>Example 2: 

Input: [&#34;dog&#34;, &#34;racecar&#34;, &#34;car&#34;] 
Output: &#34;&#34;

Explanation: There is no common prefix among the input strings 
</code></pre><p><em>Note:</em>
All given inputs are in lowercase letters a-z</p>
<p><br><br>
<a name="longestCommonPrefixHorizontalScanning"></a></p>
<h2 id="horizontal-scanning">Horizontal Scanning</h2>
<br>
*Intuition:* 
<p>For a start we will describe a simple way of find the longest prefix shared by a set of strings
LCP(S1 &hellip; Sn).We will use the observation that:</p>
<pre tabindex="0"><code>LCP(S1 ... Sn) = LCP(LCP(LCP(S1, S2), S3), ... Sn) 
</code></pre><p><br><br>
<em>Algorithm:</em></p>
<p>To employ this idea, the algorithm iterates through the strings [S1 &hellip; Sn]. finding at each iteration
i the longest common prefix of strings LCP(S1 &hellip; Si). When LCP(S1 &hellip; Si) is an empty string, the
algorithm ends. Otherwise after n iterations, the algorithm returns LCP(S1 &hellip; Sn)</p>
<pre tabindex="0"><code>
Example: 

{leets, leetcode, leet, leeds}
   \       /      
  LCP{1,2} = leets
  	     leetcode
	     leet 

	 	\	{leets, leetcode, leet, leeds}
		 \ 			   /

		 LCP{1,3} = leet
		 	    leet
			    leet

			      \          {leets, leetcode, leet, leeds}
			       \ 				  /
			       LCP{1,4}   leet
			       		  leeds
					  lee

				LCP{1,4} = &#34;lee&#34;
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="n">longestCommon</span> <span class="nf">Prefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">prefix</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">indexOf</span><span class="o">(</span><span class="n">prefix</span><span class="o">)</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">prefix</span><span class="o">=</span><span class="n">prefix</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">prefix</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">prefix</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">prefix</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time complexity: 	O(S)	Where S is the sum of all characters in all strings. In the worse case
				all n strings are the same. The algorithm compares the string S1 with 
				the other strings [S2 ... Sn]. There are S character comparisons where
				S is the sum of all characters in the input array 

Space complexity: 	O(1) 	We only used constant extra space 
</code></pre><p><br><br>
<a name="longestCommonPrefixVerticalScanning"></a></p>
<h2 id="vertical-scanning">Vertical Scanning</h2>
<p>Imagine a very short string is at the end of the array. The above approach will still do S comparisons.
One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on
the same column (same character index of the strings) before moving on to the next column.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">==)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">char</span> <span class="n">c</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">strs</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">length</span><span class="o">()</span> <span class="o">||</span> <span class="n">strs</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)!=</span><span class="n">c</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time complexity: 	O(S) 	Where S is the sum of all characters in all strings. In the worst case
				there will be n equal strings with length m and the algorithm performs
				S=n*m character comparisons. Even the worst case is still the same as 
				Approach 1, in the best case there are at most n*minLen comparisons 
				where minLen is the length of the shortest string in the array. 

Space complexity: 	O(1)	We only used constant extra space
</code></pre><p><br><br>
<a name="longestCommonPrefixDivideandConquer"></a></p>
<h2 id="divide-and-conquer">Divide and Conquer</h2>
<p>The idea of the algorithm comes from the associative property of LCP operation. We notice that:
LCP(S1 &hellip; Sn) = LCP(LCP(S1 &hellip; Sk), LCP(Sk+1 &hellip; Sn)), where LCP(S1 &hellip; Sn) is the longest common
prefix in a set of strings [S1 &hellip; Sn], 1&lt;k&lt;n</p>
<p><br><br>
<em>Algorithm</em></p>
<p>To apply the previous observation, we use the divide and conquer technique, where we split the
LCP(Si &hellip; Sj) problem into two subproblems LCP(Si &hellip; Smid) and LCP(Smid+1 &hellip; Sj), where mid is
(i+j)/2. We use their solutions lcpLeft and lcpRight to construct the solution of the main problem
LCP(Si &hellip; Sj). To accomplish this we compare one by one the characters of lcpLeft and lcpRight till
there is no character match. The found common prefix of lcpLeft and lcpRight is the solution of the
LCP(Si &hellip; Sj)</p>
<pre tabindex="0"><code>				{leetcode, leet, lee, le} 

				    /                \   
Divide 			{leetcode, leet}            {lee, le} 

Conquer				|			 | 

			     {leet} 		        {le} 

			         \                      /

				 	   {le} 

	Searching for the longest common prefix (LCP) in dataset {leetcode, leet, lee, le} 
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">l</span><span class="o">==</span><span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">l</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">mid</span><span class="o">=(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">lcpLeft</span><span class="o">=</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span><span class="n">l</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">lcpRight</span><span class="o">=</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span><span class="n">r</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">commonPrefix</span><span class="o">(</span><span class="n">lcpLeft</span><span class="o">,</span><span class="n">lcpRight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">commonPrefix</span><span class="o">(</span><span class="n">String</span> <span class="n">left</span><span class="o">,</span> <span class="n">String</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">min</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span><span class="n">right</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">left</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">left</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">min</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<p>In the worst case we have n equal strings with length m</p>
<pre tabindex="0"><code>Time Complexity: O(S)		where S is the number of all characters in the array, S=m*n so time
				complexity is 2*T(n/2)+O(m). Therefore time complexity is O(S). In the
				best case the algorithm performs O(minLen * n) comparisons, where
				minLen is the shortest string of the array 

Space Complexity: O(m*log(n))	There is a memory overhead since we sotre recursive call in the 
				execution stack. There are log(n) recursive calls, each store needs m
				space to store the result so space complexity is O(m*log(n))
</code></pre><p><br><br>
<a name="longestCommonPrefixBinarySearch"></a></p>
<h2 id="binary-search">Binary Search</h2>
<p>The idea is to apply binary search method to find the string with maximum value L, which is common
prefix of all the strings. The algorithm searches the space in the interval (0 &hellip; minLen), where
minLen is minimum string length and the maximum possible common prefix. Each time search space is
divided in two equal parts, one of them is discarded because it is sure that it doesn&rsquo;t contain the
solution. There are two possible cases:</p>
<ul>
<li>S[1&hellip;mid] is not a common string. This means that for each j&gt;i, S[1&hellip;j] is not a common string and we discard the second half of the search space</li>
<li>S [1&hellip;mid] is common string. This means that for each i&lt;j, S[1&hellip;i] is a common string and we discard the first half of the search space, because we try to find longer common prefix</li>
</ul>
<pre tabindex="0"><code> 				{leets, leetcode, leetc, leeds} 

						|
					      
					     &#34;leets&#34;
					    /        \
					 &#34;lee&#34;      &#34;ts&#34;

					     midpoint 
				
				&#34;lee&#34; in &#34;leetcode&#34; : yes
				&#34;lee&#34; in &#34;leetc&#34; : yes
				&#34;lee&#34; in &#34;leeds&#34; : yes

						|

					     &#34;leets&#34;
					     /     \
					  &#34;lee&#34;    &#34;ts&#34;
					    |      /   \

					  &#34;lee&#34;   &#34;t&#34;   &#34;s&#34;
					        
						   midpoint


						   &#34;leet&#34; in &#34;leetcode&#34; : yes
						   &#34;leet&#34; in &#34;leetc&#34; : yes 
						   &#34;leet&#34; in &#34;leeds&#34; : no

						   LCP= &#34;lee&#34; 
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">minLen</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">minLen</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minLen</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">low</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">high</span><span class="o">=</span><span class="n">min</span> <span class="n">Len</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">low</span><span class="o">&lt;=</span><span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">middle</span><span class="o">=(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span> <span class="n">middle</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">low</span><span class="o">=</span><span class="n">middle</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> 
</span></span><span class="line"><span class="cl">			<span class="n">high</span><span class="o">=</span><span class="n">middle</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)/</span><span class="n">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">str1</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">len</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(!</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">startsWith</span><span class="o">(</span><span class="n">str1</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>**Complexity Analysis</p>
<p>In the worst case we have n equal strings with length m</p>
<pre tabindex="0"><code>	Time complexity: 	O(S * log(n)), where S is the sum of all characters in all strings. The
				algorithm makes log(n) iterations, for each of them there are S=m*n 
				comparisons, which gives in total O(S * log(n)) time complexity

	Space complexity: 	O(1). We only used constant extra space 
</code></pre><p><br><br>
<a name="longestCommonPrefixFurtherThoughts"></a></p>
<h2 id="further-thoughts">Further Thoughts</h2>
<p>Considering a slightly different problem:</p>
<pre tabindex="0"><code>	Given a set of keys S= [S1, S2 ... Sn], find the longest common prefix among a string q and S.
	This LCP query will be called frequently
</code></pre><p>We coule optimize LCP queries by storing the set of keys S in a Trie. See this for Trie
implementation. In a Trie, each node descending from the root represents a common prefix of some keys. But we need to
find the longest common prefix of a string q and all key strings. This means that we have to find the
deepest path from the root, which satisfies the following conditions</p>
<ul>
<li>it is a prefix of query string q</li>
<li>each node along the path must contain only one child element. Otherwise the found path will not be a
common prefix among all strings</li>
<li>the path doesn&rsquo;t comprise of nodes which are marked as end of key. Otherwise the path couldn&rsquo;t be a
prefix of a key which is shorter than itself</li>
</ul>
<p><br><br>
<em>Algorithm</em></p>
<p>The only question left is how to find the deepest path in the Trie, that fulfills the requirements
above. The most effective way is to build a trie from {S1 &hellip; Sn] strings. Then find the prefix of
query string q in the Trie. We traverse the Trie from the root, till it is impossible to continue the
path in the Trie because one of the conditions above is not satisfied.</p>
<pre tabindex="0"><code>Searching for the longest common prefix of string &#34;le&#34; in a Trie from dataset {lead, leet}

			Root

			 1

	l   ===========&gt;  \  l

			     2

	e   ===============&gt;   \ e

LCP &#34;le&#34; FOUND	=============&gt;   3   

			     a	/  \ e    End of Key &#34;lee&#34; 
				     
			      6      4

			 d  /	       \ t
				        
END OF KEY &#34;lead&#34;	  7		 5   End of key &#34;leet&#34;
</code></pre><pre tabindex="0"><code>public String longestCommonPrefix(String q, String[] strs) {
    if (strs == null || strs.length == 0)
         return &#34;&#34;;  
    if (strs.length == 1)
         return strs[0];
    Trie trie = new Trie();      
    for (int i = 1; i &lt; strs.length ; i++) {
        trie.insert(strs[i]);
    }
    return trie.searchLongestPrefix(q);
}

class TrieNode {

    // R links to node children
    private TrieNode[] links;

    private final int R = 26;

    private boolean isEnd;

    // number of children non null links
    private int size;    
    public void put(char ch, TrieNode node) {
        links[ch -&#39;a&#39;] = node;
        size++;
    }

    public int getLinks() {
        return size;
    }
    //assume methods containsKey, isEnd, get, put are implemented as it is described
   //in  https://leetcode.com/articles/implement-trie-prefix-tree/)
}

public class Trie {

    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

//assume methods insert, search, searchPrefix are implemented
    private String searchLongestPrefix(String word) {
        TrieNode node = root;
        StringBuilder prefix = new StringBuilder();
        for (int i = 0; i &lt; word.length(); i++) {
            char curLetter = word.charAt(i);
            if (node.containsKey(curLetter) &amp;&amp; (node.getLinks() == 1) &amp;&amp; (!node.isEnd())) {
                prefix.append(curLetter);
                node = node.get(curLetter);
            }
            else
                return prefix.toString();

         }
         return prefix.toString();
    }
}
</code></pre><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>In the worst case query q has length m and is equal to all n strings of the array 

Time Complexity:   O(S)   where S is the number of all characters in the array, LCP query O(m) 
  			  Trie build has O(S) time complexity. To find the common prefix of q 
			  in the Trie takes in the worst O(m). 

Space complexity:  O(S)   we only used additional S extra space for the Trie. 
</code></pre><p><br><br><br></p>
<hr>
<p><a name="threeSum"></a></p>
<h1 id="15-3sum">15-3Sum</h1>
<p>Given an array &ldquo;nums&rdquo; of n integers, are there elements a, b, c in nums such that a+b+c=0? Find all
unique triplets in the array which gives the sum of zero.</p>
<p>Note:</p>
<p>The solution set must not contain duplicate triplets</p>
<pre tabindex="0"><code>Example: 

Given array nums = [-1, 0, 1, 2, -1, -4]. 

A solution set is: 
[
  [-1, 0, 1],
  [-1, -1, 2]
]
</code></pre><p><br><br>
<a name="threeSumSortedArray"></a></p>
<h2 id="sorted-array">Sorted Array</h2>
<p>The method is to sort an input array and then run through all indices of a possible first element of a
triplet. For each element we make another 2Sum sweep of the remaining part of the array. Also we want
to skip elements to avoid duplicates in the answer without expending extra memory.</p>
<pre tabindex="0"><code>public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] num) {
    
    //Arrays.sort re-arranges the array of integers in ascending order
    //ex. [1, 2, 3, 4]

    Arrays.sort(num);
    List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;(); 
    for (int i = 0; i &lt; num.length-2; i++) {
        if (i == 0 || (i &gt; 0 &amp;&amp; num[i] != num[i-1])) {
            
	    //This lets us skip some of the duplicate entries in the array
	    
	    int lo = i+1, hi = num.length-1, sum = 0 - num[i];

	    //This is for the 2 Sum sweep 

            while (lo &lt; hi) {
                if (num[lo] + num[hi] == sum) {
                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
                    while (lo &lt; hi &amp;&amp; num[lo] == num[lo+1]) lo++;
                    while (lo &lt; hi &amp;&amp; num[hi] == num[hi-1]) hi--;

		    //This lets us skip some of the duplicate entries in the array

                    lo++; hi--;
                } else if (num[lo] + num[hi] &lt; sum) lo++;
                else hi--;

		//This allows us to optimize slightly since we know that the array is sorted
           }
        }
    }
    return res;
}
</code></pre><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity:  O(n^2)   We go through a maximum of n elements for the first element of a triplet, 
			   and then when making a bi-directional 2Sum sweep of the remaining part of 
			   the array we also go through a maxiumum of n elements. 

Space Complexity: O(1)	   If we assume the return linked list is not extra space, then we do not 
			   allocate any significant extra space
</code></pre><p><br><br><br></p>
<hr>
<p><a name="threeSumClosest"></a></p>
<h1 id="16-3sum-closest">16-3Sum Closest</h1>
<p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum
is closest to target. Return the sum of the three integers. You may assume that each input would have
exactly one solution.</p>
<pre tabindex="0"><code>Example:

Given array nums=[-1, 2, 1, -4], and target=1.

The sum that is closest to the target is 2. (-1+2+1=2)
</code></pre><p><br><br>
<a name="threeSumClosestThreePointers"></a></p>
<h2 id="3-pointers">3 Pointers</h2>
<p>Similar to the previous 3Sum problem, we use three pointers to point to the current element, next
element and the last element. If the sum is less than the target, it means that we need to add a larger
element so next element move to the next. If the sum is greater, it means we have to add a smaller
element so last element move to the second last element. Keep doing this until the end. Each time
compare the difference between sum and target, if it is less than minimum difference so far, then
replace result with it, otherwise continue iterating.</p>
<pre tabindex="0"><code>public class Solution {
		public int threeSumClosest(int[] num, int target) {
		int result=num[0] + num[1] + num[num.length-1];
		Arrays.sort(num);
		for (int i=0; i&lt;num.length -2; i++) {
			int start= i+1, end = num.length -1;
			while (start &lt; end) {
				int sum = num[i] + num[start] + num[end];
				if (sum &gt; target) {
					end--;
				} else {
					start++;
				}
				if (Math.abs(sum-target) &lt; Math.abs(result-target)) {
					result=sum;
				}
			}
		}
		return result;
	}
}
</code></pre><p><br><br><br></p>
<hr>
<p><a name="letterCombinationsofaPhoneNumber"></a></p>
<h1 id="17-letter-combinations-of-a-phone-number">17-Letter Combinations of a Phone Number</h1>
<p>Given a string contianing digits from 2-9 inclusive, return all possible letter combinations that the
number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not
map to any letters.</p>
<pre tabindex="0"><code>2 - abc 	3 - def 	4 - ghi		5 - jkl		6 - mno		7 - pqrs 	8 - tuv
				
						9 - wxyz
</code></pre><pre tabindex="0"><code>Example: 


Input: &#34;23&#34; 

Output: [&#34;ad&#34;, &#34;ae&#34;, &#34;af&#34;, &#34;bd&#34;, &#34;be&#34;, &#34;bf&#34;, &#34;cd&#34;, &#34;ce&#34;, &#34;cf&#34;]. 
</code></pre><p><em>Note: The above answer is in lexicographical order but the answer can be in any order</em></p>
<p><br><br>
<a name="letterCombinationsofaPhoneNumberBacktracking"></a></p>
<h2 id="backtracking">Backtracking</h2>
<p>Backtracking is an algorithm for finding all solutions by exploring all potential candidates. If the
solution candidate turns to not be a solution (or at least not the last one), backtracking algorithm
discards it by making some changes on the previous step, ie <em>backtracks</em> and then tries again.</p>
<p>Here is a backtrack function backtrack(combination, next_digits) which takes as arguments an ongoing
letter combination and the next digits to check.</p>
<ul>
<li>If there are no more digits to check that means the current combination is done</li>
<li>If there are still digits to check:
<ul>
<li>Iterate over the letters mapping to the next available digit</li>
<li>Append the current letter to the current combination and proceed to check next digits:</li>
</ul>
</li>
</ul>
<pre tabindex="0"><code>	  combination = combination + letter

	  backtrack(combination + letter, next_digits[1:]).
</code></pre><p><strong>Visual Representation</strong></p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/SamirPaulb/assets/main/Screenshot-2022-10-26-180426.png" alt="Visual Representation"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>
Time Complexity: 	O(3^N * 4^M) 	where N is the number of digits in the input that maps to 3
					letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits 
					in the input that maps to 4 letters (eg. 7, 9) and N+M is the 
					total number digits in the input 

Space Complexity: 	O(3^N * 4^M)	since one has to keep 3^N * 4^M solutions 
</code></pre><p><br><br>
<a name="letterCombinationsofaPhoneNumberFIFOQueue"></a></p>
<h2 id="first-in-first-out-fifo-queue">First In First Out (FIFO) Queue</h2>
<p>This solution utilizes the Single Queue Breadth First Search (BFS) which is an algorithm for traversing
or searching tree or graph data structures. It starts at the tree root and explores all of the neighbor
nodes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">letterCombinations</span><span class="o">(</span><span class="n">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">String</span><span class="o">[]</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&#34;0&#34;</span><span class="o">,</span> <span class="s">&#34;1&#34;</span><span class="o">,</span> <span class="s">&#34;abc&#34;</span><span class="o">,</span> <span class="s">&#34;def&#34;</span><span class="o">,</span> <span class="s">&#34;ghi&#34;</span><span class="o">,</span> <span class="s">&#34;jkl&#34;</span><span class="o">,</span> <span class="s">&#34;mno&#34;</span><span class="o">,</span> <span class="s">&#34;pqrs&#34;</span><span class="o">,</span> <span class="s">&#34;tuv&#34;</span><span class="o">,</span> <span class="o">{</span><span class="n">wxyz</span><span class="s">&#34;};
</span></span></span><span class="line"><span class="cl"><span class="s">	ans.add(&#34;</span><span class="err">&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Character</span><span class="o">.</span><span class="na">getNumericValue</span><span class="o">(</span><span class="n">digits</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">//we terminate the while loop when we encounter a new-formed string which is more than
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">//the current level i 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		
</span></span><span class="line"><span class="cl">		<span class="c1">//peek retrieves the first value of the linked list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">while</span> <span class="o">(</span><span class="n">ans</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">length</span><span class="o">==</span><span class="n">i</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="c1">//removes the head or the first value in the linkedlist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="n">String</span> <span class="n">t</span> <span class="o">=</span> <span class="n">ans</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">s</span> <span class="o">:</span> <span class="n">mapping</span><span class="o">[</span><span class="n">x</span><span class="o">].</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t</span><span class="o">+</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//this works because add appends to the end of the list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>
Time Complexity: 	O(3^N * 4^M) 	where N is the number of digits in the input that maps to 3
					letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits 
					in the input that maps to 4 letters (eg. 7, 9) and N+M is the 
					total number digits in the input 

Space Complexity: 	O(3^N * 4^M)	since one has to keep 3^N * 4^M solutions 
</code></pre><p><br><br><br></p>
<hr>
<p><a name="fourSum"></a></p>
<h1 id="18-4sum">18-4Sum</h1>
<p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such
that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target</p>
<p><em>Note:</em>
The solution set must not contain duplicate quadruplets</p>
<pre tabindex="0"><code>Example: 


Given array nums = [1, 0, -1, 0, -2, 2], and target = 0


A solution set is: 

[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
</code></pre><p><br><br>
<a name="fourSumSortedArray"></a></p>
<h2 id="sorted-array-1">Sorted Array</h2>
<p>The idea is the same as the other numbered sum problems like 2sum and 3sum. We sort the array and then
proceed to interate through the values until we end up with a result that we are looking for.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">fourSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">&lt;</span><span class="n">4</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">num</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">//picking the first candidate must leave room
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						       <span class="c1">//for the other values 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">3</span><span class="o">]&gt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//first candidate too large, search finished
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">]&lt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//first candidate too small 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//prevents duplicate in ans list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">//picking the second candidate must
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>								 <span class="c1">//leave room for other values 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">2</span><span class="o">]&gt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//second candidate too large
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]&lt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">					<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//second candidate too small
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">+</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//prevents duplicate results in ans list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="kt">int</span> <span class="n">low</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">high</span><span class="o">=</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="c1">//two pointer search
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sum</span><span class="o">==</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						
</span></span><span class="line"><span class="cl">						<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">],</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">],</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]));</span>
</span></span><span class="line"><span class="cl">						<span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">+</span><span class="n">1</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">							<span class="n">low</span><span class="o">++;</span> <span class="c1">//skipping over duplicates
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">							<span class="n">high</span><span class="o">--;</span> <span class="c1">//skipping over duplicates 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="o">}</span>
</span></span><span class="line"><span class="cl">						<span class="n">low</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">						<span class="n">high</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="c1">//moving window
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">low</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">high</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="removeNthNodefromEndofList"></a></p>
<h1 id="19-remove-nth-node-from-end-of-list">19-Remove Nth Node From End of List</h1>
<p>Given a linked list, remove the n-th node from the end of the list and return its head</p>
<pre tabindex="0"><code>Example: 

Given linked list: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, and n=2 


After removing the second node from the end, the linked list becomes 
		   
		   1 -&gt; 2 -&gt; 3 -&gt; 5
</code></pre><p><strong>Note:</strong>
Given n will always be valid</p>
<p><strong>Follow up:</strong>
Could you do this in one pass?</p>
<p><br><br>
<a name="removeNthNodefromEndofListTwoPassAlgorithm"></a></p>
<h2 id="two-pass-algorithm">Two Pass Algorithm</h2>
<p><strong>Intuition</strong></p>
<p>We notice that the problem could be simply reduced to another one: Remove the (L-n+1)th node from the
beginning of the list, where L is the list length. This problem is easy to solve once we found the
list length L.</p>
<p><br><br>
<strong>Algorithm</strong></p>
<p>First we will add an auxiliary &ldquo;dummy&rdquo; node, which points to the list head. The &ldquo;dummy&rdquo; node is used to
simplify some corner cases such as a list with only one node or removing the head of the list. On the
first pass, find the list length L. Then we set a pointer to the dummy node and start to move it
through the list till it comes to the (L-n)th node. We relink next pointer of the (L-n)th node to the
(L-n+2)th node and we are done.</p>
<pre tabindex="0"><code>	D -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; NULL

		    |
		    v

	D -&gt; 1 -&gt; 2 -&gt; 4 -&gt; NULL
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">removeNthFromEnd</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">	<span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">length</span> <span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">first</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">first</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">length</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">		<span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">length</span> <span class="o">-=</span> <span class="n">n</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">first</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">length</span><span class="o">&gt;</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">length</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">		<span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	O(L) 	The algorithm makes two traversals of the list, first to calculate the 
				list length L and second to find the (L-n)th node. There are 2L-n 
				operations and time complexity is O(L)

Space Complexity: 	O(1) 	We only used constant extra space
</code></pre><p><br><br>
<a name="removeNthNodefromEndofListOnePassAlgorithm"></a></p>
<h2 id="one-pass-algorithm">One Pass Algorithm</h2>
<p>The previous algorithm could be optimized to one pass. Instead of one pointer, we could use two
pointers. The first pointer advances the list by n+1 steps from the beginning, while the second pointer
starts from the beginning of the list. Now, both pointers are separated by exactly n nodes. We maintain
this constant gap by advancing both pointers together until the first pointer arrives past the last
node. The second pointer will be pointing at the nth node counting from the last. We relink the next
pointer of the node referenced by the second pointer to point to the node&rsquo;s next next node.</p>
<pre tabindex="0"><code>Maintaining N=2 nodes apart between the first and second pointer 

	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL

       first 	 Head 
       second 

			   


Move the first pointer N+1 steps 


			     |
			     v


	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL

      second     Head       First


Move the first and second pointers together until the first pointer arrives past the last node 


			     |
			     v


	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
		
		 Head      Second           First

Second pointer points to the nth node counting from last so link node to the node&#39;s next next node 



				  |
				  v


	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt;   -&gt; 5 -&gt; NULL
	         
		 Head      Second           First
</code></pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">removeNthFromEnd</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">first</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">second</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//Moves the first pointer so that the first and second nodes are separated by n nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Move first to the end, maintaining the gap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">first</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">second</span><span class="o">=</span><span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	O(L) 	The algorithm makes one traversal of the list of L nodes. Therefore
				time complexity is O(L)

Space Complexity: 	O(1)	Only constant extra space was used 
</code></pre><p><br><br><br></p>
<hr>
<p><a name="validParentheses"></a></p>
<h1 id="20-valid-parentheses">20-Valid Parentheses</h1>
<p>Given a string containing just the characters &lsquo;(&rsquo;, &lsquo;)&rsquo;, &lsquo;{&rsquo;, &lsquo;}&rsquo;, &lsquo;[&rsquo;, &lsquo;]&rsquo;, determine if the input
string is valid</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets</li>
<li>Open brackets must be closed in the correct order</li>
</ol>
<p>Note that an empty string is also considered valid</p>
<pre tabindex="0"><code>Example 1: 

Input: &#34;()&#34;
Output: true
</code></pre><pre tabindex="0"><code>Example 2: 

Input: &#34;()[]{}&#34;
Output: true 
</code></pre><pre tabindex="0"><code>Example 3: 

Input: &#34;(]&#34;
Output: false
</code></pre><pre tabindex="0"><code>Example 4: 

Input: &#34;([)]&#34;
Output: false
</code></pre><pre tabindex="0"><code>Example 5: 

Input: &#34;{[]}&#34;
Output: true
</code></pre><p><br><br>
<a name="validParenthesesCounting"></a></p>
<h2 id="counting-method">Counting method</h2>
<p><strong>Intuition</strong></p>
<p>Imagine you are writing a small compiler for your college project and one of the tasks or sub-tasks for
the compiler would be to detect if the parenthesis are in place or not.</p>
<p>The algorithm we will look at in this article can be then used to process all the parenthesis in the
program your compiler is compiling and checking if all the parenthesis are in place. This makes
checking if a given string of parenthesis is valid or not, an important programming problem.</p>
<p>The expressions that we will deal with in this problem can consist of three different types of
parenthesis:</p>
<ul>
<li>()</li>
<li>{}</li>
<li>[]</li>
</ul>
<p>Before looking at how we can check if a given expression consisting of thes parenthesis is valid or
not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So,
the expressions we can encounter in this simplified version of the problem are:</p>
<pre tabindex="0"><code>(((((()))))) -- VALID

()()()()     -- VALID

(((((((()    -- INVALID

((()(())))   -- VALID
</code></pre><p>Let&rsquo;s look at a simple algorithm to deal with this problem</p>
<p><br><br></p>
<ol>
<li>
<p>We process the expression one bracket at a time starting from the left</p>
</li>
<li>
<p>Suppose we encounter an opening bracket ie. <code>(</code>, it may or may not be an invalid expression because
there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we
simply increment the counter keeping track of the left parenthesis till now. <code>left += 1</code></p>
</li>
<li>
<p>If we encounter a closing bracket, this has two meanings:</p>
<ul>
<li>
<p>There was no matching opening bracket for this closing bracket and in that case we have an invalid
expression. This is the case when <code>left==0</code> ie. when there are no unmatched left brackets
available</p>
</li>
<li>
<p>We had some unmatched opening bracket available to match this closing bracket. This is the case
when <code>left&gt;0</code> ie. we have unmatched left brackets available</p>
</li>
</ul>
</li>
<li>
<p>If we encounter a closing bracket ie. <code>)</code> when left==0, then we have an invalid expression on our
hands. Else, we decrement <code>left</code> thus reducing the number of unmatched left parenthesis available.</p>
</li>
<li>
<p>Continue processing the string until all parenthesis have been processed</p>
</li>
<li>
<p>If in the end we still have an unmatched left parenthesis available, this implies an invalid
expression</p>
</li>
</ol>
<p><br><br></p>
<p>The reason we discussed this particular algorithm here is because the approach for the approach for
the original problem derives its inspiration from this very solution.</p>
<p>If we try and follow the same approach for our original problem, then it simply won&rsquo;t work. The reason
a simple counter based approach works above is because all the parenthesis are of the same type. So
when we encounter a closing bracket, we simply assume a corresponding opening matching bracket
to be available ie. if <code>left&gt;0</code></p>
<p>But in our problem, if we encounter say <code>]</code>, we don&rsquo;t really know if there is a corresponding opening
<code>[</code> available or not. You could say:</p>
<blockquote>
<p>Why not maintain a separate counter for the different types of parenthesis?</p>
</blockquote>
<p>This doesn&rsquo;t work because the relative placement of the parenthesis also matters here eg: <code>[{]</code></p>
<p><br><br></p>
<p>If we simply keep counters here, then as soon as we encounter the closing square bracket, we would
know there is an unmatched opening square bracket available as well. But, the **closest unmatched
opening bracket available is a curly bracket and not a square bracket and hence the counting approach
breaks here.</p>
<p><br><br>
<a name="validParenthesesStack"></a></p>
<h2 id="stacks">Stacks</h2>
<p>An interesting property about a valid parenthesis expression is that a sub-expression. (Not every
sub-expression) eg.</p>
<pre tabindex="0"><code>	{ [ [ ] { } ] } ( ) ( ) 

	  ^         ^
	  |         |
</code></pre><p>The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort
of a recursive structure to the problem. For example consider the expression enclosed within the
marked parenthesis in the diagram above. The opening bracket is at index <code>1</code> and the corresponding
closing bracket is at index <code>6</code>.</p>
<blockquote>
<p>What if whenever we encounter a matching pair of parenthesis in the expression we simply remove it
from the expression?</p>
</blockquote>
<p>Let&rsquo;s have a look at this idea below where we remove the smaller expressions one at a time from the
overall expression and since this is a valid expression, we would be left with an empty string in the
end.</p>
<pre tabindex="0"><code>The stack data structure can come in handy here in representing this recursive structure of the 
problem. We can&#39;t really process this from the inside out because we don&#39;t have an idea about the 
overall structure. But, the stack can help us process this recursively ie. from outside to inwards.
</code></pre><p>Lets take a look at the algorithm for this problem using stacks as the intermediate data structure.</p>
<p><strong>Algorithm</strong></p>
<ol>
<li>Initialize a stack S.</li>
<li>Process each bracket of the expression one at a time</li>
<li>If we encounter an opening bracket, we simply push it onto the stack. This means we will process it
later, let us simply move onto the sub-expression ahead</li>
<li>If encounter a closing bracket, then we check the element on top of the stack. If the element at the
top of the stack is an opening bracket <code>of the same type</code>, then we pop it off the stack and continue
processing. Else, this implies an invalid expression</li>
<li>In the end, if we are left with a stack still having elements, then this implies an invalid
expression</li>
</ol>
<p>Lets take a look at the implementation for this algorithm</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//Hash table that takes care of the mappings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Character</span><span class="o">&gt;</span> <span class="n">mappings</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Initialize the hash map with mappings. This simply makes the code easier to read 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="nf">Solution</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Character</span><span class="o">&gt;();</span> 
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39;(&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;}&#39;</span><span class="o">,</span> <span class="sc">&#39;{&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;]&#39;</span><span class="o">,</span> <span class="sc">&#39;[&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">// Initialize a stack to be used in the algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// If the current character is a closing bracket 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="c1">// Get the top element of the stack. If the stack is empty, set a dummy value of &#39;#&#39; 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="kt">char</span> <span class="n">topElement</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">?</span> <span class="sc">&#39;#&#39;</span> <span class="o">:</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// If the mapping for this bracket doesn&#39;t match the stack&#39;s top element, return false. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="o">(</span><span class="n">topElement</span> <span class="o">!=</span> <span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="c1">//If it was an opening bracket, push to the stack  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				
</span></span><span class="line"><span class="cl">				<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">//If the stack still contains elements, then it is an invalid expression. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	O(n)	We simply traverse the given string one character at a time and push 
				and pop operations on a stack take O(1) time 

Space Complexity: 	O(n)	In the worst case, when we push all opening brackets onto the stack, we
				will end up pushing all the brackets onto the stack eg (((((((((((
</code></pre><p><br><br><br></p>
<hr>
<p><a name="mergeTwoSortedLists"></a></p>
<h1 id="21-merge-two-sorted-lists">21-Merge Two Sorted Lists</h1>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing
together the nodes of the first two lists.</p>
<pre tabindex="0"><code>Example: 

Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4
Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4
</code></pre><p><br><br>
<a name="mergeTwoSortedListsRecursive"></a></p>
<h2 id="recursive">Recursive</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">mergeTwoLists</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">l2</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">l1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="n">l1</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">mergeTwoLists</span><span class="o">(</span><span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">,</span> <span class="n">l2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">l1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="n">l2</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">mergeTwoLists</span><span class="o">(</span><span class="n">l1</span><span class="o">,</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">l2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>	
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br>
<a name="mergeTwoSortedListsNonRecursive"></a></p>
<h2 id="non-recursive-1">Non-Recursive</h2>
<p>Similar approach and implemenation to the recursive solution above but a little more intuitive and
does not require memory being held on the stack (as the recursive program runs it has to store
variables on the stack so that when the program jumps back it is able to continue)</p>
<p>As with most other linked list solutions, a dummy node is utilized and two pointers are used to keep
track of where we are in the the two linked lists.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">mergeTwoLists</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">ListNode</span> <span class="n">returnNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(-</span><span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">ListNode</span> <span class="n">headNode</span> <span class="o">=</span> <span class="n">returnNode</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">l2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;=</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">returnNode</span> <span class="o">=</span> <span class="n">returnNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">headNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br><br><br></p>
<hr>
<p><a name="generateParentheses"></a></p>
<h1 id="22-generate-parentheses">22-Generate Parentheses</h1>
<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<pre tabindex="0"><code>For example: 

Given n=3, a solution set is: 

[
  &#34;((()))&#34;,
  &#34;(()())&#34;.
  &#34;(())()&#34;,
  &#34;()(())&#34;,
  &#34;()()()&#34;
]
</code></pre><p><br><br>
<a name="generateParenthesesBruteForce"></a></p>
<h2 id="brute-force-4">Brute Force</h2>
<p><strong>Intuition</strong></p>
<p>We can generate all 2^(2n) sequences of <code>(</code> and <code>)</code> characters. Then we can check if each one is valid</p>
<br>
<p><strong>Algorithm</strong></p>
<p>To generate all sequences, we use recursion. All sequences of length <code>n</code> is just <code>(</code> plus all sequences
of length <code>n-1</code>, and then <code>)</code> plus all sequences of length <code>n-1</code>.</p>
<p>To check whether a sequence is valid, we keep track of <code>balance</code>, the net number of opening brackets
minuts closing brackets. If it falls below zero at any time, or doesn&rsquo;t end in zero, the sequence is
invalid - otherwise it is valid.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">combinations</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="n">generateAll</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">],</span> <span class="n">0</span><span class="o">,</span> <span class="n">combinations</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">combinations</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">generateAll</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">current</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">pos</span> <span class="o">==</span> <span class="n">current</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">(</span><span class="n">current</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">current</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">current</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;(&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">generateAll</span><span class="o">(</span><span class="n">current</span><span class="o">,</span> <span class="n">pos</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">current</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;)&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">generateAll</span><span class="o">(</span><span class="n">current</span><span class="o">,</span> <span class="n">pos</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">valid</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">balance</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">balance</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">(</span><span class="n">balance</span> <span class="o">==</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	O(2^2n * n)	For each of 2^2n sequences, we need to create an validate the 
					sequence, which takes O(n) work in the worst case 

Space Complexity: 	O(2^2n * n) 	Naively, every sequence could be valid, see Closure number for
					a tighter asymptotic bound 
</code></pre><p><br><br>
<a name="generateParenthesesBacktracking"></a></p>
<h2 id="backtracking-1">Backtracking</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Instead of adding <code>(</code> or <code>)</code> every time as we do in the Brute Force algorithm, let&rsquo;s only add them
when we know it will remain a valid sequence. We can do this by keeping track of the number of opening
and closing brackets we have placed so far.</p>
<p>We can start an opening bracket if we still have one (of <code>n</code>) left to place. And we can start a closing
bracket if it would not exceed the number of opening brackets</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="n">backtrack</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">backtrack</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span><span class="o">,</span> <span class="n">String</span> <span class="n">cur</span><span class="o">,</span> <span class="kt">int</span> <span class="n">open</span><span class="o">,</span> <span class="kt">int</span> <span class="n">close</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">max</span><span class="o">*</span><span class="n">2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cur</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">open</span> <span class="o">&lt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">backtrack</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="s">&#34;(&#34;</span><span class="o">,</span> <span class="n">open</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">close</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">close</span> <span class="o">&lt;</span> <span class="n">open</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">backtrack</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="s">&#34;)&#34;</span><span class="o">,</span> <span class="n">open</span><span class="o">,</span> <span class="n">close</span> <span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<p>Our complexity analysis rests on understanding how many elements there are in <code>generateParenthesis(n)</code>.
This analysis is outside the scope of this article, but it turns out this is the nth Catalan number
1/(n+1) (2n choose n), which is bounded asymptotically by 4^n/(n* sqrt(n)).</p>
<pre tabindex="0"><code>Time Complexity: 	O((4^n)/sqrt(n))	Each valid sequence has at most n steps during the 
						backtracking procedure

Space Complexity: 	O((4^n)/sqrt(n))	As described above and using O(n) space to store the
						sequence
</code></pre><p>Another way to think about the runtime of backtracking algorithms on interviewers is O(b^d), where b is
the branching factor and d is the maximum depth of recursion.</p>
<p>Backtracking is characterized by a number of decisions b that can be made at each level of recursion.
If you visualize the recursion tree, this is the number of children each internal node has. You can
also think of b as standing for &ldquo;base&rdquo;, which helps us remember that b is the base of the exponential.</p>
<p>If we make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie.
each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit
each of these nodes, the runtime is O(b^d)</p>
<p><br><br>
<a name="generateParenthesesClosureNumber"></a></p>
<h2 id="closure-number">Closure Number</h2>
<p>To enumerate something, generally we would like to express it as a sum of disjoint subsets that are
easier to count.</p>
<p>Consider the <em>closure number</em> of a valid parentheses sequence <code>s</code>: the least <code>index &gt;= 0</code> so that
`S[0], S[1], &hellip; , S[2 * index + 1] is valid. Clearly, every parentheses sequence has a unique closure
number. We can try to enumerate them individually.</p>
<p><br><br></p>
<p><strong>Algorithm</strong></p>
<p>For each closure number c, we know the starting and ending brackets must be at index <code>0</code> and
<code>2 * c + 1</code>. Then, the <code>2 * c</code> elements between must be a valid sequence, plus the rest of the elements
must be a valid sequence.</p>
<p>This is just some minor improvement to the backtracking solution using the fact that for all valid
solutions the first char is always &lsquo;(&rsquo; and the lat char is always &lsquo;)&rsquo;. We initialize the starting
string to &lsquo;(&rsquo; and set the recursion bottom condition to string reaching length of <code>2 * n - 1</code> - we know
that we need to append a bracket at the end. There will not be much of an improvement in the runtime
however.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">c</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">c</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">left</span><span class="o">:</span> <span class="n">generateParenthesis</span><span class="o">(</span><span class="n">c</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">right</span><span class="o">:</span> <span class="n">generateParenthesis</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">-</span><span class="n">c</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">						<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;(&#34;</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span> <span class="s">&#34;)&#34;</span> <span class="o">+</span> <span class="n">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Complexity Analysis</strong></p>
<pre tabindex="0"><code>Time Complexity: 	O((4^n)/sqrt(n))

Space Complexity: 	O((4^n)/sqrt(n))
</code></pre><p><br><br><br></p>
<hr>
<p><a name="mergeKSortedLists"></a></p>
<h1 id="23-merge-k-sorted-lists">23-Merge k Sorted Lists</h1>
<p>Merge k sorted linked lists and return it as one sorted list. Analyze and descibe its complexity:</p>
<pre tabindex="0"><code>Example: 

Input: 
[
	1 -&gt; 4 -&gt; 5,
	1 -&gt; 3 -&gt; 4,
	2 -&gt; 6
]

Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6
</code></pre><p><br><br>
<a name="mergeKSortedLists"></a></p>
<h2 id="brute-force-5">Brute Force</h2>
<p><strong>Intuition and Algorithm</strong></p>
<ul>
<li>Traverse all the linked lists and collect the values of the nodes into an array</li>
<li>Sort and iterate over this array to get the proper value of nodes</li>
<li>Create a new sorted linked list and extend it with the new nodes</li>
</ul>
<p>As for sorting you can refer to the Algorithms/Data Structures CheatSheet for more about sorting algorithms.</p>
<p><br><br><br></p>
<hr>
<p><a name="lruCache"></a></p>
<h1 id="146-lru-cache">146-LRU Cache</h1>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>put</code>.</p>
<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return <code>-1</code></p>
<p><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p><strong>Follow up:</strong>
Could both of these operations be done in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<pre tabindex="0"><code>LRUCache cache = new LRUCache(2 /* capacity */);

cache.put(1, 1);
cache.put(2, 2);
cache.get(1); 			// returns 1 
cache.put(3, 3); 		// evicts key 2
cache.get(2);			// returns -1 (not found)
	
</code></pre><h1 id="index">Index</h1>
<ol>
<li><a href="#lowest-common-ancestor">Lowest Common Ancestor</a></li>
<li><a href="#count-and-say">Count And Say</a></li>
<li><a href="#maximum-subarray">Maximum SubArray</a></li>
<li><a href="#plus-one">Plus One</a></li>
<li><a href="#sqrt-of-x">Sqrt of X</a></li>
<li><a href="#climbing-stairs">Climbing Stairs</a></li>
<li><a href="#remove-duplicates-from-sorted-list">Remove Duplicates from sorted list</a></li>
<li><a href="#same-tree">Same Tree</a></li>
<li><a href="#symmetric-tree">Symmetric Tree</a></li>
<li><a href="#max-depth-of-binary-tree">Max Depth of Binary Tree</a></li>
<li><a href="#convert-sorted-array-to-binary-search-tree">Convert Sorted Array to Binary Search Tree</a></li>
<li><a href="#balanced-binary-tree">Balanced Binary Tree</a></li>
<li><a href="#minimum-depth-of-binary-tree">Minimum Depth of Binary Tree</a></li>
<li><a href="#path-sum">Path Sum</a></li>
<li><a href="#pascal's-triangle">Pascal&rsquo;s Triangle</a></li>
<li><a href="#valid-palindrome">Valid Palindrome</a></li>
<li><a href="#pascal's-triangle-ii">Pascal&rsquo;s Triangle II</a></li>
<li><a href="#best-time-to-buy-and-sell-stock">Best Time to Buy and Sell Stock</a></li>
<li><a href="#best-time-to-buy-and-sell-stock-ii">Best Time to Buy and Sell Stock II</a></li>
<li><a href="#single-number">Single Number</a></li>
<li><a href="#linked-list-cycle">Linked List Cycle</a></li>
<li><a href="#min-stack">Min Stack</a></li>
<li><a href="#intersection-of-two-linked-lists">Intersection of Two Linked Lists</a></li>
<li><a href="#two-sum-ii---input-array-is-sorted">Two Sum II - Input array is sorted</a></li>
<li><a href="#excel-sheet-column-title">Excel Sheet Column Title</a></li>
<li><a href="#majority-element">Majority Element</a></li>
<li><a href="#excel-sheet-column-number">Excel Sheet Column Number</a></li>
<li><a href="#factorial-trailing-zeroes">Factorial Trailing Zeroes</a></li>
<li><a href="#combine-two-tables">Combine Two Tables</a></li>
<li><a href="#second-highest-salary">Second Highest Salary</a></li>
<li><a href="#employees-earning-more-than-their-managers">Employees Earning More Than Their Managers</a></li>
<li><a href="#duplicate-emails">Duplicate Emails</a></li>
<li><a href="#customers-who-never-order">Customers Who Never Order</a></li>
<li><a href="#rotate-array">Rotate Array</a></li>
<li><a href="#delete-duplicate-emails">Delete Duplicate Emails</a></li>
<li><a href="#rising-temperature">Rising Temperature</a></li>
<li><a href="#x-of-a-kind-in-a-deck-of-cards">X of a Kind in a Deck of Cards</a></li>
<li><a href="#reverse-integer">Reverse Integer</a></li>
<li><a href="#add-two-numbers">Add Two Numbers</a></li>
<li><a href="#longest-substring-without-repeating-characters">Longest Substring Without Repeating Characters</a></li>
<li><a href="#house-robber">House Robber</a></li>
<li><a href="#happy-number">Happy Number</a></li>
<li><a href="#remove-linked-list-elements">Remove Linked List Elements</a></li>
<li><a href="#count-primes">Count Primes</a></li>
<li><a href="#isomorphic-strings">Isomorphic Strings</a></li>
<li><a href="#reverse-linkedlist">Reverse LinkedList</a></li>
<li><a href="#contains-duplicate">Contains Duplicate</a></li>
<li><a href="#contains-duplicate-ii">Contains Duplicate II</a></li>
<li><a href="#implement-stack-using-queues">Implement Stack Using Queues</a></li>
<li><a href="#invert-binary-tree">Invert Binary Tree</a></li>
<li><a href="#fibonacci-number">Fibonacci Number</a></li>
<li><a href="#kth-largest-element">kth Largest Element</a></li>
<li><a href="#power-of-two">Power Of Two</a></li>
<li><a href="#valid-sudoku">Valid Sudoku</a></li>
<li><a href="#implement-queue-using-stack">Implement Queue Using Stack</a></li>
<li><a href="#palindrome-linkedlist">Palindrome LinkedList</a></li>
<li><a href="#delete-node-in-a-linked-list">Delete Node in a Linked List</a></li>
<li><a href="#is-anagram">Is Anagram</a></li>
<li><a href="#binary-tree-paths">Binary Tree Paths</a></li>
<li><a href="#add-digits">Add Digits</a></li>
<li><a href="#largest-perimeter-triangle">Largest Perimeter Triangle</a></li>
<li><a href="#ugly-number">Ugly Number</a></li>
<li><a href="#missing-number">Missing Number</a></li>
<li><a href="#is-bad-version">Is Bad Version</a></li>
<li><a href="#move-zeroes">Move Zeroes</a></li>
<li><a href="#word-pattern">Word Pattern</a></li>
<li><a href="#can-win-nim">Can Win Nim</a></li>
<li><a href="#power-of-three">Power Of Three</a></li>
<li><a href="#power-of-four">Power of Four</a></li>
<li><a href="#reverse-string">Reverse String</a></li>
<li><a href="#implement-strstr()">Implement strStr()</a></li>
<li><a href="#reverse-vowels-of-a-string">Reverse Vowels of a String</a></li>
<li><a href="#intersection-of-two-arrays">Intersection of two arrays</a></li>
<li><a href="#is-perfect-square">Is Perfect Square</a></li>
<li><a href="#sum-of-two-integers">Sum of Two Integers</a></li>
<li><a href="#guess-number-higher-or-lower">Guess Number Higher or Lower</a></li>
<li><a href="#ransom-note">Ransom Note</a></li>
<li><a href="#first-unique-character-in-a-string">First Unique Character in a String</a></li>
<li><a href="#find-the-difference">Find the Difference</a></li>
<li><a href="#nth-digit">Nth Digit</a></li>
<li><a href="#sum-of-left-leaves">Sum of Left Leaves</a></li>
<li><a href="#longest-palindrome">Longest Palindrome</a></li>
<li><a href="#fizz-buzz">Fizz Buzz</a></li>
<li><a href="#third-maximum-number">Third maximum Number</a></li>
<li><a href="#add-two-strings">Add Two Strings</a></li>
<li><a href="#construct-quad-tree">Construct Quad Tree</a></li>
<li><a href="#n-ary-tree-level-order-traversal">N-ary Tree Level Order Traversal</a></li>
<li><a href="#number-of-segments-in-a-string">Number of Segments in a String</a></li>
<li><a href="#binary-tree-level-order-traversal">Binary Tree Level Order Traversal</a></li>
<li><a href="#path-sum-iii">Path Sum III</a></li>
<li><a href="#find-all-anagrams-in-a-string">Find All Anagrams in a String</a></li>
<li><a href="#arranging-coins">Arranging Coins</a></li>
<li><a href="#hamming-distance">Hamming Distance</a></li>
<li><a href="#string-compression">String Compression</a></li>
<li><a href="#number-of-boomerangs">Number of Boomerangs</a></li>
<li><a href="#find-all-numbers-disappeared-in-an-array">Find All Numbers Disappeared in an Array</a></li>
<li><a href="#assign-cookies">Assign Cookies</a></li>
<li><a href="#poor-pigs">Poor Pigs</a></li>
<li><a href="#find-pivot-index">Find Pivot Index</a></li>
<li><a href="#squares-of-a-sorted-array">Squares of a Sorted Array</a></li>
<li><a href="#repeated-substring-pattern">Repeated Substring Pattern</a></li>
<li><a href="#island-perimeter">Island Perimeter</a></li>
<li><a href="#number-complement">Number Complement</a></li>
<li><a href="#binary-watch">Binary Watch</a></li>
<li><a href="#minimum-moves-to-equal-array-elements">Minimum Moves to Equal Array Elements</a></li>
<li><a href="#license-key-formatting">License Key Formatting</a></li>
<li><a href="#max-consecutive-ones">Max Consecutive Ones</a></li>
<li><a href="#permutations">Permutations</a></li>
<li><a href="#construct-the-rectangle">Construct the Rectangle</a></li>
<li><a href="#merge-intervals">Merge Intervals</a></li>
<li><a href="#merged-sorted-lists">Merged sorted lists</a></li>
<li><a href="#next-greater-element-i">Next Greater Element I</a></li>
<li><a href="#string-without-aaa-or-bbb">String Without AAA or BBB</a></li>
<li><a href="#keyboard-row">Keyboard Row</a></li>
<li><a href="#find-mode-in-binary-search-tree">Find Mode in Binary Search Tree</a></li>
<li><a href="#base-7">Base 7</a></li>
<li><a href="#relative-ranks">Relative Ranks</a></li>
<li><a href="#perfect-number">Perfect Number</a></li>
<li><a href="#detect-capital">Detect Capital</a></li>
<li><a href="#longest-uncommon-subsequence-i">Longest Uncommon Subsequence I</a></li>
<li><a href="#course-schedule-ii">Course Schedule II</a></li>
<li><a href="#letter-combinations-of-a-phone-number">Letter Combinations of a Phone Number</a></li>
<li><a href="#sudoku-solver">Sudoku Solver</a></li>
<li><a href="#bulls-and-cows">Bulls and Cows</a></li>
<li><a href="#n-queens-1">N-Queens 1</a></li>
<li><a href="#k-diff-pairs-in-an-array">K-diff pairs in an Array</a></li>
<li><a href="#is-subsequence">Is Subsequence</a></li>
<li><a href="#minimum-absolute-difference-in-bst">Minimum Absolute Difference in BST</a></li>
<li><a href="#bst-tree-to-greater-tree">BST Tree to Greater Tree</a></li>
<li><a href="#student-attendance-record-I">Student Attendance Record I</a></li>
<li><a href="#reverse-words-in-string-iii">Reverse Words in String III</a></li>
<li><a href="#quad-tree-intersection">Quad Tree Intersection</a></li>
<li><a href="#long-pressed-name">Long Pressed Name</a></li>
<li><a href="#binary-tree-zigzag-level-order-traversal">Binary Tree Zigag Level Order Traversal</a></li>
<li><a href="#array-partition-I">Array Partition I</a></li>
<li><a href="#reshape-the-matrix">Reshape the matrix</a></li>
<li><a href="#swap-nodes-in-pairs">Swap Nodes in Pairs</a></li>
<li><a href="#generate-parentheses">Generate Parentheses</a></li>
<li><a href="#distribute-candies">Distribute Candies</a></li>
<li><a href="#maximum-subproduct-subarray">Maximum Subproduct Subarray</a></li>
<li><a href="#binary-tree-right-side-view">Binary Tree Right Side View</a></li>
<li><a href="#find-minimum-in-rotated-sorted-array">Find Minimum in Rotated Sorted Array</a></li>
<li><a href="#binary-search-tree-iterator">Binary Search Tree Iterator</a></li>
<li><a href="#find-peak-element">Find Peak Element</a></li>
<li><a href="#next-permutation">Next Permutation</a></li>
<li><a href="#search-in-rotated-sorted-array">Search in Rotated Sorted Array</a></li>
<li><a href="#transpose-matrix">Transpose Matrix</a></li>
<li><a href="#merge-k-sorted-lists">Merge K sorted lists</a></li>
</ol>
<hr>
<hr>
<h3 id="lowest-common-ancestorhttpsleetcodecomproblemslowest-common-ancestor-of-a-binary-search-treea-namelowest-common-ancestora"><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">Lowest Common Ancestor</a><a name="lowest-common-ancestor"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">lowestCommonAncestor</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">p</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">TreeNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>		<span class="c1">// Both located in left side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>	<span class="c1">// Both located in right side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">current</span><span class="o">;</span>		<span class="c1">// Seperate branches, therefore current is lca.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="count-and-sayhttpsleetcodecomproblemscount-and-saya-namecount-and-saya"><a href="https://leetcode.com/problems/count-and-say/">Count And Say</a><a name="count-and-say"></a></h3>
<p>The updated version runs in 2ms and passes 96.85% submissions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">countAndSay</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&#34;1&#34;</span><span class="o">;</span>		<span class="c1">// initial result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StringBuilder</span> <span class="n">temp</span><span class="o">;</span>			<span class="c1">// to create intermediate strings efficiently.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len</span><span class="o">;</span>					<span class="c1">// length of the result string.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// We need to iterate n-1 times, because 1st result is 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">startIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// we will look at each index of result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>	<span class="c1">// and store freq,char in the builder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">len</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">startIndex</span><span class="o">++);</span>	<span class="c1">// get the char at startIndex, and increment it, because we also want to look at the next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>					<span class="c1">// intialize it&#39;s count to 1, we just saw it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">==</span> <span class="n">result</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">startIndex</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span><span class="o">++;</span>			<span class="c1">// If next also matches, increment count and startIndex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">startIndex</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>	<span class="c1">// No more match, Add the freq and the char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>	<span class="c1">// Update result to generate the next cound-and-say
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maximum-subarrayhttpsleetcodecomproblemsmaximum-subarraya-namemaximum-subarraya"><a href="https://leetcode.com/problems/maximum-subarray/">Maximum SubArray</a><a name="maximum-subarray"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxSubArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">localMax</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>		<span class="c1">// keeps track of max sum between the previous and current
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">globalMax</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>	<span class="c1">// keeps track of global max sum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    The idea is as follows:
</span></span></span><span class="line"><span class="cl"><span class="cm">    If the current element is greater than the previous local max, then we found an element that is a better option then before.
</span></span></span><span class="line"><span class="cl"><span class="cm">    Then, if that localmax changed and is greater than our global max, update our global max.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="n">localMax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">localMax</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">globalMax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">localMax</span><span class="o">,</span> <span class="n">globalMax</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">globalMax</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="plus-onehttpsleetcodecomproblemsplus-onea-nameplus-onea"><a href="https://leetcode.com/problems/plus-one/">Plus One</a><a name="plus-one"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">plusOne</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">digits</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">digits</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]++;</span>			<span class="c1">// Add one to the last place.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">10</span><span class="o">)</span>	<span class="c1">// If it became 10,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>	<span class="c1">// Then add one to its previous place
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">10</span><span class="o">){</span>	<span class="c1">// If that also results in 10, keep propogating that 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]++;</span>		<span class="c1">// upstream
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">10</span><span class="o">){</span>	<span class="c1">// If the index 0 is 10, then the number is a multiple of 10.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// So increase length by 1 and set index 0 to 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">digits</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="sqrt-of-xhttpsleetcodecomproblemssqrtxa-namesqrt-of-xa"><a href="https://leetcode.com/problems/sqrtx/">Sqrt of X</a><a name="sqrt-of-x"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">mySqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">10</span> <span class="o">-</span> <span class="o">(</span><span class="n">100</span> <span class="o">-</span> <span class="n">x</span><span class="o">)/</span><span class="n">20</span><span class="o">;</span>		<span class="c1">// Using Newton&#39;s method of computing square roots.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">done</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">done</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="o">(</span><span class="n">x1</span><span class="o">*</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x</span><span class="o">)/(</span><span class="n">2</span><span class="o">*</span><span class="n">x1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x2</span> <span class="o">==</span> <span class="n">x1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">x1</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">x1</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="climbing-stairshttpsleetcodecomproblemsclimbing-stairsa-nameclimbing-stairsa"><a href="https://leetcode.com/problems/climbing-stairs/">Climbing Stairs</a><a name="climbing-stairs"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">climbStairs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">)</span>		<span class="c1">// I chose n &lt; 4 because climbStairs(0 &lt;= n &lt;= 3) = n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//return naiveDP(n, dp);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">efficientDP</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">naiveDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dp</span><span class="o">[]){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If already computed, return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ways</span> <span class="o">=</span>  <span class="n">naiveDP</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">dp</span><span class="o">)</span> <span class="o">+</span> <span class="n">naiveDP</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">2</span><span class="o">,</span> <span class="n">dp</span><span class="o">);</span>	<span class="c1">// Just like Fibonacci.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">ways</span><span class="o">;</span>		<span class="c1">// Save it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">ways</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">efficientDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>		<span class="c1">// Initialize dp of length n+1 to store n&#39;th way.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>					<span class="c1">// climbStairs(0 &lt;= n &lt;= 3) = n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// climbStairs(n) = climbStairs(n-1) + climbstairs(n-2);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">];</span>  <span class="c1">// So fetch those values from the dp array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="remove-duplicates-from-sorted-listhttpsleetcodecomproblemsremove-duplicates-from-sorted-lista-nameremove-duplicates-from-sorted-lista"><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">Remove Duplicates from sorted list</a><a name="remove duplicates from sorted list"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">deleteDuplicates</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// while we haven&#39;t reached the tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// if current&#39;s next is the same as current, skip and update its next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="same-treehttpsleetcodecomproblemssame-treea-namesame-treea"><a href="https://leetcode.com/problems/same-tree/">Same Tree</a><a name="same-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSameTree</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">p</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">q</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Two empty trees
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// If one of the node is null, the two trees can&#39;t be equal.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">((</span><span class="n">p</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// If the values in the two nodes are same, compare its&#39;s left and right sub-tree.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">isSameTree</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">q</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isSameTree</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">q</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// If nothing worked out, they can&#39;t be same.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="symmetric-treehttpsleetcodecomproblemssymmetric-treea-namesymmetric-treea"><a href="https://leetcode.com/problems/symmetric-tree/">Symmetric Tree</a><a name="symmetric-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetric</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">isSymmetricIterative</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetricIterative</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">track</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>		<span class="c1">// Add the root twice so we can compare its left and right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">track</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">TreeNode</span> <span class="n">x</span> <span class="o">=</span> <span class="n">track</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>		<span class="c1">// Remove 2 nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">TreeNode</span> <span class="n">y</span> <span class="o">=</span> <span class="n">track</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// If they are both null, skip it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">x</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">y</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// If values don&#39;t match or one is null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>		<span class="c1">// Otherwise add them in this order -&gt; LRRL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>		<span class="c1">// because we need to compare left most with the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>		<span class="c1">// right most, then inner left with inner right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>		<span class="c1">// Everything&#39;s all right, so they must be symmetric.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetricRecursive</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">helperRecursive</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">helperRecursive</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">x</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">y</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Base Case: Both or one is null, so true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">y</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">helperRecursive</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">helperRecursive</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Check if values match and 1.left matches with the 2.right and 1.right matches with 2.left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="max-depth-of-binary-treehttpsleetcodecomproblemsmaximum-depth-of-binary-treea-namemax-depth-of-binary-treea"><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">Max Depth of Binary Tree</a><a name="max depth of binary tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">If root is null, height is 0 else add 1 and find if the left or the right has a greater depth.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxDepth</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">maxDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="convert-sorted-array-to-binary-search-treehttpsleetcodecomproblemsconvert-sorted-array-to-binary-search-treea-nameconvert-sorted-array-to-binary-search-treea"><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">Convert Sorted Array to Binary Search Tree</a><a name="convert-sorted-array-to-binary-search-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">sortedArrayToBST</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">aux</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">TreeNode</span> <span class="nf">aux</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span>					<span class="c1">// Either empty, or return a null node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">+</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>			<span class="c1">// Create a node with the middle value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">TreeNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">n</span><span class="o">[</span><span class="n">mid</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">aux</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// Compute the left (which is the mid in left side)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">aux</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>	<span class="c1">// Compute the right (which is the mid in right side)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="balanced-binary-treehttpsleetcodecomproblemsbalanced-binary-treea-namebalanced-binary-treea"><a href="https://leetcode.com/problems/balanced-binary-tree/">Balanced Binary Tree</a><a name="balanced-binary-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalanced</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">isBalancedBottomUp</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalancedTopDown</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// if difference between root&#39;s left and right is &gt; 1, they&#39;re not balanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="n">getHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">-</span> <span class="n">getHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">)))</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// otherwise, we need to check if the left and right subtree are also balanced.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">isBalanced</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isBalanced</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getHeight</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Standard height of a binary tree calculator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">getHeight</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">getHeight</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalancedBottomUp</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">getHeight2</span><span class="o">(</span><span class="n">root</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// -1 means not balanced.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getHeight2</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lHeight</span> <span class="o">=</span> <span class="n">getHeight2</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>	<span class="c1">// Get the height of left and right tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">rHeight</span> <span class="o">=</span> <span class="n">getHeight2</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// If at any point there was a height difference of more than 1 or previous node&#39;s leftheight || rightheight returned -1, return -1 to let the next node know there was an imbalance.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">lHeight</span><span class="o">-</span><span class="n">rHeight</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span> <span class="o">||</span> <span class="n">lHeight</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span> <span class="o">||</span> <span class="n">rHeight</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">lHeight</span><span class="o">,</span> <span class="n">rHeight</span><span class="o">);</span> <span class="c1">// Else carry on with the normal procedure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="minimum-depth-of-binary-treehttpsleetcodecomproblemsminimum-depth-of-binary-treea-nameminimum-depth-of-binary-treea"><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/">Minimum Depth of Binary Tree</a><a name="minimum-depth-of-binary-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minDepth</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Base case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Left is null, find minheight from right side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Right is null, find minheight from left side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Else, both are not null, so compute min height from the two sides.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="path-sumhttpsleetcodecomproblemspath-suma-namepath-suma"><a href="https://leetcode.com/problems/path-sum/">Path Sum</a><a name="path-sum"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPathSum</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>	<span class="c1">// No sum exist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sum</span> <span class="o">-=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>	<span class="c1">// Sum decreases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>	<span class="c1">// If we are at a leaf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">sum</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// Check if the sum is 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">hasPathSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">sum</span><span class="o">)</span> <span class="o">||</span> <span class="n">hasPathSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Otherwise look if you can make sum = 0 by exploring the left or right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="pascals-trianglehttpsleetcodecomproblemspascals-trianglea-namepascals-trianglea"><a href="https://leetcode.com/problems/pascals-triangle/">Pascal&rsquo;s Triangle</a><a name="pascal's-triangle"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">generate</span><span class="o">(</span><span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">pt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numRows</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// Need to add all n rows
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>		<span class="c1">// temp list to store values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span>		<span class="c1">// First and last values are always 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>	<span class="c1">// Else, get the previous row and surrounding two values and add them
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">pt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">pt</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>		<span class="c1">// Add it to pt.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pt</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="valid-palindromehttpsleetcodecomproblemsvalid-palindromea-namevalid-palindromea"><a href="https://leetcode.com/problems/valid-palindrome/">Valid Palindrome</a><a name="valid-palindrome"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>		<span class="c1">// Only do this is s is not empty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>	<span class="c1">// Convert it to lowercase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Initialize left and right pointers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span>	<span class="c1">// continue while we haven&#39;t hit the middle of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// If char at left is not a letter or a number, skip it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetter</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Same with char at right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetter</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//Char&#39;s are now alphanumeric.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span>	<span class="c1">// If they don&#39;t match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>	<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>	<span class="c1">// They matched, so try to match the inner string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>	<span class="c1">// No mismatch found, return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iia-namepascals-triangle-iia"><a href="https://leetcode.com/problems/pascals-triangle-ii/">Pascal&rsquo;s Triangle II</a><a name="pascal's-triangle-ii"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getRow</span><span class="o">(</span><span class="kt">int</span> <span class="n">rowIndex</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// First is always 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Using the nth row formula to compute the coeeficients. You can google &#34;nth row Pascal&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rowIndex</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">row</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="kt">int</span><span class="o">)(</span><span class="n">1</span><span class="o">.</span><span class="na">0</span><span class="o">*</span><span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)*(</span><span class="n">rowIndex</span><span class="o">-</span><span class="n">i</span><span class="o">)/(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">row</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stocka-namebest-time-to-buy-and-sell-stocka"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">Best Time to Buy and Sell Stock</a><a name="best-time-to-buy-and-sell-stock"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that if the price you are looking at right now in the array minus the minimum observed so far is greater than the maximum profit you recorded, update the max.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxProfit</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// Empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">min</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">max</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iia-namebest-time-to-buy-and-sell-stock-iia"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/">Best Time to Buy and Sell Stock II</a><a name="best-time-to-buy-and-sell-stock-ii"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that the moment you observe a valley and consecutive peak, make the trade by buying the stock on the valley day and selling it on the peak day.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxProfit</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span> <span class="o">+=</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="single-numberhttpsleetcodecomproblemssingle-numbera-namesingle-numbera"><a href="https://leetcode.com/problems/single-number/">Single Number</a><a name="single-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that XOR of two same numbers returns 0 and XOR with 0 returns the same number. So if there is only one element that doesn&#39;t have a pair, all the remaining will XOR with themselves at one point and give 0 but not the singleton element.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">singleNumber</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">^=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="linked-list-cyclehttpsleetcodecomproblemslinked-list-cyclea-namelinked-list-cyclea"><a href="https://leetcode.com/problems/linked-list-cycle/">Linked List Cycle</a><a name="linked-list-cycle"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Using the slow-fast runner technique.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasCycle</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">first</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>	<span class="c1">// Slow runner
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">second</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>		<span class="c1">// Fast Runner
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// while second is not at the end or it isn&#39;t the tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">second</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">second</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">second</span> <span class="o">==</span> <span class="n">first</span><span class="o">)</span>	<span class="c1">// If fast made a full loop and met up with slow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>		<span class="c1">// We got a cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>		<span class="c1">// Slow moves one step
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">second</span> <span class="o">=</span> <span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>	<span class="c1">// Second advances two.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// We don&#39;t have a cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="min-stackhttpsleetcodecomproblemsmin-stacka-namemin-stacka"><a href="https://leetcode.com/problems/min-stack/">Min Stack</a><a name="min-stack"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MinStack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MinStack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>		<span class="c1">// Push the value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>		<span class="c1">// If that value is minimum than we have, update min
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">min</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>	<span class="c1">// Push the minimum on top of the stack for constant time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>						<span class="c1">// minimum retrieval.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>		<span class="c1">// Pop the minimum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>		<span class="c1">// Pop the actual element meant to be popped
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>	<span class="c1">// If empty, min is Max int value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>	<span class="c1">// Otherwise, min would be the top most element since we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>							<span class="c1">// always push the minimum on top of any element we push.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">top</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">elementAt</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="n">2</span><span class="o">);</span>	<span class="c1">// Top element is actually at second last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>				<span class="c1">// index since the last element is the minimum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMin</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="intersection-of-two-linked-listshttpsleetcodecomproblemsintersection-of-two-linked-listsa-nameintersection-of-two-linked-listsa"><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">Intersection of Two Linked Lists</a><a name="intersection-of-two-linked-lists"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that if you are done traversing any of the lists, make it&#39;s pointer point to the head of the other list and start iterating. The reasoning is that the second time they iterate, they will have traversed exactly the same distance (it&#39;s length plus the other list&#39;s head to the intersecting node) and will meet at the intersecting node.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">getIntersectionNode</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">headA</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">headB</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">pA</span> <span class="o">=</span> <span class="n">headA</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">pB</span> <span class="o">=</span> <span class="n">headB</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">pA</span> <span class="o">!=</span> <span class="n">pB</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">pA</span> <span class="o">=</span> <span class="n">pA</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">headB</span> <span class="o">:</span> <span class="n">pA</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pB</span> <span class="o">=</span> <span class="n">pB</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">headA</span> <span class="o">:</span> <span class="n">pB</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pA</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="two-sum-ii---input-array-is-sortedhttpsleetcodecomproblemstwo-sum-ii-input-array-is-sorteda-nametwo-sum-ii---input-array-is-sorteda"><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Two Sum II - Input array is sorted</a><a name="two-sum-ii---input-array-is-sorted"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span>	<span class="c1">// Narrow down the window from both sides until they add up.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span>	<span class="c1">// We overshot, so decrease the window from right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">right</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span>	<span class="c1">// Undershot, increase windows from left so next sum is more
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="o">;</span>				<span class="c1">// Found the two numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">left</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">right</span><span class="o">+</span><span class="n">1</span><span class="o">};</span>	<span class="c1">// +1 because LeetCode followed 1-n indexing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="excel-sheet-column-titlehttpsleetcodecomproblemsexcel-sheet-column-titlea-nameexcel-sheet-column-titlea"><a href="https://leetcode.com/problems/excel-sheet-column-title/">Excel Sheet Column Title</a><a name="excel-sheet-column-title"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToTitle</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* 1 is A and 26 is Z, so n-1 to change it to 0-25 scheme. Then, % 26 to find how
</span></span></span><span class="line"><span class="cl"><span class="cm">        much it is off on a full alphabet cycle, add 65 (ASCII for A) and convert it to char
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">((</span><span class="kt">char</span><span class="o">)(</span><span class="n">65</span><span class="o">+((</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)%</span><span class="n">26</span><span class="o">)))</span> <span class="o">+</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">26</span><span class="o">;</span>	<span class="c1">// Subtract 1 and divide by 26 to get prepare for the next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="majority-elementhttpsleetcodecomproblemsmajority-elementa-namemajority-elementa"><a href="https://leetcode.com/problems/majority-element/">Majority Element</a><a name="majority-element"></a></h3>
<p>Uses <a href="https://www.geeksforgeeks.org/majority-element/">Moore&rsquo;s Algorithm</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// This is the implementation of Moore&#39;s Algorithm for O(n) complexity.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">majorityElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">major</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">major</span> <span class="o">==</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">major</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">major</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="excel-sheet-column-numberhttpsleetcodecomproblemsexcel-sheet-column-numbera-nameexcel-sheet-column-numbera"><a href="https://leetcode.com/problems/excel-sheet-column-number/">Excel Sheet Column Number</a><a name="excel-sheet-column-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Start from the end of String s, compute the ASCII for the char, +1 for 1-26 Alphabet-Scheme (hence -64 instead of -65) and multiply it to 26^{distance from the end of the string}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">titleToNumber</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
</span></span><span class="line"><span class="cl">        <span class="n">total</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="n">64</span><span class="o">)</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">26</span><span class="o">,</span><span class="n">length</span><span class="o">-</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="factorial-trailing-zeroeshttpsleetcodecomproblemsfactorial-trailing-zeroesa-namefactorial-trailing-zeroesa"><a href="https://leetcode.com/problems/factorial-trailing-zeroes/">Factorial Trailing Zeroes</a><a name="factorial-trailing-zeroes"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that every factorial that has 5 as a multiple also has 2 to multiply to 10. So if we can count the number of times we can divide n by 5, should gives us the number of trailing zeroes. O(log(n) base 5) complexity.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">trailingZeroes</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">4</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">/</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">/=</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="combine-two-tableshttpsleetcodecomproblemscombine-two-tablesa-namecombine-two-tablesa"><a href="https://leetcode.com/problems/combine-two-tables/">Combine Two Tables</a><a name="combine-two-tables"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">FirstName</span><span class="p">,</span><span class="w"> </span><span class="n">LastName</span><span class="p">,</span><span class="w"> </span><span class="n">City</span><span class="p">,</span><span class="w"> </span><span class="n">State</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="n">Address</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">Address</span><span class="p">.</span><span class="n">personId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">personId</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="second-highest-salaryhttpsleetcodecomproblemssecond-highest-salarya-namesecond-highest-salarya"><a href="https://leetcode.com/problems/second-highest-salary/">Second Highest Salary</a><a name="second-highest-salary"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">SecondHighestSalary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">salary</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">employee</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="employees-earning-more-than-their-managershttpsleetcodecomproblemsemployees-earning-more-than-their-managersa-nameemployees-earning-more-than-their-managersa"><a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/">Employees Earning More Than Their Managers</a><a name="employees-earning-more-than-their-managers"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">Name</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Employee</span><span class="w"> </span><span class="n">emp</span><span class="p">,</span><span class="w"> </span><span class="n">Employee</span><span class="w"> </span><span class="n">man</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">managerId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">man</span><span class="p">.</span><span class="n">Id</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">salary</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">man</span><span class="p">.</span><span class="n">salary</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="duplicate-emailshttpsleetcodecomproblemsduplicate-emailsa-nameduplicate-emailsa"><a href="https://leetcode.com/problems/duplicate-emails/">Duplicate Emails</a><a name="duplicate-emails"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">email</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">having</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="customers-who-never-orderhttpsleetcodecomproblemscustomers-who-never-ordera-namecustomers-who-never-ordera"><a href="https://leetcode.com/problems/customers-who-never-order/">Customers Who Never Order</a><a name="customers-who-never-order"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">customers</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">customerId</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">orders</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="rotate-arrayhttpsleetcodecomproblemsrotate-arraya-namerotate-arraya"><a href="https://leetcode.com/problems/rotate-array/">Rotate Array</a><a name="rotate-array"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">rotate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">%=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>		<span class="c1">// k == nums.length ? Then it&#39;s a full rotation and no change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">0</span> <span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// First reverse the full array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">k</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>				<span class="c1">// Then reverse element from index 0 to k-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// Then reverse all elements from k to end of Array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Reverse function that reverses the array from specified indices.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">start</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="n">end</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="delete-duplicate-emailshttpsleetcodecomproblemsdelete-duplicate-emailsa-namedelete-duplicate-emailsa"><a href="https://leetcode.com/problems/delete-duplicate-emails/">Delete Duplicate Emails</a><a name="delete-duplicate-emails"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">delete</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">min_id</span><span class="w"> </span><span class="k">from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="nf">min</span><span class="p">(</span><span class="n">Id</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">min_id</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">Email</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><h3 id="rising-temperaturehttpsleetcodecomproblemsrising-temperaturea-namerising-temperaturea"><a href="https://leetcode.com/problems/rising-temperature/">Rising Temperature</a><a name="rising-temperature"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">weather</span><span class="w"> </span><span class="n">w1</span><span class="p">,</span><span class="w"> </span><span class="n">weather</span><span class="w"> </span><span class="n">w2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="nf">Datediff</span><span class="p">(</span><span class="n">w2</span><span class="p">.</span><span class="n">recorddate</span><span class="p">,</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">recorddate</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">temperature</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">temperature</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="x-of-a-kind-in-a-deck-of-cardshttpsleetcodecomproblemsx-of-a-kind-in-a-deck-of-cardsa-namex-of-a-kind-in-a-deck-of-cardsa"><a href="https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/">X of a Kind in a Deck of Cards</a><a name="x-of-a-kind-in-a-deck-of-cards"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasGroupsSizeX</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">deck</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">deck</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>		<span class="c1">// Record the frequencies
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">freq</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">deck</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">freq</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">deck</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">0</span><span class="o">)+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">deck = [1,1,2,2,2,2,3,3,3,3,3,3]
</span></span></span><span class="line"><span class="cl"><span class="cm">number 1 has len of 2, number 2 has len of 4, number 3 has len of 6, they share a Greatest common divisor of 2, which means diving them into group of size X = 2, will be valid. Thus we just have to ensure each length (of a number) shares a Greatest Common Divisor that&#39;s &gt;= 2.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hcf</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">freq</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">hcf</span> <span class="o">=</span> <span class="n">gcd</span><span class="o">(</span><span class="n">hcf</span><span class="o">,</span> <span class="n">freq</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">hcf</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">y</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">%</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="reverse-integerhttpsleetcodecomproblemsreverse-integersolutiona-namereverse-integera"><a href="https://leetcode.com/problems/reverse-integer/solution/">Reverse Integer</a><a name="reverse-integer"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">?</span> <span class="o">-</span><span class="n">1</span> <span class="o">:</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">sign</span><span class="o">;</span>							<span class="c1">// Make x positive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="n">n</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>				<span class="c1">// Start adding from the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">x</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">n</span> <span class="o">==</span> <span class="n">n</span> <span class="o">?</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">n</span><span class="o">*</span><span class="n">sign</span> <span class="o">:</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// Try converting to int from long, if no change,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// Return n * sign, else 0 cause overflow.
</span></span></span></code></pre></div><h3 id="add-two-numbershttpsleetcodecomproblemsadd-two-numberssubmissionsa-nameadd-two-numbersa"><a href="https://leetcode.com/problems/add-two-numbers/submissions/">Add Two Numbers</a><a name="add-two-numbers"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">addTwoNumbers</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// To record the carry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// To record the total of two vals
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>		<span class="c1">// Dummy&#39;s next is the actual head
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// If one of the node is null, we set it to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">l1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>			<span class="c1">// dummy value of 0 so we can adjust for
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// different length of the two lists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">l2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="n">carry</span><span class="o">;</span>		<span class="c1">// Add the two vals and the carry.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">carry</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// Record the carry for the next iteration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">sum</span> <span class="o">%</span> <span class="n">10</span><span class="o">);</span>	<span class="c1">// next node&#39;s value is sum % 10.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>					<span class="c1">// advance current, l1 and l2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">l2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>							<span class="c1">// In the end, if carry is 1, it was from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">carry</span><span class="o">);</span>	<span class="c1">// from adding last terms, so make next node 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>						<span class="c1">// Return the actual head.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="longest-substring-without-repeating-charactershttpsleetcodecomproblemslongest-substring-without-repeating-charactersa-namelongest-substring-without-repeating-charactersa"><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/">Longest Substring Without Repeating Characters</a><a name="longest-substring-without-repeating-characters"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">hash</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>					<span class="c1">// To store the occurence of characters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">hash</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)],</span> <span class="n">i</span><span class="o">);</span>		<span class="c1">// Check the most recent index of character.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">maxLength</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLength</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// That minus current pointer gives length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hash</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)]</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// Record the index of the next character.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">maxLength</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="house-robberhttpsleetcodecomproblemshouse-robbera-namehouse-robbera"><a href="https://leetcode.com/problems/house-robber">House Robber</a><a name="house-robber"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea is that if you are robbing house i, the maximum loot may come from by robbing the i-2th house or by robbing the i-3th house. Therefore rob both and then find the path that gave the maximum profit.
</span></span></span><span class="line"><span class="cl"><span class="cm">Example: loot = [1,9,3,8,4,3,6,4,3,5,7,6]
</span></span></span><span class="line"><span class="cl"><span class="cm">Profit DP = [1,9,4,17,13,20,23,24,26,29,33,35]
</span></span></span><span class="line"><span class="cl"><span class="cm">Here,
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[2] = loot[2] + loot[1]
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[4] = loot[4] + max(dp[2], dp[1])
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[5] = loot[5] + max(dp[3], dp[2]) and so on.
</span></span></span><span class="line"><span class="cl"><span class="cm">In the end, just compare the last two elements to check which path gave us the maximum profit.
</span></span></span><span class="line"><span class="cl"><span class="cm">Some people might not prefer modifying the original nums array. In that case, you can initialize another dp array of same length, initialize the first two elements as dp[0] = nums[0] and dp[1] = nums[1] and dp[3] = nums[0] + nums[2] and then performing the same loop. In that case, you would be using O(n) space.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">rob</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>			<span class="c1">// 3 Base Case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">2</span><span class="o">];</span>				<span class="c1">// House 3 profit is rob House 1 and 3.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">            <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">3</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="happy-numberhttpsleetcodecomproblemshappy-numbersubmissionsa-namehappy-numbera"><a href="https://leetcode.com/problems/happy-number/submissions/">Happy Number</a><a name="happy-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isHappy</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">isHappyConstantSpace</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>		<span class="c1">// Much faster than set method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//return isHappySet(n);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isHappyConstantSpace</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">numSeenLessThan10</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>		<span class="c1">// If I see 10 single digits, then it means that I am
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="n">1</span><span class="o">){</span>					<span class="c1">// now starting to see repititions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>					<span class="c1">// Each time I see a num &lt; 10, increment the counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">numSeenLessThan10</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">numSeenLessThan10</span> <span class="o">&gt;</span> <span class="n">9</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span> <span class="o">=</span> <span class="n">getSquare</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>			<span class="c1">// Get the total of square of its digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that the moment you see a repition, it can&#39;t be a happy number, so keep track of digit square obtained so far. If they hit 1, well and good, otherwise there will be some repition, so return false.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isHappySet</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>		<span class="c1">// Keep track of numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span> <span class="o">=</span> <span class="n">getSquare</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>							<span class="c1">// Get the sum of digits square
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>									<span class="c1">// If it&#39;s 1, it&#39;s a happy number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">seen</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>					<span class="c1">// If it&#39;s a repition of something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// seen before, it&#39;s not a happy no.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>							<span class="c1">// If not seen, add it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getSquare</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>		<span class="c1">// Add the squares of the digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">digit</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">total</span> <span class="o">+=</span> <span class="n">digit</span> <span class="o">*</span> <span class="n">digit</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="remove-linked-list-elementshttpsleetcodecomproblemsremove-linked-list-elementsa-nameremove-linked-list-elementsa"><a href="https://leetcode.com/problems/remove-linked-list-elements/">Remove Linked List Elements</a><a name="remove-linked-list-elements"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">removeElements</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>				<span class="c1">// While head contains the val, skip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>								<span class="c1">// the head
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>	<span class="c1">// While we have something to iterate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>					<span class="c1">// If current&#39;s val match, skip the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// next node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>						<span class="c1">// Else advance to the next node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="count-primeshttpsleetcodecomproblemscount-primessubmissionsa-namecount-primesa"><a href="https://leetcode.com/problems/count-primes/submissions/">Count Primes</a><a name="count-primes"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">countPrimes</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// No prime numbers for numbers &lt; 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>		<span class="c1">// Using Sieve of Eratosthenes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>			<span class="c1">// Start from i = 2 to sqrt(n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">store</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>						<span class="c1">// If store[i] = false, then mark all its
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="o">)</span><span class="c1">// multiples in the store as true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">store</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>			<span class="c1">// True = not a prime, false = prime
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>				<span class="c1">// Loop through the array, count
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">store</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="isomorphic-stringshttpsleetcodecomproblemsisomorphic-stringssubmissionsa-nameisomorphic-stringsa"><a href="https://leetcode.com/problems/isomorphic-strings/submissions/">Isomorphic Strings</a><a name="isomorphic-strings"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isIsomorphic</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>			<span class="c1">// Can&#39;t be isomorphic is string lengths do not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">hashS</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>			<span class="c1">// To store String s&#39; match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">hashT</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>			<span class="c1">// To store String t&#39;s match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">charS</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">charT</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">hashS</span><span class="o">[</span><span class="n">charS</span><span class="o">]</span> <span class="o">!=</span> <span class="n">hashT</span><span class="o">[</span><span class="n">charT</span><span class="o">])</span>	<span class="c1">// If the values at respective characters index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// do not match, return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hashS</span><span class="o">[</span><span class="n">charS</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>			<span class="c1">// Otherwise, mark those index with the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hashT</span><span class="o">[</span><span class="n">charT</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>			<span class="c1">// arbitrary value. I chose a simple (i+1) to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>										<span class="c1">// to mark both the hash with the same value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// Everything worked out, return true;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="reverse-linkedlisthttpsleetcodecomproblemsreverse-linked-listsolutiona-namereverse-linkedlista"><a href="https://leetcode.com/problems/reverse-linked-list/solution/">Reverse LinkedList</a><a name="reverse-linkedlist"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">reverseList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>	<span class="c1">// Very tricky. Refer to the demo below
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">reverseList</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Iterative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">reverseList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>						<span class="c1">// No point in reversing empty or 1-sized list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">nextNode</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>					<span class="c1">// While we haven&#39;t reached the tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">nextNode</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>				<span class="c1">// Store the next node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>					<span class="c1">// Current&#39;s next becomes it&#39;s previous
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>						<span class="c1">// Advance previous to current.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">nextNode</span><span class="o">;</span>					<span class="c1">// Make current the actual next node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">prev</span><span class="o">;</span>							<span class="c1">// Current is at null, so it&#39;s previous is the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// new head.
</span></span></span></code></pre></div><p>![reverse Linked list](/Users/devkapupara/Desktop/Notes/dependencies/reverse Linked list.jpg)</p>
<h3 id="contains-duplicatehttpsleetcodecomproblemscontains-duplicatesubmissionsa-namecontains-duplicatea"><a href="https://leetcode.com/problems/contains-duplicate/submissions/">Contains Duplicate</a><a name="contains-duplicate"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">containsDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// There can&#39;t be any duplicates.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Store unique values.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">store</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>						<span class="c1">// Add func returns true if n was&#39;nt present,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>						<span class="c1">// false if duplicate. Therefore if it was a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// duplicate, return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>								<span class="c1">// No duplicates, so return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="contains-duplicate-iihttpsleetcodecomproblemscontains-duplicate-iia-namecontains-duplicate-iia"><a href="https://leetcode.com/problems/contains-duplicate-ii/">Contains Duplicate II</a><a name="contains-duplicate-ii"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">containsNearbyDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Use a rotating window of size k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>				<span class="c1">// While we haven&#39;t processed everything
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]))</span>		<span class="c1">// If our current window contains duplicate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">store</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]);</span>					<span class="c1">// No duplicates in the window
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">right</span><span class="o">++;</span>								<span class="c1">// Increase right to visit the new element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">k</span><span class="o">){</span>					<span class="c1">// If window becomes &gt; k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">store</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]);</span>			<span class="c1">// remove the number on the left side of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span><span class="o">++;</span>								<span class="c1">// the window and increase the left counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>										<span class="c1">// for new window from the next index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>								<span class="c1">// No duplicates found in any window.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="implement-stack-using-queueshttpsleetcodecomproblemsimplement-stack-using-queuesa-nameimplement-stack-using-queuesa"><a href="https://leetcode.com/problems/implement-stack-using-queues/">Implement Stack Using Queues</a><a name="implement-stack-using-queues"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MyStack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/** Initialize your data structure here. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MyStack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Push element x onto stack. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Removes the element on top of the stack and returns that element. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Get the top element. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">top</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">peekLast</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Returns whether the stack is empty. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">empty</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="invert-binary-treehttpsleetcodecomproblemsinvert-binary-treea-nameinvert-binary-treea"><a href="https://leetcode.com/problems/invert-binary-tree/">Invert Binary Tree</a><a name="invert-binary-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">invertTree</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">TreeNode</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>		<span class="c1">// Swap the left and right nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">invertTree</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>			<span class="c1">// Then swap the subsequent trees of those nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">invertTree</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>					<span class="c1">// Return the original root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="fibonacci-numberhttpsleetcodecomproblemsfibonacci-numbera-namefibonacci-numbera"><a href="https://leetcode.com/problems/fibonacci-number/">Fibonacci Number</a><a name="fibonacci-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Iterative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fib</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">N</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>						<span class="c1">// fib(0) = 0; fib(1) = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">N</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">f0</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="n">fn</span> <span class="o">=</span> <span class="n">f0</span> <span class="o">+</span> <span class="n">f1</span><span class="o">;</span>				<span class="c1">// fib(n) = fib(n-1) + fib(n-2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">f0</span> <span class="o">=</span> <span class="n">f1</span><span class="o">;</span>					<span class="c1">// f0 becomes f1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">f1</span> <span class="o">=</span> <span class="n">fn</span><span class="o">;</span>					<span class="c1">// f1 becomes fn
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">f1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Dynamic Programming
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="nf">fibDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">N</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">N</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">N</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>		<span class="c1">// To store intermediate result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dp</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>						<span class="c1">// fib(0) = 0; fib(1) = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">];</span>	<span class="c1">// fib(i) = fib(i-1) + fib(i-2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>					<span class="c1">// Return the last number in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="kth-largest-elementhttpsleetcodecomproblemskth-largest-element-in-an-arraya-namekth-largest-elementa"><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">kth Largest Element</a><a name="kth-largest-element"></a></h3>
<ol>
<li>The minheap algorithm has $O(n lg n) $ complexity and $O(1)$ space. The idea here is that we use a minheap to keep only the k greatest elements. If size becomes more than k, we remove the smallest element at the top of the heap. Thereby, at the end, our kth largest element will be at the top.</li>
<li>QuickSelect Algorithm performs in $O(n)$ best case, $O(n^2)$ worst case when the pivot chosen is always the largest, so we use a random pivot.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// MinHeap Algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">kthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;((</span><span class="n">n1</span><span class="o">,</span><span class="n">n2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n1</span> <span class="o">-</span> <span class="n">n2</span><span class="o">);</span>	<span class="c1">// Initialize minheap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>				<span class="c1">// Add number one by one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">k</span><span class="o">)</span>		<span class="c1">// If size is greater than k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>			<span class="c1">// Remove the topmost element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>			<span class="c1">// The topmost element is our answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// QuickSelect Algorithm - Hoare&#39;s Partition Scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">kthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="n">arr</span> <span class="o">=</span> <span class="n">nums</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">quickselect</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">k</span><span class="o">);</span><span class="c1">// kth largest is (n-k)th largest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">quickselect</span><span class="o">(</span><span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="o">)</span>					<span class="c1">// Array contains only 1 element, that&#39;s the answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  		<span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>				<span class="c1">// Choose a random pivot between left and right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">pivotIndex</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="o">);</span>	<span class="c1">// but not left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">pivotIndex</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">pivotIndex</span><span class="o">);</span>	<span class="c1">// Partition, and find it&#39;s correct index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">pivotIndex</span><span class="o">)</span>					<span class="c1">// That index is equal to kth statistic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  		<span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">pivotIndex</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">pivotIndex</span><span class="o">)</span>			<span class="c1">// If it&#39;s less than the index, our ans lies in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  		<span class="k">return</span> <span class="n">quickselect</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">pivotIndex</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>	<span class="c1">// left side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">else</span>
</span></span><span class="line"><span class="cl">  		<span class="k">return</span> <span class="n">quickselect</span><span class="o">(</span><span class="n">pivotIndex</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>	<span class="c1">// Otherwise, it&#39;s on the right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pivotIndex</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">pivotIndex</span><span class="o">];</span>			<span class="c1">// Partition element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">swap</span><span class="o">(</span><span class="n">pivotIndex</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>				<span class="c1">// Move that element to the end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">wall</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>					<span class="c1">// wall is initially before everything
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">  		<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="o">)</span>				<span class="c1">// If the current element is &lt; than the pivot, then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    		<span class="n">swap</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="o">++</span><span class="n">wall</span><span class="o">);</span>			<span class="c1">// we need to swap it with the element next to wall.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">swap</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="o">++</span><span class="n">wall</span><span class="o">);</span>					<span class="c1">// Lastly, swap the element at wall and the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="n">wall</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="power-of-twohttpsleetcodecomproblemspower-of-twoa-namepower-of-twoa"><a href="https://leetcode.com/problems/power-of-two/">Power Of Two</a><a name="power-of-two"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPowerOfTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// n &lt; 0 cannot be powers of 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If n is odd, it can&#39;t be a power of 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>			<span class="c1">// It is a multiple of 2, so divide it by 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>			<span class="c1">// n came out to be 1 which is a power of 2, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="valid-sudokuhttpsleetcodecomproblemsvalid-sudokua-namevalid-sudokua"><a href="https://leetcode.com/problems/valid-sudoku/">Valid Sudoku</a><a name="valid-sudoku"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValidSudoku</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">.</span><span class="na">board</span> <span class="o">=</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">rowCheck</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">colCheck</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">boxCheck</span><span class="o">();</span>	<span class="c1">// Check row first, then column and at
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// last, boxes because they are time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                                <span class="c1">// consuming.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">onePassCheck</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">rows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>		<span class="c1">// 1 HashSet for each row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">columns</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>	<span class="c1">// 1 HashSet for each column
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">boxes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>	<span class="c1">// 1 HashSet for each box.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">      <span class="n">rows</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="n">columns</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="n">boxes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">          <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>							<span class="c1">// -2 = &#39;.&#39;		
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="kt">int</span> <span class="n">boxIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span><span class="o">/</span><span class="n">3</span><span class="o">)</span> <span class="o">*</span> <span class="n">3</span> <span class="o">+</span> <span class="n">j</span><span class="o">/</span><span class="n">3</span><span class="o">;</span>	<span class="c1">// Calculate which box we are in.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(!</span><span class="n">rows</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">columns</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">boxes</span><span class="o">[</span><span class="n">boxIndex</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// If the row set or the column set or the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">}</span>										<span class="c1">// box set contains that val, return false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">rowCheck</span><span class="o">(){</span>						<span class="c1">// Horizontal check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">row</span><span class="o">:</span> <span class="n">board</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">row</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>								<span class="c1">// val = -2 means &#39;.&#39; in the board
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>							<span class="c1">// If val already seen, invalid sudoku
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>						<span class="c1">// else, Mark that index as seen.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">colCheck</span><span class="o">(){</span>						<span class="c1">// Vertical Check.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">col</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">      <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">row</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">boxCheck</span><span class="o">(){</span>					<span class="c1">// For the 9 sub boxes, let the single
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">i</span><span class="o">+=</span><span class="n">3</span><span class="o">){</span>				<span class="c1">// box checker check it&#39;s validity.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">3</span><span class="o">)</span>				<span class="c1">// If any of the subbox was invalid,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">singleBoxCheck</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">))</span>				<span class="c1">// we abort and return false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">singleBoxCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">topRightRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">topRightCol</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>				<span class="c1">// Each sub box has 3 rows and 3 columns
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">topRightRow</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">topRightCol</span><span class="o">+</span><span class="n">j</span><span class="o">]-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>	<span class="c1">// This gives us the value at 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>							<span class="c1">// each cell in the sub box and we fill the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>						<span class="c1">// arr with all values that are seen.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// If seen twice, return false;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="implement-queue-using-stackhttpsleetcodecomproblemsimplement-queue-using-stackssubmissionsa-nameimplement-queue-using-stacka"><a href="https://leetcode.com/problems/implement-queue-using-stacks/submissions/">Implement Queue Using Stack</a><a name="implement-queue-using-stack"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Since we reverse stack1 into stack2, stack2 is basically our queue, so if stack2 isn&#39;t empty, then the topmost element is what we need when we pop or peek. If it is empty, then again fill it with whatever&#39;s there is stack1, and it again becomes the correct queue.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">MyQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack1</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>			<span class="c1">// Push onto stack1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">peek</span><span class="o">();</span>					<span class="c1">// First call the peek function, to make sure stack 2 isn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">stack2</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>	<span class="c1">// empty. Then, the topmost element of stack2 is what we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** Get the front element. */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">stack2</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>			
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(!</span><span class="n">stack1</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack2</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stack1</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">stack2</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>	<span class="c1">// stack2 is basically the queue, so return whatever&#39;s on the top
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** Returns whether the queue is empty. */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">empty</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">stack1</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stack2</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="palindrome-linkedlisthttpsleetcodecomproblemspalindrome-linked-listsubmissionsa-namepalindrome-linkedlista"><a href="https://leetcode.com/problems/palindrome-linked-list/submissions/">Palindrome LinkedList</a><a name="palindrome-linkedlist"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Size 0 or 1 list, must be unique.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>					<span class="c1">// Size 2 list, compare the head and tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>		<span class="c1">// values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">middleNode</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>					<span class="c1">// Standard Rabbit-Tortoise pointers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>				<span class="c1">// Fast pointer jumps twice so by the time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// it reaches the end of the list, middlenode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>						<span class="c1">// is at the middle of the linkedlist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">nextNode</span><span class="o">;</span>							<span class="c1">// These three nodes are for reversing the 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// first half of the list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">fastPointer</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">middleNode</span> <span class="o">=</span> <span class="n">middleNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// Advance middle once, fastpointer twice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">nextNode</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>					<span class="c1">// Reverse the curr node, but first store the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>						<span class="c1">// next newNode. By doing this, we would have
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>							<span class="c1">// reversed exactly half of the list because
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">nextNode</span><span class="o">;</span>						<span class="c1">// fastpointer advacnes at double the speed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">fastPointer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>					<span class="c1">// If faspointer isn&#39;t null, then we have an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">middleNode</span> <span class="o">=</span> <span class="n">middleNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// odd length list, so advance middle once,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// List looks like 1-&gt;2-&gt;3-&gt;2-&gt;1 instead of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">middleNode</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>					<span class="c1">// 1-&gt;2-&gt;3-&gt;3-&gt;2-&gt;1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">middleNode</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">prev</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>			<span class="c1">// While middle isn&#39;t null, check middlenode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// val and prev val. Prev is basically the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">middleNode</span> <span class="o">=</span> <span class="n">middleNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// the point where the list reverses.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>						<span class="c1">// Advance middle and next.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>								<span class="c1">// Values matched, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// Reversed list looks like this:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// 1&lt;-2&lt;-3&lt;-prev middle-&gt;3-&gt;2-&gt;1 in even len
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// 1&lt;-2&lt;-prev middle-&gt;2-&gt;1 in odd lengths.
</span></span></span></code></pre></div><h3 id="delete-node-in-a-linked-listhttpsleetcodecomproblemsdelete-node-in-a-linked-listsubmissionsa-namedelete-node-in-a-linked-lista"><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/submissions/">Delete Node in a Linked List</a><a name="delete-node-in-a-linked-list"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteNode</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>		<span class="c1">// Node&#39;s value becomes its next node&#39;s value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>  	<span class="c1">// Node&#39;s next is it&#39;s next&#39;s next.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="is-anagramhttpsleetcodecomproblemsvalid-anagramsubmissionsa-nameis-anagrama"><a href="https://leetcode.com/problems/valid-anagram/submissions/">Is Anagram</a><a name="is-anagram"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAnagram</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>			<span class="c1">// Can&#39;t be anagram if size aren&#39;t the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>				<span class="c1">// Acts like a hashmap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// Increment the count by 1 in the store for the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">store</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="sc">&#39;a&#39;</span><span class="o">]++;</span>			<span class="c1">// index = position of char in the alphabet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// Loop throught the second string, decrement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(--</span><span class="n">store</span><span class="o">[</span><span class="n">t</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// count of each character in store by 1, but if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// it goes below 0, then it means that character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>										<span class="c1">// occurred more than it did in s. So false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// Everything matched, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="binary-tree-pathshttpsleetcodecomproblemsbinary-tree-pathsa-namebinary-tree-pathsa"><a href="https://leetcode.com/problems/binary-tree-paths/">Binary Tree Paths</a><a name="binary-tree-paths"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">paths</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">binaryTreePaths</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>					<span class="c1">// No paths
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">paths</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">rootval</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="s">&#34;&#34;</span><span class="o">;</span>		<span class="c1">// Converting int to string.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">rootval</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">paths</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="n">String</span> <span class="n">s</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// It&#39;s a leaf, and you found a path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paths</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>									<span class="c1">// so add it to the list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>								<span class="c1">// Left side is traversable, so
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#34;-&gt;&#34;</span> <span class="o">+</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>	<span class="c1">// visit it and record its value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>								<span class="c1">// Same as above, but for right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#34;-&gt;&#34;</span> <span class="o">+</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="add-digitshttpsleetcodecomproblemsadd-digitsa-nameadd-digitsa"><a href="https://leetcode.com/problems/add-digits/">Add Digits</a><a name="add-digits"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">constantTime</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>			<span class="c1">// Already a single digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">9</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If perfectly divisible by 9, then sum will be 9.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">9</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>			<span class="c1">// Otherwise, the result is going to be n % 9.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">iterative</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">9</span><span class="o">){</span>				<span class="c1">// While number isn&#39;t between 2-9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">=</span> <span class="n">sumOfDigits</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>		<span class="c1">// make num = sum of it&#39;s digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">sumOfDigits</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>		<span class="c1">// Standard method to add the digits of a number.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>				<span class="c1">// Extract the last digit, add it to sum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">n</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>					<span class="c1">// Divide the num by 10.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="largest-perimeter-trianglehttpsleetcodecomproblemslargest-perimeter-trianglea-namelargest-perimeter-trianglea"><a href="https://leetcode.com/problems/largest-perimeter-triangle/">Largest Perimeter Triangle</a><a name="largest-perimeter-triangle"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">largestPerimeter</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>							<span class="c1">// Sort so the largest sides are at the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">)</span>	<span class="c1">// Triangle inequality Theorem : a + b &gt; c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">])</span>			<span class="c1">// If sum of last two is greater than the last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">];</span>	<span class="c1">// we found out max perimeter, otherwise
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">0</span><span class="o">;</span>								<span class="c1">// decrease i by i, then check the next three
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// triplets
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>											<span class="c1">// In the end if nothing works out, we return 0.
</span></span></span></code></pre></div><h3 id="ugly-numberhttpsleetcodecomproblemsugly-numbersubmissionsa-nameugly-numbera"><a href="https://leetcode.com/problems/ugly-number/submissions/">Ugly Number</a><a name="ugly-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isUgly</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// Negative numbers are automatically non ugly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// Keep dividing number by 2 till it is divisible
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// Keep dividing by 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">5</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// and 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span> <span class="o">==</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// If num isn&#39;t 1, that means that there are other prime factors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>							<span class="c1">// except 2,3 and 5.
</span></span></span></code></pre></div><h3 id="missing-numberhttpsleetcodecomproblemsmissing-numbera-namemissing-numbera"><a href="https://leetcode.com/problems/missing-number/">Missing Number</a><a name="missing-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">missingNumber</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>			<span class="c1">// Since it&#39;s given that the array contains
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">nsum</span> <span class="o">=</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">*(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="n">1</span><span class="o">))/</span><span class="n">2</span><span class="o">;</span>	<span class="c1">// all numbers from 0-n, we use the formula
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">arraySum</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>						<span class="c1">// to compute sum of n numbers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>		<span class="c1">// Then we loop through the array to compute
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">arraySum</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>					<span class="c1">// the sum of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">nsum</span> <span class="o">-</span> <span class="n">arraySum</span><span class="o">;</span>						<span class="c1">// Subtract the array sum from the required
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// sum, and that gives us the missing number
</span></span></span></code></pre></div><h3 id="is-bad-versionhttpsleetcodecomproblemsfirst-bad-versionsubmissionsa-nameis-bad-versiona"><a href="https://leetcode.com/problems/first-bad-version/submissions/">Is Bad Version</a><a name="is-bad-version"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">firstBadVersion</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// Basic Binary Search Algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>		<span class="c1">// high - low to prefent integer overflow.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">isBadVersion</span><span class="o">(</span><span class="n">mid</span><span class="o">))</span>			<span class="c1">// if the model at mid was bad version, then we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>					<span class="c1">// could possibly have a bad version before it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// If it wasn&#39;t, then our first bad version lies
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>									<span class="c1">// beyond the middle element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="move-zeroeshttpsleetcodecomproblemsmove-zeroessolutiona-namemove-zeroesa"><a href="https://leetcode.com/problems/move-zeroes/solution/">Move Zeroes</a><a name="move-zeroes"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that we know the end of the array is going to contain zeroes. So first, iterate over the array, if you find any non-zero value, copy it down to the front of the array. Then we you are done, length of the array minus the last index where you copied the non-zero element is the number of zeroes you need to fill in. So iterate from that last non-zero index to the end of the array and fill in zeroes.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveZeroes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lastNonZeroIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">nums</span><span class="o">[</span><span class="n">lastNonZeroIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lastNonZeroIndex</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">This solution is an extension of the above, but a better one because we only swap elements when needed and do not do any unnecessary writes. Start from the beginning of the array, maintain the last position of non-zero value you saw, and the current element. If you see a non-zero value, swap the current value with the index just after the last non-zero index you have, and then increment the non-zero index by 1 because you just found a new non-zero value. This helps us prepare for the next non-zero value we find and copy it at this index+1. By doing so, we are basically partitioning the array into non-zeroes and zero values.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveZeroes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">lastNonZeroIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span> <span class="o">,</span> <span class="n">lastNonZeroIndex</span><span class="o">++);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="word-patternhttpsleetcodecomproblemsword-patterna-nameword-patterna"><a href="https://leetcode.com/problems/word-pattern/">Word Pattern</a><a name="word-pattern"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">wordPattern</span><span class="o">(</span><span class="n">String</span> <span class="n">pattern</span><span class="o">,</span> <span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="o">[]</span> <span class="n">words</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">);</span>		<span class="c1">// Split str into words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>	<span class="c1">// If length of pattern and words mismatch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// then pattern do not match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">patternStore</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Map pattern char to word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Character</span><span class="o">&gt;</span> <span class="n">wordMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>		<span class="c1">// Map word to pattern char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>					<span class="c1">// Get the char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">patternStore</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>		<span class="c1">// Put it in patternStore if absent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">patternStore</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span>	<span class="c1">// If it was already there and it doesn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// map to words[i], we have a violation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wordMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">c</span><span class="o">);</span>			<span class="c1">// Now check the other way around. If
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">!=</span> <span class="n">c</span><span class="o">)</span>				<span class="c1">// words is absent in the map, map it to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// the char. If present, then fetch it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>												<span class="c1">// mapping and check if both match to c.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// No violation, so return true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="can-win-nimhttpsleetcodecomproblemsnim-gamea-namecan-win-nima"><a href="https://leetcode.com/problems/nim-game/">Can Win Nim</a><a name="can-win-nim"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canWinNim</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="n">4</span> <span class="o">!=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// You can always win the game if n is not divisible by 4.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="power-of-threehttpsleetcodecomproblemspower-of-threea-namepower-of-threea"><a href="https://leetcode.com/problems/power-of-three/">Power Of Three</a><a name="power-of-three"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPowerOfThree</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span>				<span class="c1">// If negative, it can&#39;t be a power of 3.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// While n is divisible by 3, keep dividing it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">n</span> <span class="o">/=</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">n</span> <span class="o">==</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// In the end, if it was a power of 3, then n should be 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="power-of-fourhttpsleetcodecomproblemspower-of-foursubmissionsa-namepower-of-foura"><a href="https://leetcode.com/problems/power-of-four/submissions/">Power of Four</a><a name="power-of-four"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">You can also use the iterative method that I have used in Power of Two and Power of Three problems. I just wanted to try a different approach here. This is a constant time function.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPowerOfFour</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">pow</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">num</span><span class="o">)/</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>	<span class="c1">// Calculate x in 4^x = num using logs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">pow</span> <span class="o">==</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">pow</span><span class="o">;</span>					<span class="c1">// Making sure that x is an integer and not a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// fractional exponent.
</span></span></span></code></pre></div><h3 id="reverse-stringhttpsleetcodecomproblemsreverse-stringa-namereverse-stringa"><a href="https://leetcode.com/problems/reverse-string/">Reverse String</a><a name="reverse-string"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">1 Liner solution. Basically, create a StringBuilder of the string, the builder already has a reverse method, so reverse it and then return it&#39;s toString.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Golfing aside, here is how one is expected to solve it in an interview.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>		<span class="c1">// Create a char array of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>				<span class="c1">// length of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// We only need to iterate over half the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>			<span class="c1">// Swap the 0th index element with (len-1)th,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>		<span class="c1">// 1st index element with (len-2)th, until you get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>			<span class="c1">// to the middle element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>			<span class="c1">// Return a new string with the reversed array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="implement-strstrhttpsleetcodecomproblemsimplement-strstrsubmissionsa-nameimplement-strstra"><a href="https://leetcode.com/problems/implement-strstr/submissions/">Implement strStr()</a><a name="implement-strstr()"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea here is that you only need to iterate haystack length - needle length, and then check the substring of size = needle length in haystack from each index. If you are successfully able to match each character of the needle in the corresponding substring in haystack, return the index you start from. 
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">strStr</span><span class="o">(</span><span class="n">String</span> <span class="n">haystack</span><span class="o">,</span> <span class="n">String</span> <span class="n">needle</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>	<span class="c1">// Needle length can&#39;t be &gt; than haystack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hl</span> <span class="o">=</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">nl</span> <span class="o">=</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nl</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>								<span class="c1">// Empty strings are always a match starting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>								<span class="c1">// from 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">hl</span><span class="o">-</span><span class="n">nl</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>			<span class="c1">// Iterate haystack length - needle length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nl</span> <span class="o">&amp;&amp;</span> <span class="n">haystack</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="n">needle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span> <span class="o">++</span><span class="n">j</span><span class="o">)}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">nl</span><span class="o">-</span><span class="n">1</span><span class="o">)</span>						<span class="c1">// We are checking how far from i can we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>						<span class="c1">// match. If i matched with j, increment j
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>										<span class="c1">// and then match the character i+1 to j.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// If that matches, increment j and match i+2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>									<span class="c1">// j == n-1 checked wether or not if we were
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// able to match the full needle string, if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// yes, then i is our index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// in the end, nothing matched, so return -1
</span></span></span></code></pre></div><h3 id="reverse-vowels-of-a-stringhttpsleetcodecomproblemsreverse-vowels-of-a-stringa-namereverse-vowels-of-a-stringa"><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/">Reverse Vowels of a String</a><a name="reverse-vowels-of-a-string"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseVowels</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>					<span class="c1">// No need to reverse a string of length 0 or 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>	<span class="c1">// Get the char array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVowel</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]))</span>		<span class="c1">// While left is pointing to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span><span class="o">++;</span>										<span class="c1">// consonant, increment it/
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVowel</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]))</span>	<span class="c1">// While right is pointing to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">right</span><span class="o">--;</span>									<span class="c1">// consonant, decrement it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>							<span class="c1">// Left and right are now pointing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>							<span class="c1">// to vowels, so swap it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>								<span class="c1">// And then increment left and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">left</span><span class="o">++;</span>											<span class="c1">// decrement right to process the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">right</span><span class="o">--;</span>										<span class="c1">// inner string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>			<span class="c1">// Return a string from the reveresed array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isVowel</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">){</span>	<span class="c1">// Function to check if a character is a vowel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">switch</span> <span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;a&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;e&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;i&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;o&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;u&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;A&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;E&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;I&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;O&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;U&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="intersection-of-two-arrayshttpsleetcodecomproblemsintersection-of-two-arraysa-nameintersection-of-two-arraysa"><a href="https://leetcode.com/problems/intersection-of-two-arrays/">Intersection of two arrays</a><a name="intersection-of-two-arrays"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">intersection</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>		<span class="c1">// Record all unique values in set 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">set1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intersect</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>		<span class="c1">// We will use it to record intersection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums2</span><span class="o">)</span>								<span class="c1">// For each value in nums2 array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">set1</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>						<span class="c1">// If set1 contains it, we found an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">intersect</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>						<span class="c1">// intersecting element, so add it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">intersect</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>			<span class="c1">// We will now convert the set to an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>										<span class="c1">// array and then return the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">intersect</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="is-perfect-squarehttpsleetcodecomproblemsvalid-perfect-squarea-nameis-perfect-squarea"><a href="https://leetcode.com/problems/valid-perfect-square/">Is Perfect Square</a><a name="is-perfect-square"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea here is to close in on the square root using binary search algorithm. 
</span></span></span><span class="line"><span class="cl"><span class="cm">I handle 4 seperately because it&#39;s root is the only one where 4/3 &lt; it&#39;s square root. 
</span></span></span><span class="line"><span class="cl"><span class="cm">All other numbers square root is greater than its value/3.
</span></span></span><span class="line"><span class="cl"><span class="cm">So we create a lowerBound of 1 and an upperBound of num/3. Then if the middle value&#39;s square
</span></span></span><span class="line"><span class="cl"><span class="cm">overshoots, we make upperBound = mid-1, otherwise increment lowerBound to mid+1. This way, we
</span></span></span><span class="line"><span class="cl"><span class="cm">close on the square root from both sides, and if the middle values is the square root, it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">square will yield num.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPerfectSquare</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">2</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="n">4</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="n">num</span><span class="o">/</span><span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">square</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">lowerBound</span> <span class="o">&lt;=</span> <span class="n">upperBound</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">lowerBound</span> <span class="o">+</span> <span class="o">(</span><span class="n">upperBound</span><span class="o">-</span><span class="n">lowerBound</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">square</span> <span class="o">=</span> <span class="n">mid</span><span class="o">*</span><span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">square</span> <span class="o">==</span> <span class="n">num</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">square</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">upperBound</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="sum-of-two-integershttpsleetcodecomproblemssum-of-two-integersa-namesum-of-two-integersa"><a href="https://leetcode.com/problems/sum-of-two-integers/">Sum of Two Integers</a><a name="sum-of-two-integers"></a></h3>
<p>I cannot explain it better than this <a href="https://leetcode.com/problems/sum-of-two-integers/discuss/132479/Simple-explanation-on-how-to-arrive-at-the-solution">post</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">getSum</span><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">carry</span> <span class="o">&lt;&lt;</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="guess-number-higher-or-lowerhttpsleetcodecomproblemsguess-number-higher-or-lowera-nameguess-number-higher-or-lowera"><a href="https://leetcode.com/problems/guess-number-higher-or-lower/">Guess Number Higher or Lower</a><a name="guess-number-higher-or-lower"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">guessNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>				<span class="c1">// Standard binary search algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span><span class="o">,</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="n">2</span><span class="o">;</span>		<span class="c1">// Arbitrary result, but not 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">(</span><span class="n">high</span><span class="o">-</span><span class="n">low</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>			<span class="c1">// Check the mid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span> <span class="o">=</span> <span class="n">guess</span><span class="o">(</span><span class="n">mid</span><span class="o">);</span>				<span class="c1">// Check if our guess is correct
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>					<span class="c1">// If result == -1, then we overshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>					<span class="c1">// So we can discard all values &gt; mid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>				<span class="c1">// If result == 1, we undershot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>					<span class="c1">// Need to discard all the values &lt; mid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>								<span class="c1">// Result == 0, so return the mid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="ransom-notehttpsleetcodecomproblemsransom-notesubmissionsa-nameransom-notea"><a href="https://leetcode.com/problems/ransom-note/submissions/">Ransom Note</a><a name="ransom-note"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canConstruct</span><span class="o">(</span><span class="n">String</span> <span class="n">ransomNote</span><span class="o">,</span> <span class="n">String</span> <span class="n">magazine</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">magazine</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>		<span class="c1">// First, fill the store with available
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">store</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++;</span>							<span class="c1">// characters from the magazine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">ransomNote</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>		<span class="c1">// Then, scan through the note, decrement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(--</span><span class="n">store</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// each char&#39;s index by 1 because we used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// it. If it&#39;s frequency drops below 0,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>								<span class="c1">// then it means that we need more chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// than available. In the end, return
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// true if everything worked out.
</span></span></span></code></pre></div><h3 id="first-unique-character-in-a-stringhttpsleetcodecomproblemsfirst-unique-character-in-a-stringsubmissionsa-namefirst-unique-character-in-a-stringa"><a href="https://leetcode.com/problems/first-unique-character-in-a-string/submissions/">First Unique Character in a String</a><a name="first-unique-character-in-a-string"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">firstUniqChar</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>			<span class="c1">// Preprocess freq array to maintain freq of each
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>		<span class="c1">// character in the string s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">chars</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// Make a second pass through the chars of the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// string in order, and if any of the char&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">i</span><span class="o">;</span>						<span class="c1">// frequency is 1, that&#39;s our unique char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>								<span class="c1">// Otherwise, no unique character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-the-differencehttpsleetcodecomproblemsfind-the-differencea-namefind-the-differencea"><a href="https://leetcode.com/problems/find-the-difference/">Find the Difference</a><a name="find-the-difference"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea here is same as the problem where we are required to find a unique int
</span></span></span><span class="line"><span class="cl"><span class="cm">in an array containing duplicates except one. We use the xor operator between each character
</span></span></span><span class="line"><span class="cl"><span class="cm">of the string s and t, and the ones that are duplicate will xor to give 0. XOR of any element
</span></span></span><span class="line"><span class="cl"><span class="cm">with 0 is the element itself, and XOR of two same elements gives 0. This way, since string s
</span></span></span><span class="line"><span class="cl"><span class="cm">and t basically has pairs of repeating characters except one, the unique element will XOR
</span></span></span><span class="line"><span class="cl"><span class="cm">with 0 and give us it&#39;s ASCII code. The only thing we need to take care of is to now shift it
</span></span></span><span class="line"><span class="cl"><span class="cm">up by 26, so we add &#39;a&#39; and convert it to char.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">char</span> <span class="nf">findTheDifference</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">xor</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">xor</span> <span class="o">^=</span> <span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">t</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">xor</span> <span class="o">^=</span> <span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">xor</span><span class="o">+</span><span class="sc">&#39;a&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="nth-digithttpsleetcodecomproblemsnth-digita-namenth-digita"><a href="https://leetcode.com/problems/nth-digit/">Nth Digit</a><a name="nth-digit"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">Notice that # of digits between 0-9 is 1*9, 10-99 is 2*90, 100-999 is 3*900. If we generalize
</span></span></span><span class="line"><span class="cl"><span class="cm">it, it is exactly equal to 9 * (num of digits in the number) * 10^{# of digits - 1}.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findNthDigit</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pow</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>				<span class="c1">// First we need to figure out how many digits there are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="n">9</span><span class="o">;</span>		<span class="c1">// in the number.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">upperBound</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">-=</span> <span class="n">upperBound</span><span class="o">;</span>		<span class="c1">// If n is a two digit number, subtract the 9 single digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">pow</span><span class="o">;</span>					<span class="c1">// numbers, if 3 digit, subtract the first 189 digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">upperBound</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">10</span><span class="o">,</span> <span class="n">pow</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">pow</span> <span class="o">*</span> <span class="n">9</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>							<span class="c1">// pow allows us to track how many digits there are in num.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">10</span><span class="o">,</span><span class="n">pow</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)/</span><span class="n">pow</span><span class="o">;</span>		<span class="c1">// Calculate which number we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">position</span> <span class="o">=</span> <span class="n">pow</span> <span class="o">-</span> <span class="n">1</span> <span class="o">-</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">pow</span><span class="o">;</span>				<span class="c1">// Calculate which index we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">position</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>					<span class="c1">// Divide num that many times
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>									<span class="c1">// num % 10 gives us that digit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="sum-of-left-leaveshttpsleetcodecomproblemssum-of-left-leavesa-namesum-of-left-leavesa"><a href="https://leetcode.com/problems/sum-of-left-leaves/">Sum of Left Leaves</a><a name="sum-of-left-leaves"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumOfLeftLeaves</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Empty tree, therefore total is 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Initialize sum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Look ahead and check. If left is not null but left is a leaf, then sum is the value of the left leaf.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// But if left is null or left is an inner node, then we need to explore it, so sum is whatever the subtree from the left node returns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">=</span> <span class="n">sumOfLeftLeaves</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// We computed the sum of the left side. Now we need to traverse the right side and fetch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// the sum, so total sum is sum of the left side as computed above + sum returned by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// traversing the right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">sumOfLeftLeaves</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="longest-palindromehttpsleetcodecomproblemslongest-palindromea-namelongest-palindromea"><a href="https://leetcode.com/problems/longest-palindrome/">Longest Palindrome</a><a name="longest-palindrome"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>		<span class="c1">// To record the frequency of each char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">]++;</span>					<span class="c1">// Increment count by 1 for each character observed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// length of the longest palindrome
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">isOdd</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>			<span class="c1">// Check if our palindrome length is odd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">128</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// Go through each character&#39;s index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// Only if it has been observed atleast once
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>		<span class="c1">// Store it&#39;s frequency
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">used</span><span class="o">;</span>				<span class="c1">// Record how many of it&#39;s occurrences we will use
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If a perfect multiple of 2, we will use all
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">used</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">used</span> <span class="o">=</span> <span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>		<span class="c1">// If odd occurrences, then the max we can use to form a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">isOdd</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>		<span class="c1">// valid palindrome is val-1. It also tells us that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>						<span class="c1">// palindrome is going to be of odd length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">len</span> <span class="o">+=</span> <span class="n">used</span><span class="o">;</span>			<span class="c1">// Finally, increment length by the number of chars used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">isOdd</span><span class="o">)</span>						<span class="c1">// If length is odd, we can always insert any single
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">len</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// character in the middle to keep the palindrome valid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">len</span><span class="o">;</span>						<span class="c1">// If the length is even, then we can&#39;t do anything.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="fizz-buzzhttpsleetcodecomproblemsfizz-buzza-namefizz-buzza"><a href="https://leetcode.com/problems/fizz-buzz/">Fizz Buzz</a><a name="fizz-buzz"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">fizzBuzz</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>				<span class="c1">// Loop from 1 to n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">15</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>						<span class="c1">// If i divisible by 15, add &#34;FizzBuzz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">5</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// i&#39;s not a multiple of 15, check if it&#39;s a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Buzz&#34;</span><span class="o">);</span>					<span class="c1">// multiple of 5. If so, add &#34;Buzz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// i&#39;s not a multiple of 5, check if it&#39;s a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Fizz&#34;</span><span class="o">);</span>					<span class="c1">// multiple of 3, if so, add &#34;Fizz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#34;&#34;</span><span class="o">);</span>						<span class="c1">// Otherwise, just add the String type of the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">nums</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="third-maximum-numberhttpsleetcodecomproblemsthird-maximum-numbera-namethird-maximum-numbera"><a href="https://leetcode.com/problems/third-maximum-number/">Third maximum Number</a><a name="third-maximum-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">thirdMax</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// Empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// Size 1 array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span>		<span class="c1">// Size 2 array, check between 0th element or 1st element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">?</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">:</span> <span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">firstMax</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>		<span class="c1">// Lowest values for all three
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="n">secondMax</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">thirdMax</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>					<span class="c1">// For each number in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">firstMax</span><span class="o">){</span>				<span class="c1">// If num &gt; than the largest, then old largest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">thirdMax</span> <span class="o">=</span> <span class="n">secondMax</span><span class="o">;</span>		<span class="c1">// becomes second largest and second largest becomes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">secondMax</span> <span class="o">=</span> <span class="n">firstMax</span><span class="o">;</span>		<span class="c1">// first largest, then update the largest.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">firstMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">secondMax</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">firstMax</span><span class="o">){</span>	<span class="c1">// If num &gt; second and num is not is the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">thirdMax</span> <span class="o">=</span> <span class="n">secondMax</span><span class="o">;</span>					<span class="c1">// same as first, first largets becomes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">secondMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>							<span class="c1">// second largest and update the second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">thirdMax</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">secondMax</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">firstMax</span><span class="o">)</span> <span class="c1">// // If num &gt; third, we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            	<span class="n">thirdMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>						<span class="c1">// need to check that it is not the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>												<span class="c1">// as the first and second largest.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">thirdMax</span> <span class="o">==</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">)</span>					<span class="c1">// This check allows us to make sure that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">firstMax</span><span class="o">;</span>						<span class="c1">// we do indeed have a third max and is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">thirdMax</span><span class="o">;</span>							<span class="c1">// not what we initialized initially.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="add-two-stringshttpsleetcodecomproblemsadd-stringsa-nameadd-two-stringsa"><a href="https://leetcode.com/problems/add-strings/">Add Two Strings</a><a name="add-two-strings"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">addStrings</span><span class="o">(</span><span class="n">String</span> <span class="n">num1</span><span class="o">,</span> <span class="n">String</span> <span class="n">num2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;0&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">num2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;0&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">num1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/** We use a char array to maintain the digit at each index. We want the array to be of
</span></span></span><span class="line"><span class="cl"><span class="cm">    the size of the largest string + 1 to handle carry bit if any at the end. We start
</span></span></span><span class="line"><span class="cl"><span class="cm">    adding each digit of the string from the end, and place it in it&#39;s correct index at the
</span></span></span><span class="line"><span class="cl"><span class="cm">    end of the sum array. This way, we avoid reversing it and return the answer in constant
</span></span></span><span class="line"><span class="cl"><span class="cm">    time. Take care to convert the digit you compute by adding &#39;0&#39;. Lastly, if the carry bit
</span></span></span><span class="line"><span class="cl"><span class="cm">    is 1, we need to make the 0th index as 1, and return the string by using the sum array.
</span></span></span><span class="line"><span class="cl"><span class="cm">    If it&#39;s not 1, then the sum array has a leading 0 which we don&#39;t want. So we use Java&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">    String constructor that takes in the char array, startingIndex in that array and the
</span></span></span><span class="line"><span class="cl"><span class="cm">    number of elements of that array we want. So if the carry isn&#39;t 1, we technically want
</span></span></span><span class="line"><span class="cl"><span class="cm">    everything from index 1 and # of elements = sum.length - 1 because we discard 0 index.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">())];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">idx1</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">,</span> <span class="n">idx2</span> <span class="o">=</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">,</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">total</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">idx1</span> <span class="o">&gt;=</span> <span class="n">0</span> <span class="o">||</span> <span class="n">idx2</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">n1</span> <span class="o">=</span> <span class="n">idx1</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">num1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx1</span><span class="o">--)-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n2</span> <span class="o">=</span> <span class="n">idx2</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">num2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx2</span><span class="o">--)-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">total</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="n">carry</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">carry</span> <span class="o">=</span> <span class="n">total</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span><span class="o">[</span><span class="n">index</span><span class="o">--]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">total</span> <span class="o">%</span> <span class="n">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="construct-quad-treehttpsleetcodecomproblemsconstruct-quad-treea-nameconstruct-quad-treea"><a href="https://leetcode.com/problems/construct-quad-tree/">Construct Quad Tree</a><a name="construct-quad-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">grid</span><span class="o">;</span>					<span class="c1">// Store it once, instead of passing it over &amp; over.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">Node</span> <span class="nf">construct</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">_grid</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">grid</span> <span class="o">=</span> <span class="n">_grid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">helper</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">0</span><span class="o">,</span><span class="n">grid</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>		<span class="c1">// Ask helper to build the tree.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">Node</span> <span class="nf">helper</span><span class="o">(</span><span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="n">0</span><span class="o">)</span>						<span class="c1">// Base case: if empty grid or if we are done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>					<span class="c1">// checking the full grid, return null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">grid</span><span class="o">[</span><span class="n">top</span><span class="o">][</span><span class="n">left</span><span class="o">];</span>			<span class="c1">// Get the topleft value, and start checking the box
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>		<span class="c1">// of len*len. If at any point, the value doesn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>	<span class="c1">// match the key, we have found a breakpoint from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">grid</span><span class="o">[</span><span class="n">top</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="n">key</span><span class="o">){</span>	<span class="c1">// where we need to break the grid into four
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="o">;</span>		<span class="c1">// grids, each of len = len/2. The topleft grid has
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> 	<span class="c1">// the same top and left point, the topright
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">,</span><span class="n">left</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>	<span class="c1">// grid has left point shifted to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">offset</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>	<span class="c1">// the right by offset.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">+</span><span class="n">offset</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>	<span class="c1">// The bottom left grid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">+</span><span class="n">offset</span><span class="o">,</span> <span class="n">left</span><span class="o">+</span><span class="n">offset</span><span class="o">,</span> <span class="n">offset</span><span class="o">));</span>	<span class="c1">// is shifted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>	<span class="c1">// downwards by offset with the same left point. The bottom right grid will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>		<span class="c1">// have an index where it&#39;s top is shifted down by len/2 and left by left/2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>			<span class="c1">// We know that the node will have a value = true if 1 else false and it won&#39;t be a leaf, so true, false, topleft, topright, bottomleft, bottomright.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">1</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>	<span class="c1">// Everything passed, so we return a new Node whose value is true if key is 1, else false and it will be a leaf, with
</span></span></span><span class="line"><span class="cl"><span class="c1">// no children, so 4 nulls.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="n-ary-tree-level-order-traversalhttpsleetcodecomproblemsn-ary-tree-level-order-traversala-namen-ary-tree-level-order-traversala"><a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/">N-ary Tree Level Order Traversal</a><a name="n-ary-tree-level-order-traversal"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">levelOrder</span><span class="o">(</span><span class="n">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Result list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>								<span class="c1">// If root is null, return empty list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>				<span class="c1">// BFS Queue. Add the root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>							<span class="c1">// While q isn&#39;t empty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>						<span class="c1">// Check how many elements in that level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">level</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">size</span><span class="o">);</span><span class="c1">// level list to store elements.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>				<span class="c1">// Remove each node for whatever the size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>						<span class="c1">// Add that node&#39;s value and add all of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">level</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>						<span class="c1">// its children to the queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">child</span><span class="o">:</span> <span class="n">n</span><span class="o">.</span><span class="na">children</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>								<span class="c1">// Add the level array to the result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>										<span class="c1">// Return the result list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="number-of-segments-in-a-stringhttpsleetcodecomproblemsnumber-of-segments-in-a-stringa-namenumber-of-segments-in-a-stringa"><a href="https://leetcode.com/problems/number-of-segments-in-a-string/">Number of Segments in a String</a><a name="number-of-segments-in-a-string"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">countSegments</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// Empty String
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">segments</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>						<span class="c1">// Record segments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>				<span class="c1">// We will compare adjacent characters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// Start looking at chars from index 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>			<span class="c1">// Get the current char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>		<span class="c1">// If previous char wasn&#39;t a space but the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">segments</span><span class="o">;</span>						<span class="c1">// current char is, we found a segment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>						<span class="c1">// Make previous = current for next iteration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">This line is important. If prev was an empty space, that means that all we have been looking
</span></span></span><span class="line"><span class="cl"><span class="cm">at was empty spaces towards the end. So return whatever segments we found in the beginning
</span></span></span><span class="line"><span class="cl"><span class="cm">of the string. But if prev wasn&#39;t a space, that means the char next to prev might have been
</span></span></span><span class="line"><span class="cl"><span class="cm">an empty space or just a normal character. In any case, we would want to include that last
</span></span></span><span class="line"><span class="cl"><span class="cm">segment, so we return segment+1.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">prev</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span> <span class="o">?</span> <span class="n">segments</span> <span class="o">:</span> <span class="n">segments</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="binary-tree-level-order-traversalhttpsleetcodecomproblemsbinary-tree-level-order-traversala-namebinary-tree-level-order-traversala"><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">Binary Tree Level Order Traversal</a><a name="binary-tree-level-order-traversal"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">levelOrder</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// Empty Tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>	<span class="c1">// BFS Queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>					<span class="c1">// While we have something to process
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">level</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>				<span class="c1">// Check how many elements at the current level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">            <span class="n">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>		<span class="c1">// Remove one element each time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>				<span class="c1">// If not null, add it&#39;s val to the level list,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">level</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>		<span class="c1">// and it&#39;s left and right children to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>			<span class="c1">// to process in order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">level</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>				<span class="c1">// If level list wasn&#39;t empty,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>				<span class="c1">// add it to the result list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="path-sum-iiihttpsleetcodecomproblemspath-sum-iiisubmissionsa-namepath-sum-iiia"><a href="https://leetcode.com/problems/path-sum-iii/submissions/">Path Sum III</a><a name="path-sum-iii"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sumToWays</span><span class="o">;</span>			<span class="c1">// Record how many ways there are to form sum
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">ways</span><span class="o">;</span>										<span class="c1">// Total number of ways.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">pathSum</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">ways</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">1</span><span class="o">);</span>							<span class="c1">// 1 way to form a sum of 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">helper</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ways</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The idea here is as follows. Start with the root node, and keep a running total. We maintain
</span></span></span><span class="line"><span class="cl"><span class="cm">how many ways there to form a running sum. Then we check how many ways there are to form
</span></span></span><span class="line"><span class="cl"><span class="cm">(running sum) - (sum we are looking for). If there is a way to form it, then we increase the
</span></span></span><span class="line"><span class="cl"><span class="cm">number of ways to form sum. We then have to update the map to record how many ways can the
</span></span></span><span class="line"><span class="cl"><span class="cm">running sum be formed. If it&#39;s something we could form before, increment it, or else set it
</span></span></span><span class="line"><span class="cl"><span class="cm">to 1. Now, traverse the left side and then the right side. In the end, for each time we
</span></span></span><span class="line"><span class="cl"><span class="cm">incremented the count for a running sum, we need to decrement it because we are backtracking.
</span></span></span><span class="line"><span class="cl"><span class="cm">We are first going down, incrementing the count for runningSum, then we move up and decrement
</span></span></span><span class="line"><span class="cl"><span class="cm">it by 1 for each time we observed it. This is to maintain the Pre-Order traversal.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">runningSum</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">runningSum</span> <span class="o">+=</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ways</span> <span class="o">+=</span> <span class="n">sumToWays</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">runningSum</span><span class="o">-</span><span class="n">sum</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">runningSum</span><span class="o">,</span> <span class="n">sumToWays</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">runningSum</span><span class="o">,</span> <span class="n">0</span><span class="o">)+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">runningSum</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">runningSum</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">runningSum</span><span class="o">,</span> <span class="n">sumToWays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">runningSum</span><span class="o">)-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-all-anagrams-in-a-stringhttpsleetcodecomproblemsfind-all-anagrams-in-a-stringa-namefind-all-anagrams-in-a-stringa"><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/">Find All Anagrams in a String</a><a name="find-all-anagrams-in-a-string"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">findAnagrams</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">slen</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">plen</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">slen</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">slen</span> <span class="o">&lt;</span> <span class="n">plen</span> <span class="o">||</span> <span class="n">plen</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>				<span class="c1">// Store the freq of chars in p
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">p</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">sArr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>			<span class="c1">// Get the chars of the string s as an array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">slen</span><span class="o">){</span>						<span class="c1">// While everything is not processed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(--</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">end</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// decrease the freq of the char at index end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">plen</span><span class="o">--;</span>							<span class="c1">// if it&#39;s &gt; 0, then we matched something in p
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>											<span class="c1">// so decrease plen by 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">plen</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>					<span class="c1">// If plen goes to 0, we were able to match all
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">+</span><span class="n">1</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>	<span class="c1">// chars of p. If length of the matched chars is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>			<span class="c1">// equal to length p, we found a start point.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">start</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// Check if the freq of char at start index is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">plen</span><span class="o">++;</span>						<span class="c1">// &gt;= 0. If it is, shift the window to the right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">start</span><span class="o">++]-</span><span class="sc">&#39;a&#39;</span><span class="o">];</span>		<span class="c1">// but first restore the frequency of the char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>									<span class="c1">// at the index start.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">end</span><span class="o">++;</span>								<span class="c1">// Get ready to inspect the new element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>							<span class="c1">// Return the answer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="arranging-coinshttpsleetcodecomproblemsarranging-coinsa-namearranging-coinsa"><a href="https://leetcode.com/problems/arranging-coins/">Arranging Coins</a><a name="arranging-coins"></a></h3>
<p>The idea is as follows. Sum of first n numbers is given by $\frac{n^2+n}{2}$. We need to find $n$ such that sum of $n$ numbers is closest to the number of coins we have. That is, $\frac{n^2+n}{2} = k$ where $k$ is the number of coins we have. So, everything boils down to solving the quadratic equation $n^2 + n - 2k = 0$. We use the quadratic formula where for any quadratic equation $ax^2 -bx + c$ is solved substituting for $a$, $b$ and $c$ in $x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2}$. Here, $a$ and $b$ are always going to be 1, while $c$ is always going to be $2k$. Substitute those, and solve the equation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">arrangeCoins</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// return solveQuadratic(n);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">iterative</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">solveQuadratic</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">1</span> <span class="o">+</span> <span class="n">8</span><span class="o">*(</span><span class="kt">long</span><span class="o">)</span><span class="n">n</span><span class="o">)-</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">iterative</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">used</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">level</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>		<span class="c1">// Coins used, and level completed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>					<span class="c1">// While coins left are greater than 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">n</span><span class="o">-=</span><span class="n">used</span><span class="o">;</span>					<span class="c1">// Calculcate remaining coins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>					<span class="c1">// If there are still some coins left,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">level</span><span class="o">;</span>				<span class="c1">// we were able to fill the level.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">used</span><span class="o">;</span>						<span class="c1">// Prepare used for the next level, which is plus 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">level</span><span class="o">;</span>					<span class="c1">// Return level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="hamming-distancehttpsleetcodecomproblemshamming-distancea-namehamming-distancea"><a href="https://leetcode.com/problems/hamming-distance/">Hamming Distance</a><a name="hamming-distance"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hammingDistance</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Track differences
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>	<span class="c1">// While both of them aren&#39;t 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!=</span> <span class="n">y</span> <span class="o">%</span> <span class="n">2</span><span class="o">)</span>		<span class="c1">// Check the bit of x and y by mod 2. If they are unequal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">diff</span><span class="o">++;</span>				<span class="c1">// increment difference.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">x</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>					<span class="c1">// Divide x and y by 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">y</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">diff</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="string-compressionhttpsleetcodecomproblemsstring-compressiona-namestring-compressiona"><a href="https://leetcode.com/problems/string-compression/">String Compression</a><a name="string-compression"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">compress</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>			<span class="c1">// No need to reverse array of length 0 or 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">len</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arrayIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// To maintain the length of new array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// start index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// end index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">first</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>	<span class="c1">// Record the char we are looking at.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// count is 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">==</span> <span class="n">first</span><span class="o">){</span>	<span class="c1">// while the char is the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">end</span><span class="o">;</span>					<span class="c1">// increment end to check next char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">count</span><span class="o">;</span>				<span class="c1">// and increment the count.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">start</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>				<span class="c1">// shift start to end to check next sequence of chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>	<span class="c1">// our arrayIndex points to to the new array&#39;s 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">1</span><span class="o">){</span>				<span class="c1">// indices. So copy the first char to arrayIndex.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>	<span class="c1">//Only if count isn&#39;t 1, if count is less than 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">count</span><span class="o">+</span><span class="sc">&#39;0&#39;</span><span class="o">);</span>	<span class="c1">// then we simply convert count to char and write it next to the char we just overwrote.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>						<span class="c1">// Otherwise, it has many digits. So convert it to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">toCharArray</span><span class="o">()){</span>	<span class="c1">// string and add all it&#39;s digit to the array one by one while increment arrayIndex.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arrayIndex</span><span class="o">;</span>			<span class="c1">// Wherever arrayIndex is, is the new length for the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="number-of-boomerangshttpsleetcodecomproblemsnumber-of-boomerangsa-namenumber-of-boomerangsa"><a href="https://leetcode.com/problems/number-of-boomerangs/">Number of Boomerangs</a><a name="number-of-boomerangs"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">numberOfBoomerangs</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">boomerangs</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>	<span class="c1">// To record points with same dist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">i</span><span class="o">:</span> <span class="n">points</span><span class="o">){</span>		<span class="c1">// Compute distance between one point and every other.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">map</span><span class="o">.</span><span class="na">clear</span><span class="o">()</span>				<span class="c1">// clear map before each relative distance computation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">j</span><span class="o">:</span> <span class="n">points</span><span class="o">){</span>	<span class="c1">// Compute distance with other points
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span>			<span class="c1">// Don&#39;t compare the same two points.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">i</span><span class="o">[</span><span class="n">0</span><span class="o">]-</span><span class="n">j</span><span class="o">[</span><span class="n">0</span><span class="o">],</span><span class="n">2</span><span class="o">)</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">i</span><span class="o">[</span><span class="n">1</span><span class="o">]-</span><span class="n">j</span><span class="o">[</span><span class="n">1</span><span class="o">],</span><span class="n">2</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">prevCount</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">dist</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>	<span class="c1">// Check how many points are equidistant from point i.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">boomerangs</span> <span class="o">+=</span> <span class="n">prevCount</span> <span class="o">*</span> <span class="n">2</span><span class="o">;</span>	<span class="c1">//  Number of boomerangs = whatever pairs there were before times 2, because you can form twice the number of different orders.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">dist</span><span class="o">,</span> <span class="n">prevCount</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// Increase the count of points observed for that distance.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">boomerangs</span><span class="o">;</span>	<span class="c1">// return number of boomerangs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-all-numbers-disappeared-in-an-arrayhttpsleetcodecomproblemsfind-all-numbers-disappeared-in-an-arraya-namefind-all-numbers-disappeared-in-an-arraya"><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/">Find All Numbers Disappeared in an Array</a><a name="find-all-numbers-disappeared-in-an-array"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The idea is simple. For each number in the array, since it&#39;s gauranteed that that the values
</span></span></span><span class="line"><span class="cl"><span class="cm">lie are inclusive [1,n], we can look at the index value-1. So check that index, and mark
</span></span></span><span class="line"><span class="cl"><span class="cm">that value as negative. That is why I take the absolute value. Check value at that index, if
</span></span></span><span class="line"><span class="cl"><span class="cm">negative, it means we have visited it via some other duplicate value. But if it&#39;s positive,
</span></span></span><span class="line"><span class="cl"><span class="cm">then we are seeing it for the first time, so make it&#39;s value negative. Make a second pass.
</span></span></span><span class="line"><span class="cl"><span class="cm">For values that are still positive, that means those indices were never visited, hence left
</span></span></span><span class="line"><span class="cl"><span class="cm">positive. So add 1 to them and add it to the set. Eg:
</span></span></span><span class="line"><span class="cl"><span class="cm">	Given array a = [4,3,2,7,8,2,3,1],
</span></span></span><span class="line"><span class="cl"><span class="cm">1.	val = 4 =&gt; idx = 3 &amp; a[3] &gt; 0, therefore, a[3] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,3,2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">2.	val = 3 =&gt; idx = 2 &amp; a[2] &gt; 0, therefore a[2] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,3,-2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">3.	val = -2 =&gt; idx = abs(-2)-1 = 1 &amp; a[1] &gt; 0, therefore a[1] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">4.	val = -7 =&gt; idx = abs(-7)-1 = 6 &amp; a[6] &gt; 0, therfore a[6] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,-3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">5.	val = 8 =&gt; idx = abs(8)-1 = 7 &amp; a[7] &gt; 0, therfore a[7] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,-3,-1]
</span></span></span><span class="line"><span class="cl"><span class="cm">6.	val = 2 =&gt; idx = 1 but a[2] &lt; 0. No change.
</span></span></span><span class="line"><span class="cl"><span class="cm">7.	val = -3 =&gt; idx = abs(-3)-1 = 2 but a[2] &lt; 0. No change.
</span></span></span><span class="line"><span class="cl"><span class="cm">8.	val = -1 =&gt; idx = abs(-1)-1 = 0 &amp; a[0] &gt; 0, therefore a[0] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [-4,-3,-2,-7,8,2,-3,-1]
</span></span></span><span class="line"><span class="cl"><span class="cm">Observation: Notice index 4 and 5 have positive values, since those values were never
</span></span></span><span class="line"><span class="cl"><span class="cm">encountered, so the values at those indexes never became negative. Hence missing values are
</span></span></span><span class="line"><span class="cl"><span class="cm">5 and 6.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">findDisappearedNumbers</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>				<span class="c1">// For each number in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// Look at the index that the number corresponds to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>			<span class="c1">// If val is -ve, then it means we have encountered it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">*=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>  		<span class="c1">// If not, make it -ve.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>			<span class="c1">// Make another pass through the array, and the indices
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>		<span class="c1">// where value was positive, index+1 was missing from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>					<span class="c1">// the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="assign-cookieshttpsleetcodecomproblemsassign-cookiesa-nameassign-cookiesa"><a href="https://leetcode.com/problems/assign-cookies/">Assign Cookies</a><a name="assign-cookies"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">We will employ a greedy algorithm where we first try to content children whose requirements
</span></span></span><span class="line"><span class="cl"><span class="cm">are small. We do this by sorting both the arrays, so we can match the child with least
</span></span></span><span class="line"><span class="cl"><span class="cm">requirement with the smallest cookie available.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findContentChildren</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">g</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">satisfied</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">g</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>	<span class="c1">// While children are left and we have cookies,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">g</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>		<span class="c1">// Check if the cookie at index j &gt;= child i&#39;s requirement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">satisfied</span><span class="o">++;</span>		<span class="c1">// If so, increment the number of content child and we will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">i</span><span class="o">++;</span>				<span class="c1">// process the next child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>						<span class="c1">// If cookie j &lt; child i&#39;s demand, check the next cookie by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">j</span><span class="o">++;</span>					<span class="c1">// incrementing j. If cookie j &gt; child i&#39;s demand, we will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>							<span class="c1">// still need to increment j, hence outside the conditional.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">satisfied</span><span class="o">;</span>			<span class="c1">// Return number of satisfied children
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="poor-pigshttpsleetcodecomproblemspoor-pigsa-namepoor-pigsa"><a href="https://leetcode.com/problems/poor-pigs/">Poor Pigs</a><a name="poor-pigs"></a></h3>
<p><a href="https://leetcode.com/problems/poor-pigs/discuss/94305/1-line-solution-with-detailed-problem-clarification-and-math-proof-(please-read-if-you-really-want-to-know-what-this-problem-means)">Link</a> to the solution explanation. This problem is phrased poorly and I had to read the comments by other users to understand what it required from me. The link I marked here explains the logic pretty good. But the simple logic is this: The number of rounds $r = \frac{Total Test Time}{Minutes To Die} +1$. Each pig has chances of dying in each round or staying alive till the end, so we plus 1. Now given the number of rounds $r$ and the number of samples $s$, how many volunteers $v$ will you need? $r^v = s$. Each round has some volunteers which in total at the end should be able to test out all the samples. Therefore, $v =\log_rs$.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">poorPigs</span><span class="o">(</span><span class="kt">int</span> <span class="n">buckets</span><span class="o">,</span> <span class="kt">int</span> <span class="n">minutesToDie</span><span class="o">,</span> <span class="kt">int</span> <span class="n">minutesToTest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="n">minutesToTest</span><span class="o">/</span><span class="n">minutesToDie</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>		<span class="c1">// How many rounds can you perform?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">buckets</span><span class="o">)/</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">base</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-pivot-indexhttpsleetcodecomproblemsfind-pivot-indexa-namefind-pivot-indexa"><a href="https://leetcode.com/problems/find-pivot-index/">Find Pivot Index</a><a name="find-pivot-index"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">pivotIndex</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">leftSum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>		<span class="c1">// We will test each index as a pivot by sliding it -&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>				<span class="c1">// Precalculate the sum of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// Check if the sum of the leftSide of i is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">leftSum</span> <span class="o">==</span> <span class="n">sum</span> <span class="o">-</span> <span class="n">leftSum</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>	<span class="c1">// equal to totalSum - leftSideSum - pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">i</span><span class="o">;</span>							<span class="c1">// which is i. If so, return i.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">leftSum</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>						<span class="c1">// Otherwise add nums[i] to the leftSum and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// slide pivot to the -&gt;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>								<span class="c1">// No pivot found. Return -1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="squares-of-a-sorted-arrayhttpsleetcodecomproblemssquares-of-a-sorted-arraya-namesquares-of-a-sorted-arraya"><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">Squares of a Sorted Array</a><a name="squares-of-a-sorted-array"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sortedSquares</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>		<span class="c1">// Length of array A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Pivot is the index where values goes from -ve to +ve.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">pivot</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="o">[</span><span class="n">pivot</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="c1">// While values are -ve.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">pivot</span><span class="o">;</span>			<span class="c1">// increment pivot. We exit when we find a positive.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">squares</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>	<span class="c1">// Result array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Keeps track of where to where to put elements in result array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">pivot</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>			<span class="c1">// pivot = 0 means pivot didn&#39;t shift, there are only +ve values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">A</span><span class="o">)</span>		<span class="c1">// So fill in the array with squares of numbers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">{</span>					<span class="c1">// Otherwise we have a negative somewhere.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">pivot</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// So we will compare values left and right of the pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">pivot</span><span class="o">;</span>	<span class="c1">// and whichever&#39;s smaller fills up the array first.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">lsquare</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">rsquare</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">lsquare</span> <span class="o">&lt;</span> <span class="n">rsquare</span><span class="o">){</span>		<span class="c1">// left &lt; right, so add left square. decrement left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">lsquare</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">--</span><span class="n">left</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rsquare</span> <span class="o">&lt;</span> <span class="n">lsquare</span><span class="o">){</span>	<span class="c1">// right &lt; left, add right square and increment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">rsquare</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">lsquare</span><span class="o">;</span>	<span class="c1">// both are equal. add both square and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">rsquare</span><span class="o">;</span>	<span class="c1">// decrement left, increment right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">--</span><span class="n">left</span><span class="o">;</span>						<span class="c1">// Continue doing this until we hit either end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">++</span><span class="n">right</span><span class="o">;</span>					<span class="c1">// of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>								<span class="c1">// In the end we need to check if elements on
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>									<span class="c1">// either side are left to be filled in.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>					<span class="c1">// Left side elements remain, so fill their
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">--];</span> <span class="c1">// squares one by one till none left.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">)</span>					<span class="c1">// Right side elements remain, so fill their
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">++];</span>	<span class="c1">// squares in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">squares</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="repeated-substring-patternhttpsleetcodecomproblemsrepeated-substring-patternsubmissionsa-namerepeated-substring-patterna"><a href="https://leetcode.com/problems/repeated-substring-pattern/submissions/">Repeated Substring Pattern</a><a name="repeated-substring-pattern"></a></h3>
<p>We use the <a href="https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/">KMP Algorithm</a> that allows us to match a string &rsquo;s&rsquo; with another string &lsquo;p&rsquo; to find the longest sequence of characters in &rsquo;s&rsquo; that match &lsquo;p&rsquo;. We can use a Naive Pattern match where we start from the beginning of the string and start comparing the characters of &rsquo;s&rsquo; with &lsquo;p&rsquo;. Initially, we keep the partition at index 0. If the character&rsquo;s match, we move partition to the right by 1 till we get to the end of the string. If something doesn&rsquo;t match, we don&rsquo;t move the partition but look at the next character to match. In the end, wherever the partition is, that&rsquo;s our longest length we could match with string &lsquo;p&rsquo;. The complexity of that is <i>O(len(p)(len(s)-len(p)+1))</i>.</p>
<p>KMP fixes it by skipping characters that we know already match. In this problem, we aren&rsquo;t matching with any other string but itself. So, we start from index 1 of the string and compare it from the beginning. If they match, we increase j by 1, note it down in lps array and then increase i by 1 to check the next character. j basically measures the longest chain of characters we were able to match. If we couldn&rsquo;t match character at index i and if streak was greater than 0, then our new streak becomes whatever it was in the previous round of matching characters. If the streak is 0, then we simply note down at index i in our lps array 0, meaning longest length measured upto index i was 0.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">repeatedSubstringPattern</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="n">lps</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">maxLength</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">maxLength</span><span class="o">)</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">lps</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">lps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// To match the string with itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)){</span>	<span class="c1">// if the chars match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">lps</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">j</span><span class="o">;</span>					<span class="c1">// we record that # of matches at index i was
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">i</span><span class="o">;</span>							<span class="c1">// 1+j and increment i to check next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="o">{</span>								<span class="c1">// character did not match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>						<span class="c1">// If our matching streak &gt; 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">j</span> <span class="o">=</span> <span class="n">lps</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>				<span class="c1">// our new streak becomes the previous round&#39;s streak
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>							<span class="c1">// Otherwise, streak is already 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">lps</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// So we record that # of matches made at i is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>									<span class="c1">// We increment i to check next index.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lps</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>						<span class="c1">// Longest prefix length that was also a suffix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// is whatever was recorded at the end of array.
</span></span></span></code></pre></div><h3 id="island-perimeterhttpsleetcodecomproblemsisland-perimetera-nameisland-perimetera"><a href="https://leetcode.com/problems/island-perimeter/">Island Perimeter</a><a name="island-perimeter"></a></h3>
<p>The idea is simple. Count the number of cells with value 1 which denotes the land. Check towards the left and up to that cell and check if it shares any edge with another cell with value 1. If it does record that. In the end, the formula for perimeter is 4 * (the number of land cells) - 2 * (overlapping edges).</p>
<p><strong>Reasoning:</strong> Perimeter of a square is 4 times the length of it&rsquo;s side. Here all squares are of length 1. So total perimeter is 4*(number of cells with value = 1). But we also need to account the edges that are common between two adjacent land cells. If one square shares an edge with another, we just lost one side from both the square, resulting in a loss of two sides. Therefore, we need to subtract twice the number of overlapping edges from the total perimeter to get  the total perimeter.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">islandPerimeter</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">grid</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">land</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">overlap</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">grid</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">row</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">grid</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">col</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">land</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">row</span><span class="o">-</span><span class="n">1</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">-</span><span class="n">1</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>	<span class="c1">// Check above the current cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="o">++</span><span class="n">overlap</span><span class="o">;</span>		<span class="c1">// If it&#39;s a land, we need to record one overlap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">col</span><span class="o">-</span><span class="n">1</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>	<span class="c1">// Similarly, check to the left.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="o">++</span><span class="n">overlap</span><span class="o">;</span>		<span class="c1">// If it&#39;s a land, we need to increment overlap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">4</span><span class="o">*</span><span class="n">land</span> <span class="o">-</span> <span class="n">2</span><span class="o">*</span><span class="n">overlap</span><span class="o">;</span>		<span class="c1">// Check the reasoning above.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="number-complementhttpsleetcodecomproblemsnumber-complementa-namenumber-complementa"><a href="https://leetcode.com/problems/number-complement/">Number Complement</a><a name="number-complement"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findComplement</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pow2</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>				<span class="c1">// Easily keep track of power of 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">comp</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Complement number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// Since num gets divided by 2, it will be 0 in the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">bit</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span> <span class="o">?</span> <span class="n">1</span> <span class="o">:</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// If bit is 0 then complement is 1 &amp; vice versa.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">comp</span> <span class="o">+=</span> <span class="n">bit</span> <span class="o">*</span> <span class="n">pow2</span><span class="o">;</span>		<span class="c1">// Multiply it by the appropriate power of 2 and add to comp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pow2</span> <span class="o">*=</span> <span class="n">2</span><span class="o">;</span>				<span class="c1">// Update power of 2 for next iteration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>				<span class="c1">// Divide num by 2 to get the next bit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">comp</span><span class="o">;</span>				<span class="c1">// Comp is now the complement.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="binary-watchhttpsleetcodecomproblemsbinary-watcha-namebinary-watcha"><a href="https://leetcode.com/problems/binary-watch/">Binary Watch</a><a name="binary-watch"></a></h3>
<p>The idea is as follows. We have 10 lights. First 4 represent hours. Namely 1, 2, 4 and 8, which are the first four powers of 2. The next 6 lights, represent minutes. Those are 1, 2, 4, 8, 16 and 32. These are powers of 2 from 0-5. So if we iterate from 1 to 9, powers of numbers 1-3 gives us hours and powers of numbers 4-9 minus 4 gives us minutes. So, if we have, let&rsquo;s say 2 lights, we need to find every combination of 2 lights. So in our helper function, we iterate from 1-9 to check every hour and minute combination. We also need to keep a track of the lights that we used, so we don&rsquo;t use the same light again. If hours are &gt; 11 or minutes are &gt; 59, we have an invalid time and we can abort. If the number of lights are 0, that means we found a valid time and we should add it to the result. Now, if the lights are not 0, then we need to check every possible combination from the last light used to 9. If i &lt; 4, then we are looking at an hourly combination, otherwise it&rsquo;s a minute combination. So we recurse with updated lights used, decrease the numOfLights since we used one, update respective hours or minutes until we hit base case.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">readBinaryWatch</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">num</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="kt">int</span> <span class="n">lightsUsed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numOfLights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">min</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">hrs</span> <span class="o">&gt;</span> <span class="n">11</span> <span class="o">||</span> <span class="n">min</span> <span class="o">&gt;</span> <span class="n">59</span><span class="o">)</span>		<span class="c1">// Base case. Invalid time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">numOfLights</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// All lights used, so add time to the list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hrs</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">min</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="o">?</span> <span class="s">&#34;0&#34;</span> <span class="o">+</span> <span class="n">min</span> <span class="o">:</span> <span class="n">min</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lightsUsed</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// Otherwise start recursing from number of prev
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">)</span>							<span class="c1">// light used. i &lt; 4 means hours
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">helper</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">numOfLights</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">hrs</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">i</span><span class="o">),</span> <span class="n">min</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>								<span class="c1">// i = [4,9] means minute. So recurse.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">helper</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">numOfLights</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">hrs</span><span class="o">,</span> <span class="n">min</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">2</span><span class="o">,</span><span class="n">i</span><span class="o">-</span><span class="n">4</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="minimum-moves-to-equal-array-elementshttpsleetcodecomproblemsminimum-moves-to-equal-array-elementsa-nameminimum-moves-to-equal-array-elementsa"><a href="https://leetcode.com/problems/minimum-moves-to-equal-array-elements/">Minimum Moves to Equal Array Elements</a><a name="minimum-moves-to-equal-array-elements"></a></h3>
<p>This was an interesting problem. But after working out a few examples by hand, you can notice that it is always a question of bringing the minimum element in par with everyone. So if you know the minimum of the array, we can check how many steps it will take to bring the minimum in par with other element by calculating the distance between them. For example,</p>
<blockquote>
<p>Let the array be [1,2,3]</p>
<p>We can observe that the minimum here is 1. Let us list down all steps to make all elements equal.</p>
<ol>
<li>[2,2,4], Keeping the second element fixed. Notice that distance between the element where 1 was and where 3 was is till the same.</li>
<li>[3,3,4], Keeping the last element fixed.</li>
<li>[4,4,4], Keeping last element fixed.</li>
</ol>
<p>Here, we first tried to make 1 equal to it&rsquo;s neighbor, which required us 1 step. Now, once it becomes equal to 1, the problem is how to make the last element in the original array, which is 3 equal to 1. It requires 2 steps, resulting in a total of of 3. The reason is that the moment you decide to increment the minimum element to match the next element, you fix the neighboring element and have to increment everything else. This will make the minimum and its neighbor the same, but it will also keep the distance between the minimum and all other elements the same because we just incremented everything.</p>
<p>So, the total number of moves required is the distance between the elements of the array and the minimum.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minMoves</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">moves</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">moves</span> <span class="o">+=</span> <span class="n">i</span><span class="o">-</span><span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">moves</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>Now the above solution required two passes of the array. Can we do even better? Notice that in the end, all we are doing is finding the min and subtracting min from all the elements in the array. That means we are subtracting min <em>n</em> times where n is the length of the array. Why <em>n</em> times? Because there are <em>n</em> elements in the array. Shouldn&rsquo;t it be <em>(n-1)</em> times? No, because the distance of the min from min is 0. So we need to subtract min from itself too, so <em>n</em> times. We can achieve this by first calculating the total of the array while simultaneously keeping track of the minimum. Once done, all we need to do is subtract min <em>n</em> times from the sum, which is equivalent to subtracting min from each element. This results in a much overall better algorithm, requiring only 1 pass of the array.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minMoves</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">min</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span> <span class="o">-</span> <span class="n">min</span><span class="o">*</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="license-key-formattinghttpsleetcodecomproblemslicense-key-formattinga-namelicense-key-formattinga"><a href="https://leetcode.com/problems/license-key-formatting/">License Key Formatting</a><a name="license-key-formatting"></a></h3>
<p>The idea is simple.</p>
<ol>
<li>I maintain a temporary array <em>s</em> that contains only the characters in string <em>S</em> after converting them to uppercase.</li>
<li>I maintain a variable <em>length</em> that counts how many characters I found in the string <em>S</em>. If length is 0, that means it contains only dashes (-).</li>
<li>Then I record the <em>offset</em>. <em>Offset</em> basically measures how many characters of the String <em>S</em> will be grouped unevenly in the beginning part of the string. I can check that by using the modulus operator and finding out the remainder. That many characters (of <em>length &lt; K</em>) will be in the beginning part of the string.</li>
<li>Next step is to calculate how many dashes I will need. It&rsquo;s basically <em>length / K</em>.</li>
<li>Then I create the char array that will hold the characters of the formatted key. It&rsquo;s length will be number of characters + the dashes we will need. We need to take care of a special case here. If the <em>offset</em> is 0, meaning I was able to divide characters in equal group, I need to subtract 1. Eg, let&rsquo;s say we had 8 characters and <em>K</em> was 4.  dashes = 8 / 4 = 2. We can divide 8 characters equally into 2 groups using only 1 dash. But since dashes was 2, it is clearly off by 1. This is the case when <em>offset</em> is 0.</li>
<li><em>kIndex</em> tracks where character is to be inserted in the key array.</li>
<li><em>used</em> tracks how many characters of the array <em>s</em>, which indirectly holds the characters of String <em>S</em>, are used.</li>
<li>First I copy down the characters of length <em>offset</em>. Because those are the ones of uneven length. <em>kIndex</em> and <em>used</em> variables are updated.</li>
<li>Last thing to do is to use all the remaining characters in array <em>s</em>, but we take <em>K</em> characters at a time, because we know that the segments are going to be of equal length. We also need to insert &lsquo;-&rsquo; after each segment, but only if <em>kIndex</em> is not at the beginning or at the end of the key array, because inserting it at those points is invalid.</li>
<li>Create a new string and return it.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">licenseKeyFormatting</span><span class="o">(</span><span class="n">String</span> <span class="n">S</span><span class="o">,</span> <span class="kt">int</span> <span class="n">K</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">S</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">S</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="sc">&#39;-&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">s</span><span class="o">[</span><span class="n">length</span><span class="o">++]</span> <span class="o">=</span> <span class="n">Character</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">length</span> <span class="o">%</span> <span class="n">K</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">dashes</span> <span class="o">=</span> <span class="n">length</span> <span class="o">/</span> <span class="n">K</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">length</span> <span class="o">+</span> <span class="n">dashes</span> <span class="o">+</span> <span class="o">(</span><span class="n">offset</span> <span class="o">==</span> <span class="n">0</span> <span class="o">?</span> <span class="o">-</span><span class="n">1</span> <span class="o">:</span> <span class="n">0</span><span class="o">)];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">kIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">used</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">used</span> <span class="o">&lt;</span> <span class="n">offset</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">used</span><span class="o">++];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">used</span> <span class="o">&lt;</span> <span class="n">index</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">kIndex</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">kIndex</span> <span class="o">&lt;</span> <span class="n">key</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">K</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">used</span><span class="o">++];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="max-consecutive-oneshttpsleetcodecomproblemsmax-consecutive-onesa-namemax-consecutive-onesa"><a href="https://leetcode.com/problems/max-consecutive-ones/">Max Consecutive Ones</a><a name="max-consecutive-ones"></a></h3>
<p>Solution 1: I came up with this solution initially. 4 ms runtime and passes 99.97% submissions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMaxConsecutiveOnes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// Keep track of start of a streak, if any
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// max length of the streak
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>	<span class="c1">// While we are not at the end of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>		<span class="c1">// Check if we have a 1 at start, if so
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">streak</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// initialize streak and check how long can we continue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>	<span class="c1">// that streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">++</span><span class="n">streak</span><span class="o">;</span>			<span class="c1">// Increment streak and left for each consecutive 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">++</span><span class="n">start</span><span class="o">;</span>			<span class="c1">// make sure you don&#39;t forget that start &lt; nums.length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>						<span class="c1">// before checking nums[start] to prevent out-of-bounds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">streak</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>		<span class="c1">// Check if the current streak is better than the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">max</span> <span class="o">=</span> <span class="n">streak</span><span class="o">;</span>		<span class="c1">// previous streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">start</span><span class="o">;</span>					<span class="c1">// Increment start in either case to check for new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>								<span class="c1">// streaks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Solution 2: After analyzing the problem further, I noticed that 0 denotes the end of a streak. If we observe 1, we increment streak by 1. But if I see a 0, I reset my streak to 0. This solution too had a 4 ms runtime and passed 99.97% submissions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMaxConsecutiveOnes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Global max streak
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">streak</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Local max streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>			<span class="c1">// For each number in nums
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>			<span class="c1">// If we see a 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">streak</span><span class="o">;</span>			<span class="c1">// increment our ongoing streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">streak</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>	<span class="c1">// If the local streak &gt; global max
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">max</span> <span class="o">=</span> <span class="n">streak</span><span class="o">;</span>	<span class="c1">// update global max streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>					<span class="c1">// otherwise we just saw a 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">streak</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// So our streak resets to 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>					<span class="c1">// return the global max streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="permutationshttpsleetcodecomproblemspermutationsa-namepermutationsa"><a href="https://leetcode.com/problems/permutations/">Permutations</a><a name="permutations"></a></h3>
<p>The idea is as follows. Given an array a = {1,2,3}, we want to generate all it&rsquo;s possible combinations. What we are trying to do here is that we first take the element at index 0, and find permutations of the remaining thing. When we do that, we insert the element at index 0 in front of the list to get 1 permutation. Similarly, we then take the element at index 1, and permute the remaining contents of the array and insert the element at index 1 in the beginning of the array to get another permutation and so on. In this problem, we are asked to return a list of list, so we first copy the numbers of the array into an ArrayList. Let&rsquo;s run this code for the above example.</p>
<blockquote>
<p>Given nums = {1,2,3}, our ArrayList will be the same, al = [1,2,3]. Our result list is empty, result = [] and index = 0.</p>
<p><strong>helper([1,2,3], 0)</strong></p>
<blockquote>
<p>swap (0, 0) → al = [1,2,3]</p>
<p><strong>helper(1,2,3, 1)</strong></p>
<blockquote>
<p>swap(1, 1) → al = [1,2,3]</p>
<p><strong>helper([1,2,3], 2)</strong></p>
<blockquote>
<p>swap(2, 2) → [1,2,3]</p>
<p><strong>helper([1,2,3], 3)</strong></p>
<blockquote>
<p>We update our result list now, because index == length. Therefore, result = [[1,2,3]]. Our recursive stack collapses and we move on to the next instruction, which is undo the step, al = [1,2,3].</p>
</blockquote>
</blockquote>
<p>swap(1, 2) → al = [1,3,2]</p>
<p><strong>helper([1,3,2], 3)</strong></p>
<blockquote>
<p>Again, index == length, add it to the list. result = [[1,2,3], [1,3,2]]. Recursion stack collapses, we undo the swap, al = [1,2,3]</p>
</blockquote>
</blockquote>
<p>swap(0, 1) → al = [2,1,3]</p>
<p><strong>helper([2,1,3], 1)</strong></p>
<blockquote>
<p>swap(1,1) → al = [2,1,3]</p>
<p><strong>helper([2,1,3], 2)</strong></p>
<blockquote>
<p>swap(2, 2) → al = [2,1,3]</p>
<p><strong>helper([2,1,3], 3)</strong></p>
<blockquote>
<p>index == length, add the current order to the list. result = [[1,2,3], [1,3,2], [2,1,3]]</p>
</blockquote>
</blockquote>
<p>swap(1, 2) → al = [2,3,1]</p>
<p><strong>helper([2,3,1], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1]]</p>
</blockquote>
</blockquote>
<p>swap(0, 2) → al = [3,2,1]</p>
<p><strong>helper([3,2,1], 2)</strong></p>
<blockquote>
<p>swap(2,2) → al = [3,2,1]</p>
<p><strong>helper([3,2,1], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1]]</p>
</blockquote>
</blockquote>
<p>swap(1,2) → al = [3,1,2]</p>
<p><strong>helper([3,1,2], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]]</p>
</blockquote>
</blockquote>
<p>All branches have been explored now, since the iteration ends and we return the result list.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">len</span><span class="o">;</span>						<span class="c1">// To store the length of the input array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span>		<span class="c1">// Result list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">permute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Creating a copy of the nums array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>			<span class="c1">// because it&#39;s easier to create a list from a list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">numList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>			<span class="c1">// Add everything to the list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">len</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">numList</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>			<span class="c1">// Call the aux function.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">order</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">len</span><span class="o">)</span>			<span class="c1">// If we have checked all the numbers in the array, add a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">order</span><span class="o">));</span>	<span class="c1">// clone of the list to the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// Otherwise from index to the end of the array,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">swap</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>	<span class="c1">// take one element, swap it with itself, then the next and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">helper</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">index</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// so on. Recurse again, but on the next index we just swapped.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">swap</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>	<span class="c1">// Undo the swap so that it helps us in generating the next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>							<span class="c1">// permutation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>	<span class="c1">// Swap elements in a list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="construct-the-rectanglehttpsleetcodecomproblemsconstruct-the-rectanglea-nameconstruct-the-rectanglea"><a href="https://leetcode.com/problems/construct-the-rectangle/">Construct the Rectangle</a><a name="construct-the-rectangle"></a></h3>
<p>The idea is very simple. We just need to iterate from width = sqrt(area) to 1 and check if area is perfectly divisible by width. If at any point, width is divisible, then that must be our minimum difference length and width, because we are diverging from the center on both sides. Width decreases while length keeps increasing. Think of it like this, for area = 24, we have many factors of 24, namely 1, 2, 3,4, 6, 8, 12, 24. It&rsquo;s sqrt when rounded down is 4. So we check for width = 4, is 24 perfectly divisible by 4? Yes, so divide it and whatever you get is going to be the minimal difference values. Suppose 4 and 6 weren&rsquo;t the factors for 24. In that case we decrease width by 1, which is 3. Check again, is 24 divisible by 3. Yes? Then that must be our answer. We are diverging away from the center on both sides equally, width to the left towards 1 and length to the right towards area . Therefore the moment we find one value that divides area perfectly, that&rsquo;s our required values.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">constructRectangle</span><span class="o">(</span><span class="kt">int</span> <span class="n">area</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dimensions</span> <span class="o">=</span> <span class="o">{</span><span class="n">area</span><span class="o">,</span> <span class="n">1</span><span class="o">};</span>		<span class="c1">// We know that if nothing works out, n*1 is always
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">done</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// going to be the answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">area</span><span class="o">);</span>	<span class="c1">// We only need to check width from sqrt(area)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(!</span><span class="n">done</span><span class="o">){</span>						<span class="c1">// While not done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">area</span> <span class="o">%</span> <span class="n">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>		<span class="c1">// check if area is perfectly divisible by width
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dimensions</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">width</span><span class="o">;</span>		<span class="c1">// if so, we found our width and the length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dimensions</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">area</span><span class="o">/</span><span class="n">width</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>				<span class="c1">// mark done as false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">--</span><span class="n">width</span><span class="o">;</span>						<span class="c1">// otherwise decrease the length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dimensions</span><span class="o">;</span>					<span class="c1">// return the dimensions found.
</span></span></span></code></pre></div><h3 id="merge-intervalshttpsleetcodecomproblemsmerge-intervalsa-namemerge-intervalsa"><a href="https://leetcode.com/problems/merge-intervals/">Merge Intervals</a><a name="merge-intervals"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span> <span class="nf">merge</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span> <span class="n">intervals</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">intervals</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">intervals</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">intervals</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">intervals</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">start</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">start</span><span class="o">);</span>	<span class="c1">// Sort the list so we can 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>													<span class="c1">// compare adjacent intervals.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span> <span class="n">merged</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">merged</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">intervals</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">));</span>					<span class="c1">// Add the initial interval.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">Interval</span> <span class="n">i</span><span class="o">:</span> <span class="n">intervals</span><span class="o">){</span>					<span class="c1">// For each interval
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Interval</span> <span class="n">last</span> <span class="o">=</span> <span class="n">merged</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="n">1</span><span class="o">);</span><span class="c1">// Get the last added time.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">start</span> <span class="o">&gt;</span> <span class="n">last</span><span class="o">.</span><span class="na">end</span><span class="o">)</span>						<span class="c1">// If it&#39;s time is greater than the last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">merged</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>							<span class="c1">// interval&#39;s end, it doesn&#39;t overlap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span><span class="o">{</span>										<span class="c1">// otherwise it does.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">last</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">last</span><span class="o">.</span><span class="na">end</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">end</span> <span class="o">?</span> <span class="n">last</span><span class="o">.</span><span class="na">end</span> <span class="o">:</span> <span class="n">i</span><span class="o">.</span><span class="na">end</span><span class="o">;</span>	<span class="c1">// So check which has greater end time, and make the last added interval&#39;s time equals that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">merged</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="n">1</span><span class="o">,</span> <span class="n">last</span><span class="o">);</span>		<span class="c1">// And set it as the last added interval
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">merged</span><span class="o">;</span>									<span class="c1">// Return the merged list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="merged-sorted-listshttpsleetcodecomproblemsmerge-sorted-arraya-namemerged-sorted-listsa"><a href="https://leetcode.com/problems/merge-sorted-array/">Merged sorted lists</a><a name="merged-sorted-lists"></a></h3>
<ol>
<li>counterA keeps track of which element we are looking at in array &lsquo;a&rsquo;. Same with counterB</li>
<li>counterK keeps track of where to insert the element in array &lsquo;a&rsquo;, since a has enough space. The problem states that it might have more than enough space, so we use only the spaces we need, which is the total of both their sizes. Since indexing in an array is 0-based, we subtract 1.</li>
<li>We insert elements from the end, since the end part of &lsquo;a&rsquo; is empty. We can insert from the front, but then we would need to shift elements to the right after each insertion from &lsquo;b&rsquo;.</li>
<li>If array values are equal, add them to the end, and decrease both their counter to check new values in the next iteration</li>
<li>If not equal, then check which one is greater, since the last part of the array should contain larger values. Whichever&rsquo;s greater, put it in &lsquo;a&rsquo; at index &lsquo;counterA&rsquo; and decrement the respective counter.</li>
<li>In the end, we might have some leftover elements either from &lsquo;a&rsquo; or &lsquo;b&rsquo; because we only process elements that are equal to the <strong>min(size(a), size(b))</strong>, until we run out of elements in one of the array. So, whichever array has elements pending, add it to the front of the array and return a.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sizeA</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sizeB</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">counterA</span> <span class="o">=</span> <span class="n">sizeA</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">counterB</span> <span class="o">=</span> <span class="n">sizeB</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">counterK</span> <span class="o">=</span> <span class="n">sizeA</span><span class="o">+</span><span class="n">sizeB</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">counterA</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">counterB</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">]</span> <span class="o">==</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">]</span> <span class="o">?</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--]</span> <span class="o">:</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">counterA</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">counterB</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="next-greater-element-ihttpsleetcodecomproblemsnext-greater-element-ia-namenext-greater-element-ia"><a href="https://leetcode.com/problems/next-greater-element-i/">Next Greater Element I</a><a name="next-greater-element-i"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">nextGreaterElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>	<span class="c1">// We use the hashmap to keep a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>				<span class="c1">// track of the index of each value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">index</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums2</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>							<span class="c1">// in nums 2. That way, when we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>								<span class="c1">// to look for a value greater than a val in nums1, we know
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums1</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>	<span class="c1">// which index to start iterating from.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// So for each val in nums1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">val</span><span class="o">);</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>	<span class="c1">// Iterate from that value&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">nums2</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">val</span><span class="o">){</span>			<span class="c1">// index in nums2 to the end, and see if you can
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums2</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>		<span class="c1">// find any val &gt; nums1[i]. If you do, save it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="o">;</span>						<span class="c1">// in the result array and break the loop.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// Now if we didn&#39;t find any value, then result[i] would be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>		<span class="c1">// 0, so we set that index to -1 in our result array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>				<span class="c1">// simply return the result array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="string-without-aaa-or-bbbhttpsleetcodecomproblemsstring-without-aaa-or-bbba-namestring-without-aaa-or-bbba"><a href="https://leetcode.com/problems/string-without-aaa-or-bbb/">String Without AAA or BBB</a><a name="string-without-aaa-or-bbb"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">strWithout3a3b</span><span class="o">(</span><span class="kt">int</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>				
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">ch</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">A</span><span class="o">+</span><span class="n">B</span><span class="o">];</span>		<span class="c1">// We create an char array to store string chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">max</span> <span class="o">=</span> <span class="n">A</span> <span class="o">&gt;</span> <span class="n">B</span> <span class="o">?</span> <span class="sc">&#39;a&#39;</span> <span class="o">:</span> <span class="sc">&#39;b&#39;</span><span class="o">;</span>	<span class="c1">// record the most frequent occurring element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">min</span> <span class="o">=</span> <span class="n">max</span> <span class="o">==</span> <span class="sc">&#39;a&#39;</span> <span class="o">?</span> <span class="sc">&#39;b&#39;</span> <span class="o">:</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>	<span class="c1">// and the least frequent occurring element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">A</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">||</span> <span class="n">B</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// While we haven&#39;t added all of the elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// We check that if our current index &gt; 1 and our previoud two characters in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// are the same, then we must have written the max occurring char, so it&#39;s time to write
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// the minimum occurring element. We write it, and then decrement the specific A or B.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">==</span> <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">==</span> <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="n">2</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">            <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">min</span> <span class="o">==</span> <span class="sc">&#39;a&#39;</span><span class="o">)</span>		<span class="c1">// If the minimum freq element is &#39;a&#39;, decrement A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">A</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">B</span><span class="o">--;</span>			<span class="c1">// otherwise decrement B
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">B</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">){</span>		<span class="c1">// Otherwise, if B occurs more than A, then set char to B
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="sc">&#39;b&#39;</span><span class="o">;</span>	<span class="c1">// decrement B and increment index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">B</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="o">{</span>					<span class="c1">// A occurs more, so add A to the char array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>	<span class="c1">// Increment index, decrement A count
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">A</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>		<span class="c1">// Create a string from the char array and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="keyboard-rowhttpsleetcodecomproblemskeyboard-rowa-namekeyboard-rowa"><a href="https://leetcode.com/problems/keyboard-row/">Keyboard Row</a><a name="keyboard-row"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Maps each character to the row in the keyboard in which it occurs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">map</span> <span class="o">=</span> <span class="o">{</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">findWords</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="o">[]</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>	<span class="c1">// Store filtered words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// Where to insert the filtered words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">:</span> <span class="n">words</span><span class="o">)</span>					<span class="c1">// for each word in words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">checkWord</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">()))</span>		<span class="c1">// convert it to lowercase and check if all char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">w</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>					<span class="c1">// occurs in the same row, if it does, add it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">w</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>	<span class="c1">// Simply return a copy of the array from 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">checkWord</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">){</span>		<span class="c1">// Check if all chars in the word belong in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)-</span><span class="sc">&#39;a&#39;</span><span class="o">];</span>		<span class="c1">// same row. Check first chars row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()){</span>		<span class="c1">// For all the chars in the word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">!=</span> <span class="n">row</span><span class="o">)</span>				<span class="c1">// if that char belongs to a different row,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// All chars in same row, return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-mode-in-binary-search-treehttpsleetcodecomproblemsfind-mode-in-binary-search-treea-namefind-mode-in-binary-search-treea"><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/">Find Mode in Binary Search Tree</a><a name="find-mode-in-binary-search-tree"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">TreeNode</span> <span class="n">parent</span><span class="o">;</span>		<span class="c1">// Keep track of parent at each node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">maxMode</span><span class="o">;</span>			<span class="c1">// maxMode we found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">currentMode</span><span class="o">;</span>		<span class="c1">// mode recorded at each node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">modes</span><span class="o">;</span>		<span class="c1">// keep distinct modes found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findMode</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>			<span class="c1">// node is null, so return empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">maxMode</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>				<span class="c1">// we have just seen the root, so maxMode so far is 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">currentMode</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// so is the current mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">modes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">modes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>		<span class="c1">// add the root to our modes set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>				<span class="c1">// start traversing it&#39;s left and right branches
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">modes</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>	<span class="c1">// We have found all the modes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// keep track of where to insert elements in result array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">modes</span><span class="o">)</span>			<span class="c1">// add all the distinct modes one by one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>				<span class="c1">// and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>			<span class="c1">// if node is null, stop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="o">;</span>					<span class="c1">// otherwise traverse the left branch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>		<span class="c1">// Once we hit the null, we start backtracking to the leaf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">updateMode</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>			<span class="c1">// then we call updateMode with the node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>				<span class="c1">// once it&#39;s done, we update parent as the current node, so 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>		<span class="c1">// when we backtrack, we can easily check that node and it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>								<span class="c1">// next node&#39;s value for similarity. Then traverse right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateMode</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">parent</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">){</span>	<span class="c1">// If parent node isn&#39;t null and the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">currentMode</span><span class="o">;</span>			<span class="c1">// node&#39;s value is the same as parent, we update currentMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">currentMode</span> <span class="o">&gt;=</span> <span class="n">maxMode</span><span class="o">){</span>	<span class="c1">// If the currentMode is greater or equal to maxMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">currentMode</span> <span class="o">&gt;</span> <span class="n">maxMode</span><span class="o">)</span>	<span class="c1">// just check if it&#39;s greater. If it is, remove all 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">modes</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>			<span class="c1">// previously recorded modes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">modes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>		<span class="c1">// Add the current node to the set and update the 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">maxMode</span> <span class="o">=</span> <span class="n">currentMode</span><span class="o">;</span>		<span class="c1">// maxMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">{</span>						<span class="c1">// otherwise, value&#39;s aren&#39;t the same. so our currentMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">currentMode</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// becomes 1. If maxMode is also 1, then all we have been 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">maxMode</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// seeing are distinct values, so add that node&#39;s value to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">modes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span><span class="c1">// to the mode&#39;s set.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="base-7httpsleetcodecomproblemsbase-7a-namebase-7a"><a href="https://leetcode.com/problems/base-7/">Base 7</a><a name="base-7"></a></h3>
<p>Solution 1 without StringBuilder (Beats 100%, 7ms)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToBase7</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;0&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">num</span><span class="o">))/</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">7</span><span class="o">))+</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// Calculate # of bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">idx</span><span class="o">;</span>		<span class="c1">// where to start inserting from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span><span class="o">[]</span> <span class="n">digits</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>	<span class="c1">// If num is negative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="n">num</span><span class="o">;</span>	<span class="c1">// Make it positive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">len</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>	<span class="c1">// We need one more space for -ve sign in the front
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="o">;</span>			<span class="c1">// Put the -ve sign
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">idx</span> <span class="o">=</span> <span class="n">len</span><span class="o">;</span>					<span class="c1">// and index is now len
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">digits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>		<span class="c1">// otherwise we only need &#34;len&#34; spaces
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">idx</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// index is len-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>				<span class="c1">// While num != 0, calculate remainder and add it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span><span class="o">[</span><span class="n">idx</span><span class="o">--]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">num</span> <span class="o">%</span> <span class="n">7</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="o">);</span>	<span class="c1">// Divide number by 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">num</span> <span class="o">/=</span> <span class="n">7</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>     
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">digits</span><span class="o">);</span>		<span class="c1">// Just create a string and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span></code></pre></div><p>Solution 2 with StringBuilder</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToBase7</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">isNegative</span> <span class="o">=</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// Just so we can know if we need to add the &#34;-&#34; sign
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// Take the absolute value of num
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">6</span><span class="o">)</span> <span class="o">{</span>				<span class="c1">// Keep adding the remainder, and dividing num by 7.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">/=</span> <span class="n">7</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>					<span class="c1">// Add whatever is left at the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">isNegative</span><span class="o">)</span>					<span class="c1">// If num was negative, add the minus sign.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;-&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>	<span class="c1">// Reverse the builder and return the toString()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="relative-rankshttpsleetcodecomproblemsrelative-ranksa-namerelative-ranksa"><a href="https://leetcode.com/problems/relative-ranks/">Relative Ranks</a><a name="relative-ranks"></a></h3>
<p>The idea employed here is simple. We need to store the relative ranks in sorted order. We can sort the array for that, but that is O(n log n). We can do better than that by finding the relative rank in linear time. First we find the maximum score in the array and create another array of length = maxScore + 1. We add 1 so that when we see the maxScore in the nums, we can assign it to maxScore index. Once we have done that, now we iterate over the nums array. Variable i keeps track of what rank to assign. We check a value in the array and at that index in our reverse sorted array, we put i+1, which basically marks it&rsquo;s rank based on it&rsquo;s position in the rankings. Some of then indexes would be default, that is a score of 0. We then check each value in the descend array and if it&rsquo;s not 0, we assign it a rank, but not if the ranks are 1, 2 or 3. In that case, we assign it a special value of Gold, SIlver or Bronze.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">findRelativeRanks</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">maxScore</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">maxScore</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">maxScore</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">descend</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">maxScore</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">descend</span><span class="o">[</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">rank</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">descend</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">descend</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">descend</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">rank</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;Gold Medal&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rank</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;Silver Medal&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rank</span> <span class="o">==</span> <span class="n">3</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;Bronze Medal&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">rank</span> <span class="o">+</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">rank</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="perfect-numberhttpsleetcodecomproblemsperfect-numbera-nameperfect-numbera"><a href="https://leetcode.com/problems/perfect-number/">Perfect Number</a><a name="perfect-number"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkPerfectNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// 1 is a special case, where it&#39;s only factor is itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// We know our total will atleast be 1, 1 is everyone&#39;s factor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">num</span><span class="o">);</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>	<span class="c1">// Only loop through num&#39;s sqrt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>				<span class="c1">// If i divides num perfectly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">otherFactor</span> <span class="o">=</span> <span class="n">num</span><span class="o">/</span><span class="n">i</span><span class="o">;</span>	<span class="c1">// Calculate the other factor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">+</span> <span class="o">(</span><span class="n">otherFactor</span> <span class="o">==</span> <span class="n">i</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">otherFactor</span><span class="o">);</span>	<span class="c1">// If i and other factor are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>								<span class="c1">// different, add them both, otherwise just i.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">total</span> <span class="o">==</span> <span class="n">num</span><span class="o">;</span>				<span class="c1">// Check in the end if your total is the same as num
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="detect-capitalhttpsleetcodecomproblemsdetect-capitala-namedetect-capitala"><a href="https://leetcode.com/problems/detect-capital/">Detect Capital</a><a name="detect-capital"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">detectCapitalUse</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>			<span class="c1">// Empty or size 1 words are ok.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>	<span class="c1">// Get the char array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">isUpper</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>	<span class="c1">// by default we let isUpper to false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">chars</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">)</span>		<span class="c1">// Check if first two letters are uppercase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">isUpper</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">;</span> <span class="c1">// If first was upper and second wasnt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// isUpper = false, otherwise true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">isAlsoUpper</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">;</span> <span class="c1">// We check onwards 1 char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">isUpper</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isAlsoUpper</span><span class="o">)</span>	<span class="c1">// If that char is lower and previous part was
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// not lower, invalid use.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">isUpper</span> <span class="o">&amp;&amp;</span> <span class="n">isAlsoUpper</span><span class="o">)</span>	<span class="c1">// Or if previous part was lower and current letter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// is upper, we return false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>				<span class="c1">// Everything proceeded smoothly. So return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="longest-uncommon-subsequence-ihttpsleetcodecomproblemslongest-uncommon-subsequence-ia-namelongest-uncommon-subsequence-ia"><a href="https://leetcode.com/problems/longest-uncommon-subsequence-i/">Longest Uncommon Subsequence I</a><a name="longest-uncommon-subsequence-i"></a></h3>
<p>This is those kind of problems that shouldn&rsquo;t be up there. The problem is stated rather poorly and the solution is even stupider. All you are checking for is if the two string&rsquo;s aren&rsquo;t the same, then whichever one has a larger length is essentially the longest uncommon subsequence because the other string cannot form the full string. I know, it&rsquo;s stupid.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findLUSlength</span><span class="o">(</span><span class="n">String</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">b</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">:</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h3 id="course-schedule-iihttpsleetcodecomproblemscourse-schedule-iia-namecourse-schedule-iia"><a href="https://leetcode.com/problems/course-schedule-ii/">Course Schedule II</a><a name="course-schedule-ii"></a></h3>
<p>This is a graph problem where we require to sort the vertices topologically. There are two choices we have for sorting topologically - Depth First Search approach based on finshing times or the Kahn&rsquo;s Algorithm. I have used Kahn&rsquo;s algorithm in this solution. Runtime is 2ms [beats 100%] and uses 45.3 MB space [beats than 90.16%]. The idea for Kahn&rsquo;s is simple - Enqueue all the nodes which has 0 incoming edges because those are the ones that can be started first. Then while the queue isn&rsquo;t empty, remove one node at a time, process it&rsquo;s outgoing nodes and decrease their indegrees by one. The reasoning behind that is let&rsquo;s say Node 2 has two prerequisites, Node 0 and Node 1. Node 0 and Node 1 have 0 indegrees. So our first two nodes would be Node 1 and Node 0 and if they are finished, then their outgoing Nodes can be started, that is Node 2. Now when you decrease any node&rsquo;s indegree and they become zero, add them to the queue because they can now be started. Keep doing this until the queue is empty.</p>
<p>In my approach, I&rsquo;m avoiding any unnecessary data structure and using only the most basic ones like array&rsquo;s. So instead of using the queue, what I do is fill the array <code>order</code> which also stores the topological order. <code>idx</code> keeps track of the last index available to fill in the array. <code>start</code> mimics the <code>poll</code> behaviour of a queue. <code>while (start != idx)</code> makes sure that while we still have nodes to process, remove the one that can be started and decrease all the indegrees of outgoing edges.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findOrder</span><span class="o">(</span><span class="kt">int</span> <span class="n">numCourses</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">prerequisites</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">indegrees</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">numCourses</span><span class="o">];</span>				<span class="c1">// We maintain each node&#39;s indegree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">[</span><span class="n">numCourses</span><span class="o">];</span>	<span class="c1">// Each node&#39;s outgoing edges
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">edge</span><span class="o">:</span> <span class="n">prerequisites</span><span class="o">)</span> <span class="o">{</span>					<span class="c1">// Process each edge
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">indegrees</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">0</span><span class="o">]]++;</span>							<span class="c1">// Update indegrees
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// Also store the edge in graph
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]].</span><span class="na">add</span><span class="o">(</span><span class="n">edge</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">numCourses</span><span class="o">];</span>		    <span class="c1">// We don&#39;t technically need a queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numCourses</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>        <span class="c1">// Find all nodes who indegree is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">indegrees</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>                  <span class="c1">// and put them in the order array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">order</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>                              <span class="c1">// start tracks node to be polled.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">!=</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>                      <span class="c1">// while we can poll the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="n">start</span><span class="o">++];</span>                 <span class="c1">// poll the node u
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>                   <span class="c1">// If node u has outgoing edges 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">out</span><span class="o">:</span> <span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">])</span>             <span class="c1">// Then for each of those nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(--</span><span class="n">indegrees</span><span class="o">[</span><span class="n">out</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>      <span class="c1">// decrease their indegrees and check if it&#39;s 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">order</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">out</span><span class="o">;</span>         <span class="c1">// if it&#39;s 0, add it to our queue (order)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">!=</span> <span class="n">numCourses</span><span class="o">)</span>						<span class="c1">// Cycle check. If our idx != numCourses then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{};</span>					<span class="c1">// not all nodes could be processed. So we have
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">order</span><span class="o">;</span>								<span class="c1">// a cycle. Otherwise return our order array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="letter-combinations-of-a-phone-numberhttpsleetcodecomproblemsletter-combinations-of-a-phone-numbera-nameletter-combinations-of-a-phone-numbera"><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">Letter Combinations of a Phone Number</a><a name="letter-combinations-of-a-phone-number"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Letter Combinations of a Phone Number.</p>
<p>Memory Usage: 35.9 MB, less than 98.63% of Java online submissions for Letter Combinations of a Phone Number.</p>
<hr>
<p>How do we count numbers? 16, 17, 18, 19 and then what? 20 right? We see that the last number is 19, we can&rsquo;t go past 9 so we set it to 0 and then increment the precedding digit to get 20. The idea is the same for this problem too. We keep a <code>levels</code> array to keep track of which character do we take from which number&rsquo;s allowed alphabet letters. For example, let&rsquo;s say the input string is <code>23</code>. Our <code>levels</code> array would <code>[0, 0]</code> in the beginning. This says pick characters at index 0 and 0 from alphabet characters corresponding to 2 and 3 which gives us <code>ad</code>. Then, we increase the last most counter in our levels array by 1 giving us <code>[0, 1]</code>. This allows us to get <code>ae</code> in the next iteration and levels array would be <code>[0, 2]</code>. We get <code>af</code> and levels array becomes <code>[0, 3]</code>. Now this is where it becomes interesting. We are only allowed three letters for the digit corresponding to 3 and since we already used all of them , we now need to shift to the next character for digit 2, which is <code>b</code>. Level array looks like <code>[1, 0]</code>. This will allow us to get <code>[b,e]</code>. So you get the rough idea now. Only thing now is we watch out when to stop. We stop when we have utilized all available characters from the 0th index&rsquo;s number&rsquo;s allowed alphabet letters. In this case, we stop when levels array look like <code>[3, 0]</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">map</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span> <span class="sc">&#39;b&#39;</span><span class="o">,</span> <span class="sc">&#39;c&#39;</span><span class="o">},</span>        <span class="c1">// 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;d&#39;</span><span class="o">,</span> <span class="sc">&#39;e&#39;</span><span class="o">,</span> <span class="sc">&#39;f&#39;</span><span class="o">},</span>        <span class="c1">// 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;g&#39;</span><span class="o">,</span> <span class="sc">&#39;h&#39;</span><span class="o">,</span> <span class="sc">&#39;i&#39;</span><span class="o">},</span>        <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;j&#39;</span><span class="o">,</span> <span class="sc">&#39;k&#39;</span><span class="o">,</span> <span class="sc">&#39;l&#39;</span><span class="o">},</span>        <span class="c1">// 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;m&#39;</span><span class="o">,</span> <span class="sc">&#39;n&#39;</span><span class="o">,</span> <span class="sc">&#39;o&#39;</span><span class="o">},</span>        <span class="c1">// 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;p&#39;</span><span class="o">,</span> <span class="sc">&#39;q&#39;</span><span class="o">,</span> <span class="sc">&#39;r&#39;</span><span class="o">,</span> <span class="sc">&#39;s&#39;</span><span class="o">},</span>   <span class="c1">// 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;t&#39;</span><span class="o">,</span> <span class="sc">&#39;u&#39;</span><span class="o">,</span> <span class="sc">&#39;v&#39;</span><span class="o">},</span>        <span class="c1">// 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;w&#39;</span><span class="o">,</span> <span class="sc">&#39;x&#39;</span><span class="o">,</span> <span class="sc">&#39;y&#39;</span><span class="o">,</span> <span class="sc">&#39;z&#39;</span><span class="o">}</span>    <span class="c1">// 9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>                <span class="c1">// Maintain the list of combinations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">;</span>                                          <span class="c1">// numbers parsed from input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">levels</span><span class="o">;</span>                                           <span class="c1">// utility array to keep track of next character in string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>                                                  <span class="c1">// number of input digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">digits</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>                 <span class="c1">// stop if null or empty string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">levels</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>                 <span class="c1">// parse all the digits from the string as int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">((</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>          <span class="c1">// stop if any of them is 0 or 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">helper</span><span class="o">();</span>                                                   <span class="c1">// start recursion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">levels</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">0</span><span class="o">]-</span><span class="n">2</span><span class="o">].</span><span class="na">length</span><span class="o">)</span>                  <span class="c1">// if we are done iterating over all possible combinations,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span><span class="o">;</span>                                                 <span class="c1">// stop recursion.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>                                     <span class="c1">// stores all the characters of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>                                 <span class="c1">// loop through levels array. The value at each index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">2</span><span class="o">][</span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]];</span>                    <span class="c1">// tells us which character to keep from which map index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">levels</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">]++;</span>                                              <span class="c1">// Increase the entry at the end of the levels array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">levels</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>                 <span class="c1">// Now loop through the levels array from the end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">2</span><span class="o">].</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>            <span class="c1">// If the value = total number of characters allowed for that number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>                                      <span class="c1">// then we set it to 0 and increment the previous level entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">levels</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">]++;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>                                  <span class="c1">// Add the string and induce next recursive call.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">helper</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="sudoku-solverhttpsleetcodecomproblemssudoku-solvera-namesudoku-solvera"><a href="https://leetcode.com/problems/sudoku-solver/">Sudoku Solver</a><a name="sudoku-solver"></a></h3>
<p>Runtime: 4 ms, faster than 90.01% of Java online submissions for Sudoku Solver.</p>
<p>Memory Usage: 35.1 MB, less than 71.93% of Java online submissions for Sudoku Solver.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">solveSudoku</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">board</span> <span class="o">=</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">solve</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">col</span> <span class="o">==</span> <span class="n">9</span><span class="o">)</span> <span class="o">{</span>                                 <span class="c1">// If col is 9, make it 0 and shift to the next row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">row</span> <span class="o">+=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">row</span> <span class="o">==</span> <span class="n">9</span><span class="o">)</span>                               <span class="c1">// If row is also 9 now, then it means we have successfully filled all cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>                            <span class="c1">// So return true and end backtracking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>                  <span class="c1">// Otherwise, we start picking values from 1-9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span> <span class="o">{</span>               <span class="c1">// And try to plug it into empty cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">isValid</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">,</span> <span class="n">i</span><span class="o">))</span> <span class="o">{</span>             <span class="c1">// If that value is valid in that cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span><span class="o">+</span><span class="sc">&#39;0&#39;</span><span class="o">);</span>    <span class="c1">// fill it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="o">))</span>          <span class="c1">// and move on to fill the next cell via recursive call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>                    <span class="c1">// If the recursion ended by returning true, then return true to signal success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">else</span>                                <span class="c1">// Otherwise, we were not able to put an value in that cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;.&#39;</span><span class="o">;</span>          <span class="c1">// so change it back to 0 and the backtracking would try the next higher value in that cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">solve</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>           <span class="c1">// That cell wasn&#39;t empty, so move on to the next empty cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>                                   <span class="c1">// No solution found.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// row check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="o">++</span><span class="n">c</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">c</span><span class="o">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// column check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="o">++</span><span class="n">r</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// box check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">row</span> <span class="o">/</span> <span class="n">3</span> <span class="o">*</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">col</span> <span class="o">/</span> <span class="n">3</span> <span class="o">*</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">top</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="bulls-and-cowshttpsleetcodecomproblemsbulls-and-cowsa-namebulls-and-cowsa"><a href="https://leetcode.com/problems/bulls-and-cows/">Bulls and Cows</a><a name="bulls-and-cows"></a></h3>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Bulls and Cows.</p>
<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Bulls and Cows.</p>
<p>The idea is simple, first record the frequency of the digits of the secret number. Then we first find number of <code>bulls</code> by checking for exact indices match. After that we start to record the number of <code>cows</code>. The way we do is by again iterating over the <code>guess</code> string; only if there was a character mismatch and we still have the character available from <code>freq</code> table, we have a <code>cow</code>. Update it and decrement the frequency of the number we just used up.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getHint</span><span class="o">(</span><span class="n">String</span> <span class="n">secret</span><span class="o">,</span> <span class="n">String</span> <span class="n">guess</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">bulls</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">cows</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">10</span><span class="o">];</span>							<span class="c1">// Freq of available digits from secret
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">guess</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">s</span> <span class="o">=</span> <span class="n">secret</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">[</span><span class="n">s</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">]++;</span>								<span class="c1">// Record the freq of the digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">guess</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">{</span>						<span class="c1">// If it&#39;s a match, we have a bulls.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">bulls</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="n">freq</span><span class="o">[</span><span class="n">s</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">]--;</span>							<span class="c1">// We just used the character, so decrement it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">guess</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">secret</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">;</span>					<span class="c1">// Convert the chars into int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">guess</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="n">g</span> <span class="o">&amp;&amp;</span> <span class="n">freq</span><span class="o">[</span><span class="n">g</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>					<span class="c1">// Only if they are a mismtach and we have a number g available in freq table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">cows</span><span class="o">++;</span>										<span class="c1">// then it&#39;s a cow.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">freq</span><span class="o">[</span><span class="n">g</span><span class="o">]--;</span>									<span class="c1">// We used up the number, so decrement it&#39;s freq.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">().</span><span class="na">append</span><span class="o">(</span><span class="n">bulls</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">cows</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="n-queens-ihttpsleetcodecomproblemsn-queensa-namen-queens-1a"><a href="https://leetcode.com/problems/n-queens/">N-Queens I</a><a name="n-queens-1"></a></h3>
<p>Runtime: 3 ms, faster than 73.76% of Java online submissions for N-Queens.
Memory Usage: 37.6 MB, less than 100.00% of Java online submissions for N-Queens.</p>
<p>The idea is same as sudoku, but insteading of scanning rows, we scan columns. Start with row 0, column 0 and see if we can place a queen there, if yes place it and try the next cell of row 0 by recursing. We can&rsquo;t put the queen in the same row again, so we keep changing rows with column 1 until we find somewhere to place it. Keep doing this until you were successfully able to place all the queens as checked by the condition <code>col == n</code>. If so, add that solution to our list of accepted solutions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NQueens</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="nf">solveNQueens</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">solve</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">col</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">addToList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">row</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">canPlaceQueen</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                    <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addToList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">r</span><span class="o">:</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">r</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">1</span> <span class="o">?</span> <span class="sc">&#39;Q&#39;</span> <span class="o">:</span> <span class="sc">&#39;.&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">canPlaceQueen</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Check all rows for the same column
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">col</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Check upper left diagonal of the cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">row</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--,</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Check lower left diagonal of the cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">row</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">++,</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="k-diff-pairs-in-an-arrayhttpsleetcodecomproblemsk-diff-pairs-in-an-arraya-namek-diff-pairs-in-an-arraya"><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/">K-diff pairs in an Array</a><a name="k-diff-pairs-in-an-array"></a></h3>
<p>Pretty intuitive solution. Build a frequency HashMap for all the numbers in the array. In a special case where <code>diff</code> is 0, just count occurences in our <code>freq</code> map whose values are 2 or more. In other case, just loop through all the keys and make sure it&rsquo;s supplement exists to count the number of K-diff pairs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findPairs</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pairs</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">freq</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">0</span><span class="o">)+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">freq</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">pairs</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pairs</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">freq</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">k</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">pairs</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pairs</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="is-subsequencehttpsleetcodecomproblemsis-subsequencesubmissionsa-nameis-subsequencea"><a href="https://leetcode.com/problems/is-subsequence/submissions/">Is Subsequence</a><a name="is-subsequence"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence.
Memory Usage: 49.6 MB, less than 100.00% of Java online submissions for Is Subsequence.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSubsequence</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>								<span class="c1">// Set it to 0 to start check for 0th index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>				<span class="c1">// For all the characters in String s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">idx</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>				<span class="c1">// Find it&#39;s index in String t from index one more than the last index matched
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>							<span class="c1">// idx &lt; 0 means not found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="minimum-absolute-difference-in-bsthttpsleetcodecomproblemsminimum-absolute-difference-in-bsta-nameminimum-absolute-difference-in-bsta"><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/">Minimum Absolute Difference in BST</a><a name="minimum-absolute-difference-in-bst"></a></h3>
<p>The idea is to use the Inorder traversal of a BST. We repeatively iterate over the left branch to find the minimum diff and then do the same for the right branch, but this time we already know that the parent of the right branch has to be its minimum, so first set it and then traverse the right branch to find the minimum difference.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>								<span class="c1">// Hold the minimum difference.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>								<span class="c1">// Holds the minimum value observed for the right branch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMinimumDifference</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>											<span class="c1">// Start iterating from the root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>										<span class="c1">// Null node, so stop recursion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>									<span class="c1">// Keep traversing till the end of the tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">res</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">-</span><span class="n">prev</span><span class="o">),</span> <span class="n">res</span><span class="o">);</span>			<span class="c1">// Check if we have a minimum, if so set it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>										<span class="c1">// The smallest value for the right branch is it&#39;s parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>									<span class="c1">// Set it first and then traverse.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="bst-tree-to-greater-treehttpsleetcodecomproblemsconvert-bst-to-greater-treea-namebst-tree-to-greater-treea"><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/">BST Tree to Greater Tree</a><a name="bst-tree-to-greater-tree"></a></h3>
<p>The idea is simple. In a BST, we know everything on the right side of a node is greater than it and it&rsquo;s left side. So when we are at any node, it&rsquo;s value would be its value + sum of everything on its right side. So, we first compute the node&rsquo;s value and then notice that the value for the node on the left is nothing but its value + parents value. So the node&rsquo;s value is computed, do the same thing for the left side, but this time, the starting sum would be the parent&rsquo;s value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">convertBST</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">+=</span> <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="student-attendance-record-ihttpsleetcodecomproblemsstudent-attendance-record-ia-namestudent-attendance-record-ia"><a href="https://leetcode.com/problems/student-attendance-record-i/">Student Attendance Record I</a><a name="student-attendance-record-I"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkRecord</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">A</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>												<span class="c1">// Count number of A&#39;s seen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">int</span> <span class="n">L</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>												<span class="c1">// Count number of consecutive L&#39;s seen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>		<span class="c1">// Loop through each character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span><span class="o">)</span> <span class="o">{</span>								<span class="c1">// If c is A, increment A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">A</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span> <span class="o">(</span><span class="n">A</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span>								<span class="c1">// If A is more than 1, return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">              <span class="n">L</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>										<span class="c1">// Always set L count to 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;L&#39;</span><span class="o">)</span> <span class="o">{</span>					<span class="c1">// If c is L,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">L</span><span class="o">++;</span>											<span class="c1">// We might have consecutive L&#39;s, so start counting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(</span><span class="n">L</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">)</span> <span class="o">{</span>							<span class="c1">// If we have more than 2 consecutive L&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span>													<span class="c1">// Lastly, we might have a P, that will reset our
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">L</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>										<span class="c1">// consecutive L streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>											<span class="c1">// Everything passed, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span></code></pre></div><h3 id="reverse-words-in-string-iiihttpsleetcodecomproblemsreverse-words-in-a-string-iiia-namereverse-words-in-string-iiia"><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/">Reverse Words in String III</a><a name="reverse-words-in-string-iii"></a></h3>
<p>Runtime: 2 ms, faster than 99.34% of Java online submissions for Reverse Words in a String III.</p>
<p>Memory Usage: 37.9 MB, less than 100.00% of Java online submissions for Reverse Words in a String III.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseWords</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">char</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">end</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>											<span class="c1">// Check the whole string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">end</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>													<span class="c1">// find the index of the first whitespace
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">while</span><span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>		<span class="c1">// denoting end of the word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">end</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">          <span class="n">reverseWord</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>				<span class="c1">// reverse that specific word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">start</span> <span class="o">=</span> <span class="n">end</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>												<span class="c1">// update start to the new word beginning
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>										<span class="c1">// create a new string out of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">	Reverses a word in-place by iterating n/2 times where n = len of the word.
</span></span></span><span class="line"><span class="cl"><span class="cm">	Traverse upto the middle point of the word while swapping each word from start+offset to end-	 offset.
</span></span></span><span class="line"><span class="cl"><span class="cm">	**/</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">reverseWord</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stop</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="o">(</span><span class="n">stop</span><span class="o">-</span><span class="n">start</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">stop</span><span class="o">-</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">stop</span><span class="o">-</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h3 id="quad-tree-intersectionhttpsleetcodecomproblemsquad-tree-intersectiona-namequad-tree-intersectiona"><a href="https://leetcode.com/problems/quad-tree-intersection/">Quad Tree Intersection</a><a name="quad-tree-intersection"></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Node</span> <span class="nf">intersect</span><span class="o">(</span><span class="n">Node</span> <span class="n">qt1</span><span class="o">,</span> <span class="n">Node</span> <span class="n">qt2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">isLeaf</span><span class="o">)</span>										<span class="c1">// If only a leaf, then return the one with true val
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">return</span> <span class="n">qt1</span><span class="o">.</span><span class="na">val</span> <span class="o">?</span> <span class="n">qt1</span> <span class="o">:</span> <span class="n">qt2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">qt2</span><span class="o">.</span><span class="na">isLeaf</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">qt2</span><span class="o">.</span><span class="na">val</span> <span class="o">?</span> <span class="n">qt2</span> <span class="o">:</span> <span class="n">qt1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>							<span class="c1">// Prepare for recursion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">n</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>											<span class="c1">// By default, each level node is not a leaf with 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">n</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>									<span class="c1">// value = true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">  		<span class="c1">// Keep traversing all the way to a terminal node and then store it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">n</span><span class="o">.</span><span class="na">topLeft</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">topLeft</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">topLeft</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span><span class="o">.</span><span class="na">topRight</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">topRight</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">topRight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span><span class="o">.</span><span class="na">bottomRight</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  		<span class="c1">// Check now if you&#39;re at the base case. If n&#39;s children are leaves and all their values are same, then make n a leaf and it&#39;s value the same as it&#39;s child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">topLeft</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">topRight</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">topLeft</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="na">topRight</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">topRight</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">.</span><span class="na">val</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">n</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">n</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">topLeft</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h3 id="long-pressed-namehttpsleetcodecomproblemslong-pressed-namea-namelong-pressed-namea"><a href="https://leetcode.com/problems/long-pressed-name/">Long Pressed Name</a><a name="long-pressed-name"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Long Pressed Name.</p>
<p>Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Long Pressed Name.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isLongPressedName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">typed</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">char</span><span class="o">[]</span> <span class="n">n</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>						<span class="c1">// Arrays are much nicer to work with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">char</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typed</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>						<span class="c1">// Record start and stop points for both
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">int</span> <span class="n">startN</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">endN</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">startT</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">endT</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="o">(</span><span class="n">startT</span> <span class="o">&lt;</span> <span class="n">endT</span><span class="o">)</span> <span class="o">{</span>										<span class="c1">// While we haven&#39;t looked at the whole string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">startN</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>									<span class="c1">// Let&#39;s first count same consecutive letters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="kt">int</span> <span class="n">countN</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>												<span class="c1">// in String name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">while</span> <span class="o">(</span><span class="n">temp</span> <span class="o">&lt;</span> <span class="n">endN</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">[</span><span class="n">startN</span><span class="o">]</span> <span class="o">==</span> <span class="n">n</span><span class="o">[</span><span class="n">temp</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">temp</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">              <span class="n">countN</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="kt">int</span> <span class="n">countT</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>												<span class="c1">// Do the same for typed string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">while</span> <span class="o">(</span><span class="n">startT</span> <span class="o">&lt;</span> <span class="n">endT</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">[</span><span class="n">startN</span><span class="o">]</span> <span class="o">==</span> <span class="n">t</span><span class="o">[</span><span class="n">startT</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">startT</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">              <span class="n">countT</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>																			<span class="c1">// If consecutive letters in typed string are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">countT</span> <span class="o">&lt;</span> <span class="n">countN</span><span class="o">)</span>									<span class="c1">// less than the ones in original name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>											<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">startN</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>												<span class="c1">// Otherwise, prepare for next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">startN</span> <span class="o">==</span> <span class="n">endN</span><span class="o">;</span>										<span class="c1">// Lastly, check if we were able to match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>																							<span class="c1">// all character of the name string
</span></span></span></code></pre></div><h3 id="binary-tree-zigzag-level-order-traversalhttpsleetcodecomproblemsbinary-tree-zigzag-level-order-traversala-namebinary-tree-zigzag-level-order-traversala"><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">Binary Tree Zigzag Level Order Traversal</a><a name="binary-tree-zigzag-level-order-traversal"></a></h3>
<p>The idea here is simple. We perform a BFS as usual using a Queue but I maintain a variable called <code>dir</code> to check which side do I add from. <code>dir=1</code> means add from Right-&gt;Left and <code>dir=-1</code> means add from usual Left-&gt;Right. I am also using LinkedList because of easy addition of elements in both direction. When I need to add from Right-&gt;Left, I use the <code>addFirst(E e)</code> method of LinkedList to add to the head, otherwise normal add to the tail. One important thing to take care of at each iteration is to know how many nodes to dequeue, hence the usage of the variable <code>children</code>. This allows me to keep track of how many children were added to the queue at each stage so I dequeue exactly that many children in the next stage. Apart from that, everything is straightforward.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">zigzagLevelOrder</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>										<span class="c1">// Children = 1 because only root is added.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">children</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// Added the root, so next time dir = 1 (Right-&gt;Left)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="kt">int</span> <span class="n">pushed</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">children</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// Poll only those nodes that were queued in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">TreeNode</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>							<span class="c1">// the previous stage.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                  <span class="n">l</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">              <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="n">l</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>							<span class="c1">// Left-&gt;Right add
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>								<span class="c1">// Add children, notice I am counting here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>									<span class="c1">// how many children I am pushing/queuing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="o">++</span><span class="n">pushed</span><span class="o">;</span>												<span class="c1">// to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="o">}</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>							<span class="c1">// Same thing for right child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                  <span class="o">++</span><span class="n">pushed</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">              <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>														<span class="c1">// Add this list to main list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">children</span> <span class="o">=</span> <span class="n">pushed</span><span class="o">;</span>											<span class="c1">// update # of children pushed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">dir</span> <span class="o">=</span> <span class="n">dir</span> <span class="o">==</span> <span class="n">1</span> <span class="o">?</span> <span class="o">-</span><span class="n">1</span><span class="o">:</span> <span class="n">1</span><span class="o">;</span>									<span class="c1">// update dir for next iteration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h3 id="array-partition-ihttpsleetcodecomproblemsarray-partition-ia-namearray-partition-ia"><a href="https://leetcode.com/problems/array-partition-i/">Array Partition I</a><a name="array-partition-I"></a></h3>
<p>Runtime: 3 ms, faster than 99.90% of Java online submissions for Array Partition I.</p>
<p>Memory Usage: 40.1 MB, less than 100.00% of Java online submissions for Array Partition I.</p>
<p>I originally came up with the sorting solution where you sort the array and look at two numbers at a time and keep the smaller number out of them and add to the sum. It was way slower, so I checked the fastest submission and this one is pretty smart. The idea is really good. We know there are going to be 20,001 numbers, so reserve an array for it. Now let&rsquo;s say we had duplicates in our array, ex [1,2,1,4,1,1], if we were to sort it, we would get [1,1,1,1,2,4]. Notice that those four 1&rsquo;s don&rsquo;t really matter because each of them pairs up with the other to give you a one 1. That is why we mark those particular indices as true and false. Notice that in our variable <code>sum</code> we would have counted them individually, making <code>sum = 4</code> when in fact it should be 2 since we only take one of them from two pairs. If we have even occurrence of any number, they would be false, meaning we don&rsquo;t need to account them in the <code>diff</code> calculation. Now coming to <code>diff</code> how do we compute it? First we have the <code>seen</code> array to know which elements we need to look at. If that particular index is true, then we check if it&rsquo;s the first element of the pair which we maintain via the boolean value <code>firstElemOfPair</code>. If its true, then <code>first</code> becomes that value. Otherwise, we know that we&rsquo;re looking at the second element so we update the <code>diff</code> which is basically that value subtract <code>first</code>. Notice that if we look at a pair in our example as (2,4), we would pick 2 and the <code>diff</code> would be 2. This needs to be subtracted from our <code>sum</code>, hence the reason to maintain both of them. At the end, we finally subtract sum and diff and divide the result by 2 because we were doubling our diff&rsquo;s too.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">arrayPairSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">boolean</span><span class="o">[]</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">20001</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">seen</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="n">10000</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span><span class="n">seen</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">10000</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">boolean</span> <span class="n">firstElemOfPair</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">seen</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="o">(</span><span class="n">seen</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span> <span class="o">(</span><span class="n">firstElemOfPair</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                  <span class="n">first</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">              <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="n">diff</span> <span class="o">+=</span> <span class="n">i</span><span class="o">-</span><span class="n">first</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">              <span class="n">firstElemOfPair</span> <span class="o">=</span> <span class="o">!</span><span class="n">firstElemOfPair</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">(</span><span class="n">sum</span><span class="o">-</span><span class="n">diff</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h3 id="reshape-the-matrixhttpsleetcodecomproblemsreshape-the-matrixa-namereshape-the-matrixa"><a href="https://leetcode.com/problems/reshape-the-matrix/">Reshape the Matrix</a><a name="reshape-the-matrix"></a></h3>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Reshape the Matrix.</p>
<p>Memory Usage: 38.4 MB, less than 100.00% of Java online submissions for Reshape the Matrix.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">matrixReshape</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">numsR</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>				                    <span class="c1">// Get rows and col of nums
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">numsC</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">numsR</span> <span class="o">*</span> <span class="n">numsC</span> <span class="o">!=</span> <span class="n">r</span><span class="o">*</span><span class="n">c</span> <span class="o">||</span> <span class="o">(</span><span class="n">numsR</span> <span class="o">==</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">numsC</span> <span class="o">==</span> <span class="n">c</span><span class="o">))</span>	<span class="c1">// If can&#39;t reshape or problems
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">;</span>									        <span class="c1">// asks to reshape in the same dimensions, return the same array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">];</span>			                    <span class="c1">// New matrix to be returned
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">nR</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">nC</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 	                <span class="c1">// To keep track of which element to consume and where to place it in the new matrix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">row</span> <span class="o">!=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mat</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">nR</span><span class="o">][</span><span class="n">nC</span><span class="o">++];</span>	                    <span class="c1">// Increment only the column value for both
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">col</span> <span class="o">==</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>								        <span class="c1">// Check if we are at boundary, if so, increment row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>									        <span class="c1">// and set col to 0 for both cases.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">row</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nC</span> <span class="o">==</span> <span class="n">numsC</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">nC</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">nR</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h3 id="swap-nodes-in-pairshttpsleetcodecomproblemsswap-nodes-in-pairsa-nameswap-nodes-in-pairsa"><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">Swap Nodes in Pairs</a><a name="swap-nodes-in-pairs"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>
<p>Memory Usage: 34.5 MB, less than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>
<p>The idea is simple. We add a dummy node in front for simplicity as it allows us to generalize the concept of getting two nodes at a time. We maintain a current pointer that points to the node in the actual LinkedList. Then, we get it&rsquo;s next and it&rsquo;s next.next and store it into n1 and n2. Now notice that before making n2&rsquo;s next = n1, we need to store n2&rsquo;s next into n1&rsquo;s next. After we do that, we need to make sure that current&rsquo;s next is n2 which is now working with the actual LinkedList. Then, we need to make sure that current.next.next is n1 which we just fixed and update current which is basically n1.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">swapPairs</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">n1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n1</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="generate-parentheseshttpsleetcodecomproblemsgenerate-parenthesesa-namegenerate-parenthesesa"><a href="https://leetcode.com/problems/generate-parentheses/">Generate Parentheses</a><a name="generate-parentheses"></a></h3>
<p>Iterative Approach 1: This one is very slow.</p>
<p>Runtime: 4 ms, faster than 8.87% of Java online submissions for Generate Parentheses.</p>
<p>Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>
<p>The idea is simple. We basically do a BFS and keep track of the parentheses combination we have obtained so far. Poll the queue and check if it&rsquo;s length is 2*n (for a given n, we would have # of open brackets = # of closed brackets), add it to the list and check next combination. If not, then check if we can add an open bracket, add it and update number of open bracket count and add this combination to the queue. Then try to see if we can add a closed bracket, if you can add it, then update closed bracket count add that combination to the queue. Keep doing this until the queue becomes empty. This is the first approach I came up with which is naive as you can see since it&rsquo;s doing an exhaustive search for all valid combination.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">open</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">close</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">o</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">open</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">close</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="s">&#34;(&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Node</span> <span class="n">n1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">open</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">close</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">Node</span> <span class="n">n2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">open</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">close</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">n1</span><span class="o">.</span><span class="na">open</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">n1</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="sc">&#39;(&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">n1</span><span class="o">.</span><span class="na">open</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">n2</span><span class="o">.</span><span class="na">close</span> <span class="o">&lt;</span> <span class="n">u</span><span class="o">.</span><span class="na">open</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">n2</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="sc">&#39;)&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">n2</span><span class="o">.</span><span class="na">close</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Recursive Solution 2: This one is much more faster. I generalized the above idea into the fact that I am adding only valid combinations and any invalid combinations are automatically discarded. The logic is as follows: We know for a given n, the string length should be 2*n. So that forms our base case for recursion, if the length of String <code>s</code> is <code>2n</code>, we want to add it to the list. Otherwise, we check if the number of open brackets we have so far is less than <code>n</code>. If so, we can add an open bracket. Then check if number of close bracket is less than <code>open</code>, if so that sequence would be valid and add a close bracket and recurse.</p>
<p>Runtime: 1 ms, faster than 95.16% of Java online submissions for Generate Parentheses.
Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="s">&#34;(&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">open</span><span class="o">,</span> <span class="kt">int</span> <span class="n">close</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">open</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">helper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">s</span><span class="o">+</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="n">open</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">close</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">close</span> <span class="o">&lt;</span> <span class="n">open</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">helper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">s</span><span class="o">+</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="n">open</span><span class="o">,</span> <span class="n">close</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>###<a href="https://leetcode.com/problems/distribute-candies/">Distribute Candies</a><a name="distribute-candies"></a></p>
<p>Pretty simple solution. We want to give maximize the number of unique candies to give to the sister. So we maintain a hashset to collect all the unique candies first. Both of them get half the candies, so let <code>s = number of candies they get</code>. Now, if the size of the set is greater than or equal to <code>s</code>, then the sister only gets <code>s</code> candies out of it. Otherwise, the maximum amount of unique candies she can get is equal to the set size.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">distributeCandies</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">candies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">candies</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">candies</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">share</span> <span class="o">=</span> <span class="n">candies</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">share</span> <span class="o">?</span> <span class="n">share</span><span class="o">:</span> <span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="maximum-subproduct-subarrayhttpsleetcodecomproblemsmaximum-product-subarraya-namemaximum-subproduct-subarraya"><a href="https://leetcode.com/problems/maximum-product-subarray/">Maximum subproduct subarray</a><a name="maximum-subproduct-subarray"></a></h3>
<p>Credits for this simplistic solution to LeetCode user <a href="https://leetcode.com/problems/maximum-product-subarray/discuss/48230/Possibly-simplest-solution-with-O(n)-time-complexity">mzchen</a>. The approach is very clever. Notice that if this problem was about finding maximum sum subarray, then a negative number would break the contiguous array. Here, what it does is that it makes our maximum product minimum when we see a negative number and vice versa. We keep track of maximum and minimum we have so far and check if we have a negative number. If so swap our max and min. Then, find the local maximum and minimum between current number and multiplying that number with our current max or min. After that, update our global max value and keep doing this for all values in the array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxProduct</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">imax</span> <span class="o">=</span> <span class="n">max</span><span class="o">,</span> <span class="n">imin</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">imax</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">imax</span> <span class="o">=</span> <span class="n">imin</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">imin</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">imax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">imax</span> <span class="o">*</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">imin</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">imin</span> <span class="o">*</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">imax</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="binary-tree-right-side-viewhttpsleetcodecomproblemsbinary-tree-right-side-viewa-namebinary-tree-right-side-viewa"><a href="https://leetcode.com/problems/binary-tree-right-side-view/">Binary Tree Right Side View</a><a name="binary-tree-right-side-view"></a></h3>
<p>Runtime: 1 ms, faster than 95.45% of Java online submissions for Binary Tree Right Side View.</p>
<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Binary Tree Right Side View.</p>
<p>This is an interesting problem cause initially, I thought we would always have a complete binary tree and I made my initial solution oriented towards it. But then I saw that it doesn&rsquo;t say that anywhere and it could be any kind of binary tree. So it got me thinking towards a more generalized approach. Notice that to get a right side view of the binary tree, we only need the last value at any given level and put it into the list. So we maintain a queue and also the number of elements we enqueue at each stage. Initially, we put the root node in our queue and our enqueue count is 1. We dequeue exactly that many elements and again enqueue each of those dequeued node&rsquo;s children. Notice that I am using the variable <code>newEnqueued</code> to keep track of newly enqueued elements. Lastly, we need to check if we dequeued the last element. If so, that must be a part of the solution since it has to be the rightmost element at that level, so I add it to the list. Update <code>enqueued</code> to the new value and repeat until our queue isn&rsquo;t empty.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">rightSideView</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">enqueued</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">newEnqueued</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enqueued</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">TreeNode</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">newEnqueued</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">newEnqueued</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">enqueued</span><span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">enqueued</span> <span class="o">=</span> <span class="n">newEnqueued</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-minimum-in-rotated-sorted-arrayhttpsleetcodecomproblemsfind-minimum-in-rotated-sorted-arraysubmissionsa-namefind-minimum-in-rotated-sorted-arraya"><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/submissions/">Find Minimum in Rotated Sorted Array</a><a name="find-minimum-in-rotated-sorted-array"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>
<p>Memory Usage: 38.6 MB, less than 77.27% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMin</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>									<span class="c1">// Base case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>		<span class="c1">// While we are in the ascending order half,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>						<span class="c1">// Find the middle element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">])</span>			<span class="c1">// If mid element &gt;= left element, then our min
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>								<span class="c1">// must be in the right half.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>									<span class="c1">// otherwise min in the left half.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>										<span class="c1">// left points to minimum element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="binary-search-tree-iteratorhttpsleetcodecomproblemsbinary-search-tree-iteratora-namebinary-search-tree-iteratora"><a href="https://leetcode.com/problems/binary-search-tree-iterator/">Binary Search Tree Iterator</a><a name="binary-search-tree-iterator"></a></h3>
<p>Runtime: 15 ms, faster than 99.74% of Java online submissions for Binary Search Tree Iterator.</p>
<p>Memory Usage: 49.9 MB, less than 93.83% of Java online submissions for Binary Search Tree Iterator.</p>
<p>Logic is same as your In-Order traversal of any Binary Tree, but store the node values you visit in any data structure. Here I am using an ArrayList for storing each of the visited node&rsquo;s value. Maintain <code>idx</code> value to keep track of which value to return. <code>hasNext()</code> method returns true as long as <code>idx &lt; list.size()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">BSTIterator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BSTIterator</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/** @return the next smallest number */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">idx</span><span class="o">++);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/** @return whether we have a next smallest number */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">idx</span> <span class="o">!=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="find-peak-elementhttpsleetcodecomproblemsfind-peak-elementa-namefind-peak-elementa"><a href="https://leetcode.com/problems/find-peak-element/">Find Peak Element</a><a name="find-peak-element"></a></h3>
<p>This question was asked to me for my internship at Yahoo! The idea is simple, we want any one of the peak. So to achieve <code>O(log n)</code> time, we have to mimic binary search algorithm. We look at the middle element and check it&rsquo;s neighbor, if it&rsquo;s greater than the middle element, then we know we will have atleast one peak on the right side. Why? Think what could happen. We know that the element next to middle is greater than it, so there are two possibilities on the right side, either elements keep increasing to the right of the middle&rsquo;s next element or we might go up till a particular index and then go down. So in any case, we will have a peak on the right side. On the other case, if the element on the right side is smaller than the middle, then we know that the left half including the middle will have the peak cause middle is already greater than middle&rsquo;s right, so we might have middle as the peak itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findPeakElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">],</span> <span class="n">high</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="next-permutationhttpsleetcodecomproblemsnext-permutationa-namenext-permutationa"><a href="https://leetcode.com/problems/next-permutation/">Next Permutation</a><a name="next-permutation"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Next Permutation.</p>
<p>Memory Usage: 40.3 MB, less than 47.00% of Java online submissions for Next Permutation.</p>
<p>This one was quite interesting in the sense it seems difficult but is very simple once you try out a few example. If we want to find the next lexicographical greater number, then we need to find a particular index from the right side of the array such that the number after it is greater than itself, because by swapping them would give us a next larger number. So what I first do is find the index of the number such that <code>num[idx] &gt; num[idx-1]</code>. We know at this point that all the numbers after that index are reverse sorted, so we need to fix it and sort them in increasing order because lexicographical order demands all the numbers in increasing manner. Example, say <code>nums = [2,3,1,4,2,1,0]</code>. You can see that that the next number should be <code>[2,3,2,0,1,1,4]</code>. Notice that I replaced the number at index 2 with the first number which is greater than it if the array after index 2 was sorted. This gaurantees us a larger lexicographical number. So the first while loop finds us that index number and then I reverse the array after it. Once you reverse it, we should expect the <code>nums</code> array to look like <code>[2,3,1,0,1,2,4]</code>. Note that now we need to find the number larger than the number at index 2, which is 1 in this case. The first number greater than 1 is 2, so the second while loop finds it and then we simply swap them to give us the next larger lexicographically greater number =&gt; <code>[2,3,2,0,1,1,4].</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">nextPermutation</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">idx</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">        <span class="o">--</span><span class="n">idx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">idx</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="o">[</span><span class="n">idx1</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx2</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="o">[</span><span class="n">idx2</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">swap</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">++,</span> <span class="n">end</span><span class="o">--);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="search-in-rotated-sorted-arrayhttpsleetcodecomproblemssearch-in-rotated-sorted-arraya-namesearch-in-rotated-sorted-arraya"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">Search in Rotated Sorted Array</a><a name="search-in-rotated-sorted-array"></a></h3>
<p>The idea is same as binary search except you need to keep track of which half to stay in. We compute the middle index and the value at that index. If the middle value is the target, then return that index. Otherwise, find the correct half. If the number on the left side is &lt; middle value then we know that between the left and middle index, values are increasing. We only need to now check if target is &lt; middle value, if so we need to adjust our right pointer otherwise adjust the left pointer. If left value is not &lt; middle value then we are at a shift where the array is pivoted. We again need to confirm now which half to take. There would be some index <code>i</code> such that <code>nums[left] &gt; nums[i] &lt; nums[mid]</code> and value are increasing upto <code>i</code> and shifts from index <code>i</code> onwards. In this case, we again need to adjust our index pointers and we repeat this loop until <code>left &lt;= right</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">midVal</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">midVal</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">midVal</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">midVal</span> <span class="o">&amp;&amp;</span> <span class="n">target</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="n">midVal</span> <span class="o">&amp;&amp;</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="transpose-matrixhttpsleetcodecomproblemstranspose-matrixa-nametranspose-matrixa"><a href="https://leetcode.com/problems/transpose-matrix/">Transpose Matrix</a><a name="transpose-matrix"></a></h3>
<p>Pretty straightforward. Create matrix B of opposite dimensions to those of A. We maintain <code>br</code> and <code>bc</code> which tracks row and columns of B. We iterate over each element of A and put it in <code>B[br][bc]</code> and then ideally we would increment <code>bc</code> for an exact copy, but since we want transpose, we increment <code>br</code> and then reset it to 0 if we fill all the values in a row and increment column count, giving us the tranpose of the matrix.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">transpose</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[][]</span> <span class="n">B</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">A</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">][</span><span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">br</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">B</span><span class="o">[</span><span class="n">br</span><span class="o">][</span><span class="n">bc</span><span class="o">]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(++</span><span class="n">br</span> <span class="o">==</span> <span class="n">B</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">br</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">bc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">B</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="merge-k-sorted-listshttpsleetcodecomproblemsmerge-k-sorted-listssubmissionsa-namemerge-k-sorted-listsa"><a href="https://leetcode.com/problems/merge-k-sorted-lists/submissions/">Merge K Sorted Lists</a><a name="merge-k-sorted-lists"></a></h3>
<p>This was an onsite interview question at ThousandEyes. The idea is simple. Basically, we have multiple sorted lists so we have access to one value at a time, that is head of the lists initially and the consecutive nodes. So we need to fetch the minimum element out of all of them in constant time. The easiest way for us to do this is to use a PriorityQueue and define the logic of comparision of two ListNodes. Then, we add all the nodes inside the PQ and build our resulting List. Fetch the minimum valued ListNode and add it to our list. Then we also need to update that particular list&rsquo;s head, so we  add that list&rsquo;s next in the PQ so the next time it is fetched, we fetch the correct node of the list. Repeat this until the list is empty and return dummy&rsquo;s next node.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">mergeKLists</span><span class="o">(</span><span class="n">ListNode</span><span class="o">[]</span> <span class="n">lists</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">lists</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;(</span><span class="n">lists</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="o">(</span><span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n1</span><span class="o">.</span><span class="na">val</span> <span class="o">-</span> <span class="n">n2</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">ListNode</span> <span class="n">ln</span><span class="o">:</span> <span class="n">lists</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">ln</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ln</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>List of Python Frameworks Libraries Software and Resources</title>
      <link>https://samirpaul1.github.io/blog/posts/list-of-python-frameworks-libraries-software-and-resources/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/list-of-python-frameworks-libraries-software-and-resources/</guid>
      <description>List of Python Frameworks Libraries Software and Resources</description>
      <content:encoded><![CDATA[<blockquote>
<p>A curated list of awesome Python frameworks, libraries, software and resources.</p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> Awesome Python
<ul>
<li><a href="#admin-panels">Admin Panels</a></li>
<li><a href="#algorithms-and-design-patterns">Algorithms and Design Patterns</a></li>
<li><a href="#asgi-servers">ASGI Servers</a></li>
<li><a href="#asynchronous-programming">Asynchronous Programming</a></li>
<li><a href="#audio">Audio</a></li>
<li><a href="#authentication">Authentication</a></li>
<li><a href="#build-tools">Build Tools</a></li>
<li><a href="#built-in-classes-enhancement">Built-in Classes Enhancement</a></li>
<li><a href="#caching">Caching</a></li>
<li><a href="#chatops-tools">ChatOps Tools</a></li>
<li><a href="#cms">CMS</a></li>
<li><a href="#code-analysis">Code Analysis</a></li>
<li><a href="#command-line-interface-development">Command-line Interface Development</a></li>
<li><a href="#command-line-tools">Command-line Tools</a></li>
<li><a href="#compatibility">Compatibility</a></li>
<li><a href="#computer-vision">Computer Vision</a></li>
<li><a href="#concurrency-and-parallelism">Concurrency and Parallelism</a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#cryptography">Cryptography</a></li>
<li><a href="#data-analysis">Data Analysis</a></li>
<li><a href="#data-validation">Data Validation</a></li>
<li><a href="#data-visualization">Data Visualization</a></li>
<li><a href="#database-drivers">Database Drivers</a></li>
<li><a href="#database">Database</a></li>
<li><a href="#date-and-time">Date and Time</a></li>
<li><a href="#debugging-tools">Debugging Tools</a></li>
<li><a href="#deep-learning">Deep Learning</a></li>
<li><a href="#devops-tools">DevOps Tools</a></li>
<li><a href="#distributed-computing">Distributed Computing</a></li>
<li><a href="#distribution">Distribution</a></li>
<li><a href="#documentation">Documentation</a></li>
<li><a href="#downloader">Downloader</a></li>
<li><a href="#e-commerce">E-commerce</a></li>
<li><a href="#editor-plugins-and-ides">Editor Plugins and IDEs</a></li>
<li><a href="#email">Email</a></li>
<li><a href="#enterprise-application-integrations">Enterprise Application Integrations</a></li>
<li><a href="#environment-management">Environment Management</a></li>
<li><a href="#files">Files</a></li>
<li><a href="#foreign-function-interface">Foreign Function Interface</a></li>
<li><a href="#forms">Forms</a></li>
<li><a href="#functional-programming">Functional Programming</a></li>
<li><a href="#game-development">Game Development</a></li>
<li><a href="#geolocation">Geolocation</a></li>
<li><a href="#gui-development">GUI Development</a></li>
<li><a href="#hardware">Hardware</a></li>
<li><a href="#html-manipulation">HTML Manipulation</a></li>
<li><a href="#http-clients">HTTP Clients</a></li>
<li><a href="#image-processing">Image Processing</a></li>
<li><a href="#implementations">Implementations</a></li>
<li><a href="#interactive-interpreter">Interactive Interpreter</a></li>
<li><a href="#internationalization">Internationalization</a></li>
<li><a href="#job-scheduler">Job Scheduler</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#machine-learning">Machine Learning</a></li>
<li><a href="#miscellaneous">Miscellaneous</a></li>
<li><a href="#natural-language-processing">Natural Language Processing</a></li>
<li><a href="#network-virtualization">Network Virtualization</a></li>
<li><a href="#news-feed">News Feed</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#package-management">Package Management</a></li>
<li><a href="#package-repositories">Package Repositories</a></li>
<li><a href="#penetration-testing">Penetration testing</a></li>
<li><a href="#permissions">Permissions</a></li>
<li><a href="#processes">Processes</a></li>
<li><a href="#recommender-systems">Recommender Systems</a></li>
<li><a href="#refactoring">Refactoring</a></li>
<li><a href="#restful-api">RESTful API</a></li>
<li><a href="#robotics">Robotics</a></li>
<li><a href="#rpc-servers">RPC Servers</a></li>
<li><a href="#science">Science</a></li>
<li><a href="#search">Search</a></li>
<li><a href="#serialization">Serialization</a></li>
<li><a href="#serverless-frameworks">Serverless Frameworks</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#specific-formats-processing">Specific Formats Processing</a></li>
<li><a href="#static-site-generator">Static Site Generator</a></li>
<li><a href="#tagging">Tagging</a></li>
<li><a href="#task-queues">Task Queues</a></li>
<li><a href="#template-engine">Template Engine</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#text-processing">Text Processing</a></li>
<li><a href="#third-party-apis">Third-party APIs</a></li>
<li><a href="#url-manipulation">URL Manipulation</a></li>
<li><a href="#video">Video</a></li>
<li><a href="#web-asset-management">Web Asset Management</a></li>
<li><a href="#web-content-extracting">Web Content Extracting</a></li>
<li><a href="#web-crawling">Web Crawling</a></li>
<li><a href="#web-frameworks">Web Frameworks</a></li>
<li><a href="#websocket">WebSocket</a></li>
<li><a href="#wsgi-servers">WSGI Servers</a></li>
</ul>
</li>
<li><a href="#resources">Resources</a>
<ul>
<li><a href="#books">Books</a></li>
<li><a href="#newsletters">Newsletters</a></li>
<li><a href="#podcasts">Podcasts</a></li>
<li><a href="#websites">Websites</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<hr>
<h2 id="admin-panels">Admin Panels</h2>
<p><em>Libraries for administrative interfaces.</em></p>
<ul>
<li><a href="https://github.com/ajenti/ajenti">ajenti</a> - The admin panel your servers deserve.</li>
<li><a href="https://grappelliproject.com/">django-grappelli</a> - A jazzy skin for the Django Admin-Interface.</li>
<li><a href="https://github.com/geex-arts/django-jet">django-jet</a> - Modern responsive template for the Django admin interface with improved functionality.</li>
<li><a href="https://djangosuit.com/">django-suit</a> - Alternative Django Admin-Interface (free only for Non-commercial use).</li>
<li><a href="https://github.com/sshwsfc/xadmin">django-xadmin</a> - Drop-in replacement of Django admin comes with lots of goodies.</li>
<li><a href="https://github.com/flask-admin/flask-admin">flask-admin</a> - Simple and extensible administrative interface framework for Flask.</li>
<li><a href="https://github.com/mher/flower">flower</a> - Real-time monitor and web admin for Celery.</li>
<li><a href="https://github.com/jet-admin/jet-bridge">jet-bridge</a> - Admin panel framework for any application with nice UI (ex Jet Django).</li>
<li><a href="https://github.com/wooey/wooey">wooey</a> - A Django app which creates automatic web UIs for Python scripts.</li>
</ul>
<h2 id="algorithms-and-design-patterns">Algorithms and Design Patterns</h2>
<p><em>Python implementation of data structures, algorithms and design patterns. Also see <a href="https://github.com/tayllan/awesome-algorithms">awesome-algorithms</a>.</em></p>
<ul>
<li>Algorithms
<ul>
<li><a href="https://github.com/keon/algorithms">algorithms</a> - Minimal examples of data structures and algorithms.</li>
<li><a href="https://github.com/prabhupant/python-ds">python-ds</a> - A collection of data structure and algorithms for coding interviews.</li>
<li><a href="https://github.com/grantjenks/python-sortedcontainers">sortedcontainers</a> - Fast and pure-Python implementation of sorted collections.</li>
<li><a href="https://github.com/TheAlgorithms/Python">TheAlgorithms</a> - All Algorithms implemented in Python.</li>
</ul>
</li>
<li>Design Patterns
<ul>
<li><a href="https://github.com/tylerlaberge/PyPattyrn">PyPattyrn</a> - A simple yet effective library for implementing common design patterns.</li>
<li><a href="https://github.com/faif/python-patterns">python-patterns</a> - A collection of design patterns in Python.</li>
<li><a href="https://github.com/pytransitions/transitions">transitions</a> - A lightweight, object-oriented finite state machine implementation.</li>
</ul>
</li>
</ul>
<h2 id="asgi-servers">ASGI Servers</h2>
<p><em><a href="https://asgi.readthedocs.io/en/latest/">ASGI</a>-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/django/daphne">daphne</a> - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP.</li>
<li><a href="https://github.com/encode/uvicorn">uvicorn</a> - A lightning-fast ASGI server implementation, using uvloop and httptools.</li>
</ul>
<h2 id="asynchronous-programming">Asynchronous Programming</h2>
<ul>
<li><a href="https://docs.python.org/3/library/asyncio.html">asyncio</a> - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.
<ul>
<li><a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a></li>
</ul>
</li>
<li><a href="https://github.com/python-trio/trio">trio</a> - A friendly library for async concurrency and I/O.</li>
<li><a href="https://twistedmatrix.com/trac/">Twisted</a> - An event-driven networking engine.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast asyncio event loop.</li>
</ul>
<h2 id="audio">Audio</h2>
<p><em>Libraries for manipulating audio and its metadata.</em></p>
<ul>
<li>Audio
<ul>
<li><a href="https://github.com/beetbox/audioread">audioread</a> - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li>
<li><a href="https://github.com/worldveil/dejavu">dejavu</a> - Audio fingerprinting and recognition.</li>
<li><a href="https://github.com/keunwoochoi/kapre">kapre</a> - Keras Audio Preprocessors.</li>
<li><a href="https://github.com/librosa/librosa">librosa</a> - Python library for audio and music analysis.</li>
<li><a href="https://github.com/sergree/matchering">matchering</a> - A library for automated reference audio mastering.</li>
<li><a href="http://bspaans.github.io/python-mingus/">mingus</a> - An advanced music theory and notation package with MIDI file and playback support.</li>
<li><a href="https://github.com/tyiannak/pyAudioAnalysis">pyAudioAnalysis</a> - Audio feature extraction, classification, segmentation and applications.</li>
<li><a href="https://github.com/jiaaro/pydub">pydub</a> - Manipulate audio with a simple and easy high level interface.</li>
<li><a href="https://github.com/Parisson/TimeSide">TimeSide</a> - Open web audio processing framework.</li>
</ul>
</li>
<li>Metadata
<ul>
<li><a href="https://github.com/beetbox/beets">beets</a> - A music library manager and <a href="https://musicbrainz.org/">MusicBrainz</a> tagger.</li>
<li><a href="https://github.com/nicfit/eyeD3">eyeD3</a> - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li>
<li><a href="https://github.com/quodlibet/mutagen">mutagen</a> - A Python module to handle audio metadata.</li>
<li><a href="https://github.com/devsnd/tinytag">tinytag</a> - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li>
</ul>
</li>
</ul>
<h2 id="authentication">Authentication</h2>
<p><em>Libraries for implementing authentications schemes.</em></p>
<ul>
<li>OAuth
<ul>
<li><a href="https://github.com/lepture/authlib">authlib</a> - JavaScript Object Signing and Encryption draft implementation.</li>
<li><a href="https://github.com/pennersr/django-allauth">django-allauth</a> - Authentication app for Django that &ldquo;just works.&rdquo;</li>
<li><a href="https://github.com/evonove/django-oauth-toolkit">django-oauth-toolkit</a> - OAuth 2 goodies for Django.</li>
<li><a href="https://github.com/idan/oauthlib">oauthlib</a> - A generic and thorough implementation of the OAuth request-signing logic.</li>
<li><a href="https://github.com/joestump/python-oauth2">python-oauth2</a> - A fully tested, abstract interface to creating OAuth clients and servers.</li>
<li><a href="https://github.com/omab/python-social-auth">python-social-auth</a> - An easy-to-setup social authentication mechanism.</li>
</ul>
</li>
<li>JWT
<ul>
<li><a href="https://github.com/jpadilla/pyjwt">pyjwt</a> - JSON Web Token implementation in Python.</li>
<li><a href="https://github.com/mpdavis/python-jose/">python-jose</a> - A JOSE implementation in Python.</li>
<li><a href="https://github.com/davedoesdev/python-jwt">python-jwt</a> - A module for generating and verifying JSON Web Tokens.</li>
</ul>
</li>
</ul>
<h2 id="build-tools">Build Tools</h2>
<p><em>Compile software from source code.</em></p>
<ul>
<li><a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">BitBake</a> - A make-like build tool for embedded Linux.</li>
<li><a href="http://www.buildout.org/en/latest/">buildout</a> - A build system for creating, assembling and deploying applications from multiple parts.</li>
<li><a href="https://github.com/platformio/platformio-core">PlatformIO</a> - A console tool to build code with different development platforms.</li>
<li><a href="https://github.com/pybuilder/pybuilder">pybuilder</a> - A continuous build tool written in pure Python.</li>
<li><a href="http://www.scons.org/">SCons</a> - A software construction tool.</li>
</ul>
<h2 id="built-in-classes-enhancement">Built-in Classes Enhancement</h2>
<p><em>Libraries for enhancing Python built-in classes.</em></p>
<ul>
<li><a href="https://github.com/python-attrs/attrs">attrs</a> - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li>
<li><a href="https://github.com/jab/bidict">bidict</a> - Efficient, Pythonic bidirectional map data structures and related functionality..</li>
<li><a href="https://github.com/cdgriffith/Box">Box</a> - Python dictionaries with advanced dot notation access.</li>
<li><a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> - (Python standard library) Data classes.</li>
<li><a href="https://github.com/carlosescri/DottedDict">DottedDict</a> - A library that provides a method of accessing lists and dicts with a dotted path notation.</li>
</ul>
<h2 id="cms">CMS</h2>
<p><em>Content Management Systems.</em></p>
<ul>
<li><a href="https://www.django-cms.org/en/">django-cms</a> - An Open source enterprise CMS based on the Django.</li>
<li><a href="https://github.com/feincms/feincms">feincms</a> - One of the most advanced Content Management Systems built on Django.</li>
<li><a href="https://github.com/indico/indico">indico</a> - A feature-rich event management system, made @ <a href="https://en.wikipedia.org/wiki/CERN">CERN</a>.</li>
<li><a href="https://github.com/Kotti/Kotti">Kotti</a> - A high-level, Pythonic web application framework built on Pyramid.</li>
<li><a href="https://github.com/stephenmcd/mezzanine">mezzanine</a> - A powerful, consistent, and flexible content management platform.</li>
<li><a href="https://plone.org/">plone</a> - A CMS built on top of the open source application server Zope.</li>
<li><a href="https://github.com/rochacbruno/quokka">quokka</a> - Flexible, extensible, small CMS powered by Flask and MongoDB.</li>
<li><a href="https://wagtail.io/">wagtail</a> - A Django content management system.</li>
</ul>
<h2 id="caching">Caching</h2>
<p><em>Libraries for caching data.</em></p>
<ul>
<li><a href="https://github.com/bbangert/beaker">beaker</a> - A WSGI middleware for sessions and caching.</li>
<li><a href="https://github.com/django-cache-machine/django-cache-machine">django-cache-machine</a> - Automatic caching and invalidation for Django models.</li>
<li><a href="https://github.com/Suor/django-cacheops">django-cacheops</a> - A slick ORM cache with automatic granular event-driven invalidation.</li>
<li><a href="http://dogpilecache.readthedocs.io/en/latest/">dogpile.cache</a> - dogpile.cache is a next generation replacement for Beaker made by the same authors.</li>
<li><a href="https://pypi.org/project/HermesCache/">HermesCache</a> - Python caching library with tag-based invalidation and dogpile effect prevention.</li>
<li><a href="https://github.com/lericson/pylibmc">pylibmc</a> - A Python wrapper around the <a href="https://libmemcached.org/libMemcached.html">libmemcached</a> interface.</li>
<li><a href="http://www.grantjenks.com/docs/diskcache/">python-diskcache</a> - SQLite and file backed cache backend with faster lookups than memcached and redis.</li>
</ul>
<h2 id="chatops-tools">ChatOps Tools</h2>
<p><em>Libraries for chatbot development.</em></p>
<ul>
<li><a href="https://github.com/errbotio/errbot/">errbot</a> - The easiest and most popular chatbot to implement ChatOps.</li>
</ul>
<h2 id="code-analysis">Code Analysis</h2>
<p><em>Tools of static analysis, linters and code quality checkers. Also see <a href="https://github.com/mre/awesome-static-analysis">awesome-static-analysis</a>.</em></p>
<ul>
<li>Code Analysis
<ul>
<li><a href="https://github.com/coala/coala/">coala</a> - Language independent and easily extendable code analysis application.</li>
<li><a href="https://github.com/scottrogowski/code2flow">code2flow</a> - Turn your Python and JavaScript code into DOT flowcharts.</li>
<li><a href="https://github.com/PyCQA/prospector">prospector</a> - A tool to analyse Python code.</li>
<li><a href="https://github.com/gak/pycallgraph">pycallgraph</a> - A library that visualises the flow (call graph) of your Python application.</li>
<li><a href="https://github.com/jendrikseipp/vulture">vulture</a> - A tool for finding and analysing dead Python code.</li>
</ul>
</li>
<li>Code Linters
<ul>
<li><a href="https://pypi.org/project/flake8/">flake8</a> - A wrapper around <code>pycodestyle</code>, <code>pyflakes</code> and McCabe.
<ul>
<li><a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions">awesome-flake8-extensions</a></li>
</ul>
</li>
<li><a href="https://github.com/klen/pylama">pylama</a> - A code audit tool for Python and JavaScript.</li>
<li><a href="https://www.pylint.org/">pylint</a> - A fully customizable source code analyzer.</li>
<li><a href="https://github.com/wemake-services/wemake-python-styleguide">wemake-python-styleguide</a> - The strictest and most opinionated python linter ever.</li>
</ul>
</li>
<li>Code Formatters
<ul>
<li><a href="https://github.com/python/black">black</a> - The uncompromising Python code formatter.</li>
<li><a href="https://github.com/timothycrosley/isort">isort</a> - A Python utility / library to sort imports.</li>
<li><a href="https://github.com/google/yapf">yapf</a> - Yet another Python code formatter from Google.</li>
</ul>
</li>
<li>Static Type Checkers, also see <a href="https://github.com/typeddjango/awesome-python-typing">awesome-python-typing</a>
<ul>
<li><a href="http://mypy-lang.org/">mypy</a> - Check variable types during compile time.</li>
<li><a href="https://github.com/facebook/pyre-check">pyre-check</a> - Performant type checking.</li>
<li><a href="https://github.com/python/typeshed">typeshed</a> - Collection of library stubs for Python, with static types.</li>
</ul>
</li>
<li>Static Type Annotations Generators
<ul>
<li><a href="https://github.com/Instagram/MonkeyType">MonkeyType</a> - A system for Python that generates static type annotations by collecting runtime types.</li>
<li><a href="https://github.com/dropbox/pyannotate">pyannotate</a> - Auto-generate PEP-484 annotations.</li>
<li><a href="https://github.com/google/pytype">pytype</a> - Pytype checks and infers types for Python code - without requiring type annotations.</li>
</ul>
</li>
</ul>
<h2 id="command-line-interface-development">Command-line Interface Development</h2>
<p><em>Libraries for building command-line applications.</em></p>
<ul>
<li>Command-line Application Development
<ul>
<li><a href="http://builtoncement.com/">cement</a> - CLI Application Framework for Python.</li>
<li><a href="http://click.pocoo.org/dev/">click</a> - A package for creating beautiful command line interfaces in a composable way.</li>
<li><a href="https://docs.openstack.org/developer/cliff/">cliff</a> - A framework for creating command-line programs with multi-level commands.</li>
<li><a href="http://docopt.org/">docopt</a> - Pythonic command line arguments parser.</li>
<li><a href="https://github.com/google/python-fire">python-fire</a> - A library for creating command line interfaces from absolutely any Python object.</li>
<li><a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> - A library for building powerful interactive command lines.</li>
</ul>
</li>
<li>Terminal Rendering
<ul>
<li><a href="https://github.com/rsalmei/alive-progress">alive-progress</a> - A new kind of Progress Bar, with real-time throughput, eta and very cool animations.</li>
<li><a href="https://github.com/peterbrittain/asciimatics">asciimatics</a> - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li>
<li><a href="https://github.com/glamp/bashplotlib">bashplotlib</a> - Making basic plots in the terminal.</li>
<li><a href="https://pypi.org/project/colorama/">colorama</a> - Cross-platform colored terminal text.</li>
<li><a href="https://github.com/willmcgugan/rich">rich</a> - Python library for rich text and beautiful formatting in the terminal. Also provides a great <code>RichHandler</code> log handler.</li>
<li><a href="https://github.com/tqdm/tqdm">tqdm</a> - Fast, extensible progress bar for loops and CLI.</li>
</ul>
</li>
</ul>
<h2 id="command-line-tools">Command-line Tools</h2>
<p><em>Useful CLI-based tools for productivity.</em></p>
<ul>
<li>Productivity Tools
<ul>
<li><a href="https://github.com/pykong/copier">copier</a> - A library and command-line utility for rendering projects templates.</li>
<li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> - A command-line utility that creates projects from cookiecutters (project templates).</li>
<li><a href="https://github.com/sloria/doitlive">doitlive</a> - A tool for live presentations in the terminal.</li>
<li><a href="https://github.com/gleitz/howdoi">howdoi</a> - Instant coding answers via the command line.</li>
<li><a href="https://github.com/pyinvoke/invoke#readme">Invoke</a> - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks.</li>
<li><a href="https://github.com/facebook/PathPicker">PathPicker</a> - Select files out of bash output.</li>
<li><a href="https://github.com/mooz/percol">percol</a> - Adds flavor of interactive selection to the traditional pipe concept on UNIX.</li>
<li><a href="https://github.com/nvbn/thefuck">thefuck</a> - Correcting your previous console command.</li>
<li><a href="https://github.com/tony/tmuxp">tmuxp</a> - A <a href="https://github.com/tmux/tmux">tmux</a> session manager.</li>
<li><a href="https://github.com/timofurrer/try">try</a> - A dead simple CLI to try out python packages - it&rsquo;s never been easier.</li>
</ul>
</li>
<li>CLI Enhancements
<ul>
<li><a href="https://github.com/jakubroztocil/httpie">httpie</a> - A command line HTTP client, a user-friendly cURL replacement.</li>
<li><a href="https://github.com/laixintao/iredis">iredis</a> - Redis CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/cloudnativelabs/kube-shell">kube-shell</a> - An integrated shell for working with the Kubernetes CLI.</li>
<li><a href="https://github.com/dbcli/litecli">litecli</a> - SQLite CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/mycli">mycli</a> - MySQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/pgcli">pgcli</a> - PostgreSQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/donnemartin/saws">saws</a> - A Supercharged <a href="https://github.com/aws/aws-cli">aws-cli</a>.</li>
</ul>
</li>
</ul>
<h2 id="compatibility">Compatibility</h2>
<p><em>Libraries for migrating from Python 2 to 3.</em></p>
<ul>
<li><a href="http://python-future.org/index.html">python-future</a> - The missing compatibility layer between Python 2 and Python 3.</li>
<li><a href="https://github.com/PyCQA/modernize">modernize</a> - Modernizes Python code for eventual Python 3 migration.</li>
<li><a href="https://pypi.org/project/six/">six</a> - Python 2 and 3 compatibility utilities.</li>
</ul>
<h2 id="computer-vision">Computer Vision</h2>
<p><em>Libraries for Computer Vision.</em></p>
<ul>
<li><a href="https://github.com/JaidedAI/EasyOCR">EasyOCR</a> - Ready-to-use OCR with 40+ languages supported.</li>
<li><a href="https://github.com/ageitgey/face_recognition">Face Recognition</a> - Simple facial recognition library.</li>
<li><a href="https://github.com/kornia/kornia/">Kornia</a> - Open Source Differentiable Computer Vision Library for PyTorch.</li>
<li><a href="https://opencv.org/">OpenCV</a> - Open Source Computer Vision Library.</li>
<li><a href="https://github.com/madmaze/pytesseract">pytesseract</a> - A wrapper for <a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a>.</li>
<li><a href="https://github.com/sightmachine/SimpleCV">SimpleCV</a> - An open source framework for building computer vision applications.</li>
<li><a href="https://github.com/sirfz/tesserocr">tesserocr</a> - Another simple, Pillow-friendly, wrapper around the <code>tesseract-ocr</code> API for OCR.</li>
</ul>
<h2 id="concurrency-and-parallelism">Concurrency and Parallelism</h2>
<p><em>Libraries for concurrent and parallel execution. Also see <a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a>.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html">concurrent.futures</a> - (Python standard library) A high-level interface for asynchronously executing callables.</li>
<li><a href="http://eventlet.net/">eventlet</a> - Asynchronous framework with WSGI support.</li>
<li><a href="http://www.gevent.org/">gevent</a> - A coroutine-based Python networking library that uses <a href="https://github.com/python-greenlet/greenlet">greenlet</a>.</li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html">multiprocessing</a> - (Python standard library) Process-based parallelism.</li>
<li><a href="https://github.com/soravux/scoop">scoop</a> - Scalable Concurrent Operations in Python.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast implementation of <code>asyncio</code> event loop on top of <code>libuv</code>.</li>
</ul>
<h2 id="configuration">Configuration</h2>
<p><em>Libraries for storing and parsing configuration options.</em></p>
<ul>
<li><a href="https://github.com/DiffSK/configobj">configobj</a> - INI file parser with validation.</li>
<li><a href="https://docs.python.org/3/library/configparser.html">configparser</a> - (Python standard library) INI file parser.</li>
<li><a href="https://github.com/facebookresearch/hydra">hydra</a> - Hydra is a framework for elegantly configuring complex applications.</li>
<li><a href="https://profig.readthedocs.io/en/latest/">profig</a> - Config from multiple formats with value conversion.</li>
<li><a href="https://github.com/henriquebastos/python-decouple">python-decouple</a> - Strict separation of settings from code.</li>
</ul>
<h2 id="cryptography">Cryptography</h2>
<ul>
<li><a href="https://cryptography.io/en/latest/">cryptography</a> - A package designed to expose cryptographic primitives and recipes to Python developers.</li>
<li><a href="https://github.com/paramiko/paramiko">paramiko</a> - The leading native Python SSHv2 protocol library.</li>
<li><a href="https://passlib.readthedocs.io/en/stable/">passlib</a> - Secure password storage/hashing library, very high level.</li>
<li><a href="https://github.com/pyca/pynacl">pynacl</a> - Python binding to the Networking and Cryptography (NaCl) library.</li>
</ul>
<h2 id="data-analysis">Data Analysis</h2>
<p><em>Libraries for data analyzing.</em></p>
<ul>
<li><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a> - Pandas on AWS.</li>
<li><a href="https://github.com/blaze/blaze">Blaze</a> - NumPy and Pandas interface to Big Data.</li>
<li><a href="https://github.com/mining/mining">Open Mining</a> - Business Intelligence (BI) in Pandas interface.</li>
<li><a href="https://github.com/ironmussa/Optimus">Optimus</a> - Agile Data Science Workflows made easy with PySpark.</li>
<li><a href="https://orange.biolab.si/">Orange</a> - Data mining, data visualization, analysis and machine learning through visual programming or scripts.</li>
<li><a href="http://pandas.pydata.org/">Pandas</a> - A library providing high-performance, easy-to-use data structures and data analysis tools.</li>
</ul>
<h2 id="data-validation">Data Validation</h2>
<p><em>Libraries for validating data. Used for forms in many cases.</em></p>
<ul>
<li><a href="https://github.com/pyeve/cerberus">Cerberus</a> - A lightweight and extensible data validation library.</li>
<li><a href="https://docs.pylonsproject.org/projects/colander/en/latest/">colander</a> - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li>
<li><a href="https://github.com/Julian/jsonschema">jsonschema</a> - An implementation of <a href="http://json-schema.org/">JSON Schema</a> for Python.</li>
<li><a href="https://github.com/keleshev/schema">schema</a> - A library for validating Python data structures.</li>
<li><a href="https://github.com/schematics/schematics">Schematics</a> - Data Structure Validation.</li>
<li><a href="https://github.com/podio/valideer">valideer</a> - Lightweight extensible data validation and adaptation library.</li>
<li><a href="https://github.com/alecthomas/voluptuous">voluptuous</a> - A Python data validation library.</li>
</ul>
<h2 id="data-visualization">Data Visualization</h2>
<p><em>Libraries for visualizing data. Also see <a href="https://github.com/sorrycc/awesome-javascript#data-visualization">awesome-javascript</a>.</em></p>
<ul>
<li><a href="https://github.com/altair-viz/altair">Altair</a> - Declarative statistical visualization library for Python.</li>
<li><a href="https://github.com/bokeh/bokeh">Bokeh</a> - Interactive Web Plotting for Python.</li>
<li><a href="https://github.com/bloomberg/bqplot">bqplot</a> - Interactive Plotting Library for the Jupyter Notebook.</li>
<li><a href="https://github.com/SciTools/cartopy">Cartopy</a> - A cartographic python library with matplotlib support.</li>
<li><a href="https://plot.ly/products/dash/">Dash</a> - Built on top of Flask, React and Plotly aimed at analytical web applications.
<ul>
<li><a href="https://github.com/Acrotrend/awesome-dash">awesome-dash</a></li>
</ul>
</li>
<li><a href="https://github.com/mingrammer/diagrams">diagrams</a> - Diagram as Code.</li>
<li><a href="http://matplotlib.org/">Matplotlib</a> - A Python 2D plotting library.</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a> - A grammar of graphics for Python based on ggplot2.</li>
<li><a href="http://www.pygal.org/en/latest/">Pygal</a> - A Python SVG Charts Creator.</li>
<li><a href="https://pypi.org/project/pygraphviz/">PyGraphviz</a> - Python interface to <a href="http://www.graphviz.org/">Graphviz</a>.</li>
<li><a href="http://www.pyqtgraph.org/">PyQtGraph</a> - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li>
<li><a href="https://github.com/mwaskom/seaborn">Seaborn</a> - Statistical data visualization using Matplotlib.</li>
<li><a href="https://github.com/vispy/vispy">VisPy</a> - High-performance scientific visualization based on OpenGL.</li>
</ul>
<h2 id="database">Database</h2>
<p><em>Databases implemented in Python.</em></p>
<ul>
<li><a href="https://github.com/patx/pickledb">pickleDB</a> - A simple and lightweight key-value store for Python.</li>
<li><a href="https://github.com/msiemens/tinydb">tinydb</a> - A tiny, document-oriented database.</li>
<li><a href="https://github.com/zopefoundation/ZODB">ZODB</a> - A native object database for Python. A key-value and object graph database.</li>
</ul>
<h2 id="database-drivers">Database Drivers</h2>
<p><em>Libraries for connecting and operating databases.</em></p>
<ul>
<li>MySQL - <a href="http://shlomi-noach.github.io/awesome-mysql/">awesome-mysql</a>
<ul>
<li><a href="https://github.com/PyMySQL/mysqlclient-python">mysqlclient</a> - MySQL connector with Python 3 support (<a href="https://sourceforge.net/projects/mysql-python/">mysql-python</a> fork).</li>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a> - A pure Python MySQL driver compatible to mysql-python.</li>
</ul>
</li>
<li>PostgreSQL - <a href="https://github.com/dhamaniasad/awesome-postgres">awesome-postgres</a>
<ul>
<li><a href="http://initd.org/psycopg/">psycopg2</a> - The most popular PostgreSQL adapter for Python.</li>
<li><a href="https://github.com/gmr/queries">queries</a> - A wrapper of the psycopg2 library for interacting with PostgreSQL.</li>
</ul>
</li>
<li>SQlite - <a href="https://github.com/planetopendata/awesome-sqlite">awesome-sqlite</a>
<ul>
<li><a href="https://docs.python.org/3/library/sqlite3.html">sqlite3</a> - (Python standard library) SQlite interface compliant with DB-API 2.0</li>
<li><a href="https://github.com/plasticityai/supersqlite">SuperSQLite</a> - A supercharged SQLite library built on top of <a href="https://github.com/rogerbinns/apsw">apsw</a>.</li>
</ul>
</li>
<li>Other Relational Databases
<ul>
<li><a href="https://pymssql.readthedocs.io/en/latest/">pymssql</a> - A simple database interface to Microsoft SQL Server.</li>
<li><a href="https://github.com/mymarilyn/clickhouse-driver">clickhouse-driver</a> - Python driver with native interface for ClickHouse.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/datastax/python-driver">cassandra-driver</a> - The Python Driver for Apache Cassandra.</li>
<li><a href="https://github.com/wbolster/happybase">happybase</a> - A developer-friendly library for Apache HBase.</li>
<li><a href="https://github.com/dpkp/kafka-python">kafka-python</a> - The Python client for Apache Kafka.</li>
<li><a href="https://py2neo.org/">py2neo</a> - A client library and toolkit for working with Neo4j.</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> - The official Python client for MongoDB.</li>
<li><a href="https://github.com/andymccurdy/redis-py">redis-py</a> - The Python client for Redis.</li>
</ul>
</li>
<li>Asynchronous Clients
<ul>
<li><a href="https://github.com/mongodb/motor">motor</a> - The async Python driver for MongoDB.</li>
</ul>
</li>
</ul>
<h2 id="date-and-time">Date and Time</h2>
<p><em>Libraries for working with dates and times.</em></p>
<ul>
<li><a href="https://arrow.readthedocs.io/en/latest/">Arrow</a> - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</li>
<li><a href="https://github.com/KoffeinFlummi/Chronyk">Chronyk</a> - A Python 3 library for parsing human-written times and dates.</li>
<li><a href="https://github.com/dateutil/dateutil">dateutil</a> - Extensions to the standard Python <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module.</li>
<li><a href="https://github.com/myusuf3/delorean/">delorean</a> - A library for clearing up the inconvenient truths that arise dealing with datetimes.</li>
<li><a href="https://github.com/timofurrer/maya">maya</a> - Datetimes for Humans.</li>
<li><a href="https://github.com/zachwill/moment">moment</a> - A Python library for dealing with dates/times. Inspired by <a href="http://momentjs.com/">Moment.js</a>.</li>
<li><a href="https://github.com/sdispater/pendulum">Pendulum</a> - Python datetimes made easy.</li>
<li><a href="https://github.com/shinux/PyTime">PyTime</a> - An easy-to-use Python module which aims to operate date/time/datetime by string.</li>
<li><a href="https://launchpad.net/pytz">pytz</a> - World timezone definitions, modern and historical. Brings the <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a> into Python.</li>
<li><a href="https://github.com/dirn/When.py">when.py</a> - Providing user-friendly functions to help perform common date and time actions.</li>
</ul>
<h2 id="debugging-tools">Debugging Tools</h2>
<p><em>Libraries for debugging code.</em></p>
<ul>
<li>pdb-like Debugger
<ul>
<li><a href="https://github.com/gotcha/ipdb">ipdb</a> - IPython-enabled <a href="https://docs.python.org/3/library/pdb.html">pdb</a>.</li>
<li><a href="https://github.com/antocuni/pdb">pdb++</a> - Another drop-in replacement for pdb.</li>
<li><a href="https://github.com/inducer/pudb">pudb</a> - A full-screen, console-based Python debugger.</li>
<li><a href="https://github.com/Kozea/wdb">wdb</a> - An improbable web debugger through WebSockets.</li>
</ul>
</li>
<li>Tracing
<ul>
<li><a href="https://github.com/khamidou/lptrace">lptrace</a> - <a href="http://man7.org/linux/man-pages/man1/strace.1.html">strace</a> for Python programs.</li>
<li><a href="https://github.com/ionelmc/python-manhole">manhole</a> - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.</li>
<li><a href="https://github.com/google/pyringe">pyringe</a> - Debugger capable of attaching to and injecting code into Python processes.</li>
<li><a href="https://github.com/ionelmc/python-hunter">python-hunter</a> - A flexible code tracing toolkit.</li>
</ul>
</li>
<li>Profiler
<ul>
<li><a href="https://github.com/rkern/line_profiler">line_profiler</a> - Line-by-line profiling.</li>
<li><a href="https://github.com/fabianp/memory_profiler">memory_profiler</a> - Monitor Memory usage of Python code.</li>
<li><a href="https://github.com/benfred/py-spy">py-spy</a> - A sampling profiler for Python programs. Written in Rust.</li>
<li><a href="https://github.com/uber/pyflame">pyflame</a> - A ptracing profiler For Python.</li>
<li><a href="https://github.com/nvdv/vprof">vprof</a> - Visual Python profiler.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/jazzband/django-debug-toolbar">django-debug-toolbar</a> - Display various debug information for Django.</li>
<li><a href="https://github.com/dcramer/django-devserver">django-devserver</a> - A drop-in replacement for Django&rsquo;s runserver.</li>
<li><a href="https://github.com/mgood/flask-debugtoolbar">flask-debugtoolbar</a> - A port of the django-debug-toolbar to flask.</li>
<li><a href="https://github.com/gruns/icecream">icecream</a> - Inspect variables, expressions, and program execution with a single, simple function call.</li>
<li><a href="https://github.com/eliben/pyelftools">pyelftools</a> - Parsing and analyzing ELF files and DWARF debugging information.</li>
</ul>
</li>
</ul>
<h2 id="deep-learning">Deep Learning</h2>
<p><em>Frameworks for Neural Networks and Deep Learning. Also see <a href="https://github.com/ChristosChristofidis/awesome-deep-learning">awesome-deep-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/BVLC/caffe">caffe</a> - A fast open framework for deep learning..</li>
<li><a href="https://github.com/keras-team/keras">keras</a> - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li>
<li><a href="https://github.com/dmlc/mxnet">mxnet</a> - A deep learning framework designed for both efficiency and flexibility.</li>
<li><a href="https://github.com/pytorch/pytorch">pytorch</a> - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li>
<li><a href="https://github.com/SerpentAI/SerpentAI">SerpentAI</a> - Game agent framework. Use any video game as a deep learning sandbox.</li>
<li><a href="https://github.com/tensorflow/tensorflow">tensorflow</a> - The most popular Deep Learning framework created by Google.</li>
<li><a href="https://github.com/Theano/Theano">Theano</a> - A library for fast numerical computation.</li>
</ul>
<h2 id="devops-tools">DevOps Tools</h2>
<p><em>Software and libraries for DevOps.</em></p>
<ul>
<li>Configuration Management
<ul>
<li><a href="https://github.com/ansible/ansible">ansible</a> - A radically simple IT automation platform.</li>
<li><a href="https://cloudinit.readthedocs.io/en/latest/">cloudinit</a> - A multi-distribution package that handles early initialization of a cloud instance.</li>
<li><a href="https://www.openstack.org/">OpenStack</a> - Open source software for building private and public clouds.</li>
<li><a href="https://github.com/Fizzadar/pyinfra">pyinfra</a> - A versatile CLI tools and python libraries to automate infrastructure.</li>
<li><a href="https://github.com/saltstack/salt">saltstack</a> - Infrastructure automation and management system.</li>
</ul>
</li>
<li>SSH-style Deployment
<ul>
<li><a href="https://github.com/sebastien/cuisine">cuisine</a> - Chef-like functionality for Fabric.</li>
<li><a href="https://github.com/fabric/fabric">fabric</a> - A simple, Pythonic tool for remote execution and deployment.</li>
<li><a href="https://github.com/fabtools/fabtools">fabtools</a> - Tools for writing awesome Fabric files.</li>
</ul>
</li>
<li>Process Management
<ul>
<li><a href="https://github.com/nickstenning/honcho">honcho</a> - A Python clone of <a href="https://github.com/ddollar/foreman">Foreman</a>, for managing Procfile-based applications.</li>
<li><a href="https://github.com/Supervisor/supervisor">supervisor</a> - Supervisor process control system for UNIX.</li>
</ul>
</li>
<li>Monitoring
<ul>
<li><a href="https://github.com/giampaolo/psutil">psutil</a> - A cross-platform process and system utilities module.</li>
</ul>
</li>
<li>Backup
<ul>
<li><a href="https://www.borgbackup.org/">BorgBackup</a> - A deduplicating archiver with compression and encryption.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://docs.docker.com/compose/">docker-compose</a> - Fast, isolated development environments using <a href="https://www.docker.com/">Docker</a>.</li>
</ul>
</li>
</ul>
<h2 id="distributed-computing">Distributed Computing</h2>
<p><em>Frameworks and libraries for Distributed Computing.</em></p>
<ul>
<li>Batch Processing
<ul>
<li><a href="https://github.com/dask/dask">dask</a> - A flexible parallel computing library for analytic computing.</li>
<li><a href="https://github.com/spotify/luigi">luigi</a> - A module that helps you build complex pipelines of batch jobs.</li>
<li><a href="https://github.com/Yelp/mrjob">mrjob</a> - Run MapReduce jobs on Hadoop or Amazon Web Services.</li>
<li><a href="https://pypi.org/project/pyspark/">PySpark</a> - <a href="https://spark.apache.org/">Apache Spark</a> Python API.</li>
<li><a href="https://github.com/ray-project/ray/">Ray</a> - A system for parallel and distributed Python that unifies the machine learning ecosystem.</li>
</ul>
</li>
<li>Stream Processing
<ul>
<li><a href="https://github.com/robinhood/faust">faust</a> - A stream processing library, porting the ideas from <a href="https://kafka.apache.org/documentation/streams/">Kafka Streams</a> to Python.</li>
<li><a href="https://github.com/Parsely/streamparse">streamparse</a> - Run Python code against real-time streams of data via <a href="http://storm.apache.org/">Apache Storm</a>.</li>
</ul>
</li>
</ul>
<h2 id="distribution">Distribution</h2>
<p><em>Libraries to create packaged executables for release distribution.</em></p>
<ul>
<li><a href="https://github.com/spotify/dh-virtualenv">dh-virtualenv</a> - Build and distribute a virtualenv as a Debian package.</li>
<li><a href="http://nuitka.net/">Nuitka</a> - Compile scripts, modules, packages to an executable or extension module.</li>
<li><a href="http://pythonhosted.org/py2app/">py2app</a> - Freezes Python scripts (Mac OS X).</li>
<li><a href="http://www.py2exe.org/">py2exe</a> - Freezes Python scripts (Windows).</li>
<li><a href="https://github.com/dashingsoft/pyarmor">pyarmor</a> - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts.</li>
<li><a href="https://github.com/pyinstaller/pyinstaller">PyInstaller</a> - Converts Python programs into stand-alone executables (cross-platform).</li>
<li><a href="http://pynsist.readthedocs.io/en/latest/">pynsist</a> - A tool to build Windows installers, installers bundle Python itself.</li>
<li><a href="https://github.com/linkedin/shiv">shiv</a> - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included.</li>
</ul>
<h2 id="documentation">Documentation</h2>
<p><em>Libraries for generating project documentation.</em></p>
<ul>
<li><a href="https://github.com/sphinx-doc/sphinx/">sphinx</a> - Python Documentation generator.
<ul>
<li><a href="https://github.com/yoloseem/awesome-sphinxdoc">awesome-sphinxdoc</a></li>
</ul>
</li>
<li><a href="https://github.com/mitmproxy/pdoc">pdoc</a> - Epydoc replacement to auto generate API documentation for Python libraries.</li>
<li><a href="https://github.com/pycco-docs/pycco">pycco</a> - The literate-programming-style documentation generator.</li>
</ul>
<h2 id="downloader">Downloader</h2>
<p><em>Libraries for downloading.</em></p>
<ul>
<li><a href="https://github.com/jindaxiang/akshare">akshare</a> - A financial data interface library, built for human beings!</li>
<li><a href="https://github.com/s3tools/s3cmd">s3cmd</a> - A command line tool for managing Amazon S3 and CloudFront.</li>
<li><a href="https://github.com/bloomreach/s4cmd">s4cmd</a> - Super S3 command line tool, good for higher performance.</li>
<li><a href="https://you-get.org/">you-get</a> - A YouTube/Youku/Niconico video downloader written in Python 3.</li>
<li><a href="https://rg3.github.io/youtube-dl/">youtube-dl</a> - A small command-line program to download videos from YouTube.</li>
</ul>
<h2 id="e-commerce">E-commerce</h2>
<p><em>Frameworks and libraries for e-commerce and payments.</em></p>
<ul>
<li><a href="https://github.com/lxneng/alipay">alipay</a> - Unofficial Alipay API for Python.</li>
<li><a href="https://github.com/stephenmcd/cartridge">Cartridge</a> - A shopping cart app built using the Mezzanine.</li>
<li><a href="http://oscarcommerce.com/">django-oscar</a> - An open-source e-commerce framework for Django.</li>
<li><a href="https://github.com/awesto/django-shop">django-shop</a> - A Django based shop system.</li>
<li><a href="https://github.com/MicroPyramid/forex-python">forex-python</a> - Foreign exchange rates, Bitcoin price index and currency conversion.</li>
<li><a href="https://github.com/agiliq/merchant">merchant</a> - A Django app to accept payments from various payment processors.</li>
<li><a href="https://github.com/carlospalol/money">money</a> - <code>Money</code> class with optional CLDR-backed locale-aware formatting and an extensible currency exchange.</li>
<li><a href="https://github.com/Alir3z4/python-currencies">python-currencies</a> - Display money format and its filthy currencies.</li>
<li><a href="http://getsaleor.com/">saleor</a> - An e-commerce storefront for Django.</li>
<li><a href="https://www.shuup.com/en/">shoop</a> - An open source E-Commerce platform based on Django.</li>
</ul>
<h2 id="editor-plugins-and-ides">Editor Plugins and IDEs</h2>
<ul>
<li>Emacs
<ul>
<li><a href="https://github.com/jorgenschaefer/elpy">elpy</a> - Emacs Python Development Environment.</li>
</ul>
</li>
<li>Sublime Text
<ul>
<li><a href="https://github.com/DamnWidget/anaconda">anaconda</a> - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.</li>
<li><a href="https://github.com/srusskih/SublimeJEDI">SublimeJEDI</a> - A Sublime Text plugin to the awesome auto-complete library Jedi.</li>
</ul>
</li>
<li>Vim
<ul>
<li><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a> - Vim bindings for the Jedi auto-completion library for Python.</li>
<li><a href="https://github.com/python-mode/python-mode">python-mode</a> - An all in one plugin for turning Vim into a Python IDE.</li>
<li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> - Includes <a href="https://github.com/davidhalter/jedi">Jedi</a>-based completion engine for Python.</li>
</ul>
</li>
<li>Visual Studio
<ul>
<li><a href="https://github.com/Microsoft/PTVS">PTVS</a> - Python Tools for Visual Studio.</li>
</ul>
</li>
<li>Visual Studio Code
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a> - The official VSCode extension with rich support for Python.</li>
</ul>
</li>
<li>IDE
<ul>
<li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a> - Commercial Python IDE by JetBrains. Has free community edition available.</li>
<li><a href="https://github.com/spyder-ide/spyder">spyder</a> - Open Source Python IDE.</li>
</ul>
</li>
</ul>
<h2 id="email">Email</h2>
<p><em>Libraries for sending and parsing email.</em></p>
<ul>
<li>Mail Servers
<ul>
<li><a href="https://github.com/modoboa/modoboa">modoboa</a> - A mail hosting and management platform including a modern Web UI.</li>
<li><a href="https://github.com/moggers87/salmon">salmon</a> - A Python Mail Server.</li>
</ul>
</li>
<li>Clients
<ul>
<li><a href="https://github.com/martinrusev/imbox">imbox</a> - Python IMAP for Humans.</li>
<li><a href="https://github.com/kootenpv/yagmail">yagmail</a> - Yet another Gmail/SMTP client.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/mailgun/flanker">flanker</a> - An email address and Mime parsing library.</li>
<li><a href="https://github.com/marrow/mailer">mailer</a> - High-performance extensible mail delivery framework.</li>
</ul>
</li>
</ul>
<h2 id="enterprise-application-integrations">Enterprise Application Integrations</h2>
<p><em>Platforms and tools for systems integrations in enterprise environments</em></p>
<ul>
<li><a href="https://zato.io">Zato</a> - ESB, SOA, REST, APIs and Cloud Integrations in Python.</li>
</ul>
<h2 id="environment-management">Environment Management</h2>
<p><em>Libraries for Python version and virtual environment management.</em></p>
<ul>
<li><a href="https://github.com/pyenv/pyenv">pyenv</a> - Simple Python version management.</li>
<li><a href="https://github.com/pypa/virtualenv">virtualenv</a> - A tool to create isolated Python environments.</li>
</ul>
<h2 id="files">Files</h2>
<p><em>Libraries for file manipulation and MIME type detection.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/mimetypes.html">mimetypes</a> - (Python standard library) Map filenames to MIME types.</li>
<li><a href="https://github.com/jaraco/path.py">path.py</a> - A module wrapper for <a href="https://docs.python.org/3/library/os.path.html">os.path</a>.</li>
<li><a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> - (Python standard library) An cross-platform, object-oriented path library.</li>
<li><a href="https://github.com/pyfilesystem/pyfilesystem2">PyFilesystem2</a> - Python&rsquo;s filesystem abstraction layer.</li>
<li><a href="https://github.com/ahupp/python-magic">python-magic</a> - A Python interface to the libmagic file type identification library.</li>
<li><a href="https://github.com/mikeorr/Unipath">Unipath</a> - An object-oriented approach to file/directory operations.</li>
<li><a href="https://github.com/gorakhargosh/watchdog">watchdog</a> - API and shell utilities to monitor file system events.</li>
</ul>
<h2 id="foreign-function-interface">Foreign Function Interface</h2>
<p><em>Libraries for providing foreign function interface.</em></p>
<ul>
<li><a href="https://pypi.org/project/cffi/">cffi</a> - Foreign Function Interface for Python calling C code.</li>
<li><a href="https://docs.python.org/3/library/ctypes.html">ctypes</a> - (Python standard library) Foreign Function Interface for Python calling C code.</li>
<li><a href="https://mathema.tician.de/software/pycuda/">PyCUDA</a> - A Python wrapper for Nvidia&rsquo;s CUDA API.</li>
<li><a href="http://www.swig.org/Doc1.3/Python.html">SWIG</a> - Simplified Wrapper and Interface Generator.</li>
</ul>
<h2 id="forms">Forms</h2>
<p><em>Libraries for working with forms.</em></p>
<ul>
<li><a href="https://github.com/Pylons/deform">Deform</a> - Python HTML form generation library influenced by the formish form generation library.</li>
<li><a href="https://github.com/dyve/django-bootstrap3">django-bootstrap3</a> - Bootstrap 3 integration with Django.</li>
<li><a href="https://github.com/zostera/django-bootstrap4">django-bootstrap4</a> - Bootstrap 4 integration with Django.</li>
<li><a href="https://github.com/django-crispy-forms/django-crispy-forms">django-crispy-forms</a> - A Django app which lets you create beautiful forms in a very elegant and DRY way.</li>
<li><a href="https://github.com/WiserTogether/django-remote-forms">django-remote-forms</a> - A platform independent Django form serializer.</li>
<li><a href="https://github.com/wtforms/wtforms">WTForms</a> - A flexible forms validation and rendering library.</li>
</ul>
<h2 id="functional-programming">Functional Programming</h2>
<p><em>Functional Programming with Python.</em></p>
<ul>
<li><a href="https://github.com/evhub/coconut">Coconut</a> - A variant of Python built for simple, elegant, Pythonic functional programming.</li>
<li><a href="https://github.com/pytoolz/cytoolz/">CyToolz</a> - Cython implementation of <code>Toolz</code>: High performance functional utilities.</li>
<li><a href="https://github.com/kachayev/fn.py">fn.py</a> - Functional programming in Python: implementation of missing features to enjoy FP.</li>
<li><a href="https://github.com/Suor/funcy">funcy</a> - A fancy and practical functional tools.</li>
<li><a href="https://github.com/erikrose/more-itertools">more-itertools</a> - More routines for operating on iterables, beyond <code>itertools</code>.</li>
<li><a href="https://github.com/dry-python/returns">returns</a> - A set of type-safe monads, transformers, and composition utilities.</li>
<li><a href="https://github.com/pytoolz/toolz">Toolz</a> - A collection of functional utilities for iterators, functions, and dictionaries.</li>
</ul>
<h2 id="gui-development">GUI Development</h2>
<p><em>Libraries for working with graphical user interface applications.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/curses.html">curses</a> - Built-in wrapper for <a href="http://www.gnu.org/software/ncurses/">ncurses</a> used to create terminal GUI applications.</li>
<li><a href="https://github.com/ChrisKnott/Eel">Eel</a> - A library for making simple Electron-like offline HTML/JS GUI apps.</li>
<li><a href="https://github.com/nucleic/enaml">enaml</a> - Creating beautiful user-interfaces with Declarative Syntax like QML.</li>
<li><a href="https://github.com/zoofIO/flexx">Flexx</a> - Flexx is a pure Python toolkit for creating GUI&rsquo;s, that uses web technology for its rendering.</li>
<li><a href="https://github.com/chriskiehl/Gooey">Gooey</a> - Turn command line programs into a full GUI application with one line.</li>
<li><a href="https://kivy.org/">kivy</a> - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li>
<li><a href="https://github.com/pyglet/pyglet">pyglet</a> - A cross-platform windowing and multimedia library for Python.</li>
<li><a href="https://wiki.gnome.org/Projects/PyGObject">PyGObject</a> - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li>
<li><a href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a> - Python bindings for the <a href="https://www.qt.io/">Qt</a> cross-platform application and UI framework.</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> - Wrapper for tkinter, Qt, WxPython and Remi.</li>
<li><a href="https://github.com/r0x0r/pywebview/">pywebview</a> - A lightweight cross-platform native wrapper around a webview component.</li>
<li><a href="https://wiki.python.org/moin/TkInter">Tkinter</a> - Tkinter is Python&rsquo;s de-facto standard GUI package.</li>
<li><a href="https://github.com/pybee/toga">Toga</a> - A Python native, OS native GUI toolkit.</li>
<li><a href="http://urwid.org/">urwid</a> - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li>
<li><a href="https://wxpython.org/">wxPython</a> - A blending of the wxWidgets C++ class library with the Python.</li>
<li><a href="https://github.com/RaylockLLC/DearPyGui/">DearPyGui</a> - A Simple GPU accelerated Python GUI framework</li>
</ul>
<h2 id="graphql">GraphQL</h2>
<p><em>Libraries for working with GraphQL.</em></p>
<ul>
<li><a href="https://github.com/graphql-python/graphene/">graphene</a> - GraphQL framework for Python.</li>
<li><a href="https://github.com/tartiflette/tartiflette-aiohttp/">tartiflette-aiohttp</a> - An <code>aiohttp</code>-based wrapper for Tartiflette to expose GraphQL APIs over HTTP.</li>
<li><a href="https://github.com/tartiflette/tartiflette-asgi/">tartiflette-asgi</a> - ASGI support for the Tartiflette GraphQL engine.</li>
<li><a href="https://tartiflette.io">tartiflette</a> - SDL-first GraphQL engine implementation for Python 3.6+ and asyncio.</li>
</ul>
<h2 id="game-development">Game Development</h2>
<p><em>Awesome game development libraries.</em></p>
<ul>
<li><a href="https://api.arcade.academy/en/latest/">Arcade</a> - Arcade is a modern Python framework for crafting games with compelling graphics and sound.</li>
<li><a href="http://cocos2d.org/">Cocos2d</a> - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.</li>
<li><a href="http://www.harfang3d.com">Harfang3D</a> - Python framework for 3D, VR and game development.</li>
<li><a href="https://www.panda3d.org/">Panda3D</a> - 3D game engine developed by Disney.</li>
<li><a href="http://www.pygame.org/news.html">Pygame</a> - Pygame is a set of Python modules designed for writing games.</li>
<li><a href="http://www.ogre3d.org/tikiwiki/PyOgre">PyOgre</a> - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li>
<li><a href="http://pyopengl.sourceforge.net/">PyOpenGL</a> - Python ctypes bindings for OpenGL and it&rsquo;s related APIs.</li>
<li><a href="https://pysdl2.readthedocs.io">PySDL2</a> - A ctypes based wrapper for the SDL2 library.</li>
<li><a href="https://www.renpy.org/">RenPy</a> - A Visual Novel engine.</li>
</ul>
<h2 id="geolocation">Geolocation</h2>
<p><em>Libraries for geocoding addresses and working with latitudes and longitudes.</em></p>
<ul>
<li><a href="https://github.com/SmileyChris/django-countries">django-countries</a> - A Django app that provides a country field for models and forms.</li>
<li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/">GeoDjango</a> - A world-class geographic web framework.</li>
<li><a href="https://github.com/maxmind/geoip-api-python">GeoIP</a> - Python API for MaxMind GeoIP Legacy Database.</li>
<li><a href="https://github.com/frewsxcv/python-geojson">geojson</a> - Python bindings and utilities for GeoJSON.</li>
<li><a href="https://github.com/geopy/geopy">geopy</a> - Python Geocoding Toolbox.</li>
</ul>
<h2 id="html-manipulation">HTML Manipulation</h2>
<p><em>Libraries for working with HTML and XML.</em></p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li>
<li><a href="https://github.com/mozilla/bleach">bleach</a> - A whitelist-based HTML sanitization and text linkification library.</li>
<li><a href="https://pypi.org/project/cssutils/">cssutils</a> - A CSS library for Python.</li>
<li><a href="https://github.com/html5lib/html5lib-python">html5lib</a> - A standards-compliant library for parsing and serializing HTML documents and fragments.</li>
<li><a href="http://lxml.de/">lxml</a> - A very fast, easy-to-use and versatile library for handling HTML and XML.</li>
<li><a href="https://github.com/pallets/markupsafe">MarkupSafe</a> - Implements a XML/HTML/XHTML Markup safe string for Python.</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a> - A jQuery-like library for parsing HTML.</li>
<li><a href="https://github.com/stchris/untangle">untangle</a> - Converts XML documents to Python objects for easy access.</li>
<li><a href="http://weasyprint.org">WeasyPrint</a> - A visual rendering engine for HTML and CSS that can export to PDF.</li>
<li><a href="https://xmldataset.readthedocs.io/en/latest/">xmldataset</a> - Simple XML Parsing.</li>
<li><a href="https://github.com/martinblech/xmltodict">xmltodict</a> - Working with XML feel like you are working with JSON.</li>
</ul>
<h2 id="http-clients">HTTP Clients</h2>
<p><em>Libraries for working with HTTP.</em></p>
<ul>
<li><a href="https://github.com/spyoungtech/grequests">grequests</a> - requests + gevent for asynchronous HTTP requests.</li>
<li><a href="https://github.com/httplib2/httplib2">httplib2</a> - Comprehensive HTTP client library.</li>
<li><a href="https://github.com/encode/httpx">httpx</a> - A next generation HTTP client for Python.</li>
<li><a href="https://github.com/psf/requests">requests</a> - HTTP Requests for Humans.</li>
<li><a href="https://github.com/twisted/treq">treq</a> - Python requests like API built on top of Twisted&rsquo;s HTTP client.</li>
<li><a href="https://github.com/shazow/urllib3">urllib3</a> - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li>
</ul>
<h2 id="hardware">Hardware</h2>
<p><em>Libraries for programming with hardware.</em></p>
<ul>
<li><a href="http://inotool.org/">ino</a> - Command line toolkit for working with <a href="https://www.arduino.cc/">Arduino</a>.</li>
<li><a href="https://github.com/boppreh/keyboard">keyboard</a> - Hook and simulate global keyboard events on Windows and Linux.</li>
<li><a href="https://github.com/boppreh/mouse">mouse</a> - Hook and simulate global mouse events on Windows and Linux.</li>
<li><a href="http://www.pingo.io/">Pingo</a> - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.</li>
<li><a href="https://github.com/SavinaRoja/PyUserInput">PyUserInput</a> - A module for cross-platform control of the mouse and keyboard.</li>
<li><a href="https://github.com/secdev/scapy">scapy</a> - A brilliant packet manipulation library.</li>
</ul>
<h2 id="image-processing">Image Processing</h2>
<p><em>Libraries for manipulating images.</em></p>
<ul>
<li><a href="https://github.com/rossgoodwin/hmap">hmap</a> - Image histogram remapping.</li>
<li><a href="https://sourceforge.net/projects/imgseek/">imgSeek</a> - A project for searching a collection of images using visual similarity.</li>
<li><a href="https://github.com/hhatto/nude.py">nude.py</a> - Nudity detection.</li>
<li><a href="https://github.com/daboth/pagan">pagan</a> - Retro identicon (Avatar) generation based on input string and hash.</li>
<li><a href="https://github.com/python-pillow/Pillow">pillow</a> - Pillow is the friendly <a href="http://www.pythonware.com/products/pil/">PIL</a> fork.</li>
<li><a href="https://github.com/WhyNotHugo/python-barcode">python-barcode</a> - Create barcodes in Python with no extra dependencies.</li>
<li><a href="https://github.com/ajkumar25/pygram">pygram</a> - Instagram-like image filters.</li>
<li><a href="http://github.com/pymatting/pymatting">PyMatting</a> - A library for alpha matting.</li>
<li><a href="https://github.com/lincolnloop/python-qrcode">python-qrcode</a> - A pure Python QR Code generator.</li>
<li><a href="https://github.com/dylanaraps/pywal">pywal</a> - A tool that generates color schemes from images.</li>
<li><a href="https://github.com/libvips/pyvips">pyvips</a> - A fast image processing library with low memory needs.</li>
<li><a href="https://github.com/fogleman/Quads">Quads</a> - Computer art based on quadtrees.</li>
<li><a href="http://scikit-image.org/">scikit-image</a> - A Python library for (scientific) image processing.</li>
<li><a href="https://github.com/thumbor/thumbor">thumbor</a> - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li>
<li><a href="https://github.com/dahlia/wand">wand</a> - Python bindings for <a href="http://www.imagemagick.org/script/magick-wand.php">MagickWand</a>, C API for ImageMagick.</li>
</ul>
<h2 id="implementations">Implementations</h2>
<p><em>Implementations of Python.</em></p>
<ul>
<li><a href="https://github.com/metawilm/cl-python">CLPython</a> - Implementation of the Python programming language written in Common Lisp.</li>
<li><a href="https://github.com/python/cpython">CPython</a> - <strong>Default, most widely used implementation of the Python programming language written in C.</strong></li>
<li><a href="http://cython.org/">Cython</a> - Optimizing Static Compiler for Python.</li>
<li><a href="https://github.com/google/grumpy">Grumpy</a> - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).</li>
<li><a href="https://github.com/IronLanguages/ironpython3">IronPython</a> - Implementation of the Python programming language written in C#.</li>
<li><a href="https://hg.python.org/jython">Jython</a> - Implementation of Python programming language written in Java for the JVM.</li>
<li><a href="https://github.com/micropython/micropython">MicroPython</a> - A lean and efficient Python programming language implementation.</li>
<li><a href="http://numba.pydata.org/">Numba</a> - Python JIT compiler to LLVM aimed at scientific Python.</li>
<li><a href="https://github.com/Maratyszcza/PeachPy">PeachPy</a> - x86-64 assembler embedded in Python.</li>
<li><a href="https://github.com/Microsoft/Pyjion">Pyjion</a> - A JIT for Python based upon CoreCLR.</li>
<li><a href="https://foss.heptapod.net/pypy/pypy">PyPy</a> - A very fast and compliant implementation of the Python language.</li>
<li><a href="https://github.com/dropbox/pyston">Pyston</a> - A Python implementation using JIT techniques.</li>
<li><a href="https://github.com/stackless-dev/stackless">Stackless Python</a> - An enhanced version of the Python programming language.</li>
</ul>
<h2 id="interactive-interpreter">Interactive Interpreter</h2>
<p><em>Interactive Python interpreters (REPL).</em></p>
<ul>
<li><a href="https://github.com/bpython/bpython">bpython</a> - A fancy interface to the Python interpreter.</li>
<li><a href="https://jupyter.org">Jupyter Notebook (IPython)</a> - A rich toolkit to help you make the most out of using Python interactively.
<ul>
<li><a href="https://github.com/markusschanta/awesome-jupyter">awesome-jupyter</a></li>
</ul>
</li>
<li><a href="https://github.com/jonathanslenders/ptpython">ptpython</a> - Advanced Python REPL built on top of the <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a>.</li>
</ul>
<h2 id="internationalization">Internationalization</h2>
<p><em>Libraries for working with i18n.</em></p>
<ul>
<li><a href="http://babel.pocoo.org/en/latest/">Babel</a> - An internationalization library for Python.</li>
<li><a href="https://github.com/ovalhub/pyicu">PyICU</a> - A wrapper of International Components for Unicode C++ library (<a href="http://site.icu-project.org/">ICU</a>).</li>
</ul>
<h2 id="job-scheduler">Job Scheduler</h2>
<p><em>Libraries for scheduling jobs.</em></p>
<ul>
<li><a href="https://airflow.apache.org/">Airflow</a> - Airflow is a platform to programmatically author, schedule and monitor workflows.</li>
<li><a href="http://apscheduler.readthedocs.io/en/latest/">APScheduler</a> - A light but powerful in-process task scheduler that lets you schedule functions.</li>
<li><a href="https://github.com/thauber/django-schedule">django-schedule</a> - A calendaring app for Django.</li>
<li><a href="http://pydoit.org/">doit</a> - A task runner and build tool.</li>
<li><a href="https://github.com/gunnery/gunnery">gunnery</a> - Multipurpose task execution tool for distributed systems with web-based interface.</li>
<li><a href="https://joblib.readthedocs.io/">Joblib</a> - A set of tools to provide lightweight pipelining in Python.</li>
<li><a href="https://github.com/fengsp/plan">Plan</a> - Writing crontab file in Python like a charm.</li>
<li><a href="https://github.com/PrefectHQ/prefect">Prefect</a> - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines.</li>
<li><a href="https://github.com/dbader/schedule">schedule</a> - Python job scheduling for humans.</li>
<li><a href="https://github.com/knipknap/SpiffWorkflow">Spiff</a> - A powerful workflow engine implemented in pure Python.</li>
<li><a href="https://docs.openstack.org/developer/taskflow/">TaskFlow</a> - A Python library that helps to make task execution easy, consistent and reliable.</li>
</ul>
<h2 id="logging">Logging</h2>
<p><em>Libraries for generating and working with logs.</em></p>
<ul>
<li><a href="http://logbook.readthedocs.io/en/stable/">logbook</a> - Logging replacement for Python.</li>
<li><a href="https://docs.python.org/3/library/logging.html">logging</a> - (Python standard library) Logging facility for Python.</li>
<li><a href="https://github.com/Delgan/loguru">loguru</a> - Library which aims to bring enjoyable logging in Python.</li>
<li><a href="https://github.com/getsentry/sentry-python">sentry-python</a> - Sentry SDK for Python.</li>
<li><a href="https://www.structlog.org/en/stable/">structlog</a> - Structured logging made easy.</li>
</ul>
<h2 id="machine-learning">Machine Learning</h2>
<p><em>Libraries for Machine Learning. Also see <a href="https://github.com/josephmisiti/awesome-machine-learning#python">awesome-machine-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/openai/gym">gym</a> - A toolkit for developing and comparing reinforcement learning algorithms.</li>
<li><a href="https://github.com/h2oai/h2o-3">H2O</a> - Open Source Fast Scalable Machine Learning Platform.</li>
<li><a href="https://github.com/benhamner/Metrics">Metrics</a> - Machine learning evaluation metrics.</li>
<li><a href="https://github.com/numenta/nupic">NuPIC</a> - Numenta Platform for Intelligent Computing.</li>
<li><a href="http://scikit-learn.org/">scikit-learn</a> - The most popular Python library for Machine Learning.</li>
<li><a href="http://spark.apache.org/docs/latest/ml-guide.html">Spark ML</a> - <a href="http://spark.apache.org/">Apache Spark</a>&rsquo;s scalable Machine Learning library.</li>
<li><a href="https://github.com/josephreisinger/vowpal_porpoise">vowpal_porpoise</a> - A lightweight Python wrapper for <a href="https://github.com/JohnLangford/vowpal_wabbit/">Vowpal Wabbit</a>.</li>
<li><a href="https://github.com/dmlc/xgboost">xgboost</a> - A scalable, portable, and distributed gradient boosting library.</li>
<li><a href="https://github.com/mindsdb/mindsdb">MindsDB</a> - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries.</li>
</ul>
<h2 id="microsoft-windows">Microsoft Windows</h2>
<p><em>Python programming on Microsoft Windows.</em></p>
<ul>
<li><a href="http://python-xy.github.io/">Python(x,y)</a> - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li>
<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs</a> - Unofficial Windows binaries for Python extension packages.</li>
<li><a href="https://github.com/pythonnet/pythonnet">PythonNet</a> - Python Integration with the .NET Common Language Runtime (CLR).</li>
<li><a href="https://github.com/mhammond/pywin32">PyWin32</a> - Python Extensions for Windows.</li>
<li><a href="https://winpython.github.io/">WinPython</a> - Portable development environment for Windows 7/8.</li>
</ul>
<h2 id="miscellaneous">Miscellaneous</h2>
<p><em>Useful libraries or tools that don&rsquo;t fit in the categories above.</em></p>
<ul>
<li><a href="https://github.com/jek/blinker">blinker</a> - A fast Python in-process signal/event dispatching system.</li>
<li><a href="https://github.com/mahmoud/boltons">boltons</a> - A set of pure-Python utilities.</li>
<li><a href="https://github.com/pallets/itsdangerous">itsdangerous</a> - Various helpers to pass trusted data to untrusted environments.</li>
<li><a href="https://github.com/magenta/magenta">magenta</a> - A tool to generate music and art using artificial intelligence.</li>
<li><a href="https://github.com/mitsuhiko/pluginbase">pluginbase</a> - A simple but flexible plugin system for Python.</li>
<li><a href="http://www.tryton.org/">tryton</a> - A general purpose business framework.</li>
</ul>
<h2 id="natural-language-processing">Natural Language Processing</h2>
<p><em>Libraries for working with human languages.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a> - Topic Modeling for Humans.</li>
<li><a href="https://github.com/saffsd/langid.py">langid.py</a> - Stand-alone language identification system.</li>
<li><a href="http://www.nltk.org/">nltk</a> - A leading platform for building Python programs to work with human language data.</li>
<li><a href="https://github.com/clips/pattern">pattern</a> - A web mining module.</li>
<li><a href="https://github.com/aboSamoor/polyglot">polyglot</a> - Natural language pipeline supporting hundreds of languages.</li>
<li><a href="https://github.com/facebookresearch/pytext">pytext</a> - A natural language modeling framework based on PyTorch.</li>
<li><a href="https://github.com/PetrochukM/PyTorch-NLP">PyTorch-NLP</a> - A toolkit enabling rapid deep learning NLP prototyping for research.</li>
<li><a href="https://spacy.io/">spacy</a> - A library for industrial-strength natural language processing in Python and Cython.</li>
<li><a href="https://github.com/stanfordnlp/stanza">Stanza</a> - The Stanford NLP Group&rsquo;s official Python library, supporting 60+ languages.</li>
</ul>
</li>
<li>Chinese
<ul>
<li><a href="https://github.com/fighting41love/funNLP">funNLP</a> - A collection of tools and datasets for Chinese NLP.</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a> - The most popular Chinese text segmentation library.</li>
<li><a href="https://github.com/lancopku/pkuseg-python">pkuseg-python</a> - A toolkit for Chinese word segmentation in various domains.</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> - A library for processing Chinese text.</li>
</ul>
</li>
</ul>
<h2 id="network-virtualization">Network Virtualization</h2>
<p><em>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</em></p>
<ul>
<li><a href="https://github.com/mininet/mininet">mininet</a> - A popular network emulator and API written in Python.</li>
<li><a href="https://github.com/napalm-automation/napalm">napalm</a> - Cross-vendor API to manipulate network devices.</li>
<li><a href="https://github.com/noxrepo/pox">pox</a> - A Python-based SDN control applications, such as OpenFlow SDN controllers.</li>
</ul>
<h2 id="news-feed">News Feed</h2>
<p><em>Libraries for building user&rsquo;s activities.</em></p>
<ul>
<li><a href="https://github.com/justquick/django-activity-stream">django-activity-stream</a> - Generating generic activity streams from the actions on your site.</li>
<li><a href="https://github.com/tschellenbach/Stream-Framework">Stream Framework</a> - Building news feed and notification systems using Cassandra and Redis.</li>
</ul>
<h2 id="orm">ORM</h2>
<p><em>Libraries that implement Object-Relational Mapping or data mapping techniques.</em></p>
<ul>
<li>Relational Databases
<ul>
<li><a href="https://docs.djangoproject.com/en/dev/topics/db/models/">Django Models</a> - The Django ORM.</li>
<li><a href="https://www.sqlalchemy.org/">SQLAlchemy</a> - The Python SQL Toolkit and Object Relational Mapper.
<ul>
<li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a></li>
</ul>
</li>
<li><a href="https://github.com/pudo/dataset">dataset</a> - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li>
<li><a href="https://github.com/sdispater/orator">orator</a> -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li>
<li><a href="https://github.com/encode/orm">orm</a> - An async ORM.</li>
<li><a href="https://github.com/coleifer/peewee">peewee</a> - A small, expressive ORM.</li>
<li><a href="https://github.com/ponyorm/pony/">pony</a> - ORM that provides a generator-oriented interface to SQL.</li>
<li><a href="https://github.com/web2py/pydal/">pydal</a> - A pure Python Database Abstraction Layer.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/stephenmcd/hot-redis">hot-redis</a> - Rich Python data types for Redis.</li>
<li><a href="https://github.com/MongoEngine/mongoengine">mongoengine</a> - A Python Object-Document-Mapper for working with MongoDB.</li>
<li><a href="https://github.com/pynamodb/PynamoDB">PynamoDB</a> - A Pythonic interface for <a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a>.</li>
<li><a href="https://github.com/kiddouk/redisco">redisco</a> - A Python Library for Simple Models and Containers Persisted in Redis.</li>
</ul>
</li>
</ul>
<h2 id="package-management">Package Management</h2>
<p><em>Libraries for package and dependency management.</em></p>
<ul>
<li><a href="https://pip.pypa.io/en/stable/">pip</a> - The package installer for Python.
<ul>
<li><a href="https://github.com/jazzband/pip-tools">pip-tools</a> - A set of tools to keep your pinned Python dependencies fresh.</li>
<li><a href="https://pypi.org/">PyPI</a></li>
</ul>
</li>
<li><a href="https://github.com/conda/conda/">conda</a> - Cross-platform, Python-agnostic binary package manager.</li>
<li><a href="https://github.com/sdispater/poetry">poetry</a> - Python dependency management and packaging made easy.</li>
</ul>
<h2 id="package-repositories">Package Repositories</h2>
<p><em>Local PyPI repository server and proxies.</em></p>
<ul>
<li><a href="https://github.com/pypa/bandersnatch/">bandersnatch</a> - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li>
<li><a href="https://github.com/devpi/devpi">devpi</a> - PyPI server and packaging/testing/release tool.</li>
<li><a href="https://github.com/jazzband/localshop">localshop</a> - Local PyPI server (custom packages and auto-mirroring of pypi).</li>
<li><a href="https://github.com/pypa/warehouse">warehouse</a> - Next generation Python Package Repository (PyPI).</li>
</ul>
<h2 id="penetration-testing">Penetration Testing</h2>
<p><em>Frameworks and tools for penetration testing.</em></p>
<ul>
<li><a href="https://github.com/Manisso/fsociety">fsociety</a> - A Penetration testing framework.</li>
<li><a href="https://github.com/trustedsec/social-engineer-toolkit">setoolkit</a> - A toolkit for social engineering.</li>
<li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a> - Automatic SQL injection and database takeover tool.</li>
</ul>
<h2 id="permissions">Permissions</h2>
<p><em>Libraries that allow or deny users access to data or functionality.</em></p>
<ul>
<li><a href="https://github.com/django-guardian/django-guardian">django-guardian</a> - Implementation of per object permissions for Django 1.2+</li>
<li><a href="https://github.com/dfunckt/django-rules">django-rules</a> - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li>
</ul>
<h2 id="processes">Processes</h2>
<p><em>Libraries for starting and communicating with OS processes.</em></p>
<ul>
<li><a href="https://github.com/amitt001/delegator.py">delegator.py</a> - <a href="https://docs.python.org/3/library/subprocess.html">Subprocesses</a> for Humans 2.0.</li>
<li><a href="https://sarge.readthedocs.io/en/latest/">sarge</a> - Yet another wrapper for subprocess.</li>
<li><a href="https://github.com/amoffat/sh">sh</a> - A full-fledged subprocess replacement for Python.</li>
</ul>
<h2 id="recommender-systems">Recommender Systems</h2>
<p><em>Libraries for building recommender systems.</em></p>
<ul>
<li><a href="https://github.com/spotify/annoy">annoy</a> - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li>
<li><a href="https://github.com/ibayer/fastFM">fastFM</a> - A library for Factorization Machines.</li>
<li><a href="https://github.com/benfred/implicit">implicit</a> - A fast Python implementation of collaborative filtering for implicit datasets.</li>
<li><a href="https://github.com/guestwalk/libffm">libffm</a> - A library for Field-aware Factorization Machine (FFM).</li>
<li><a href="https://github.com/lyst/lightfm">lightfm</a> - A Python implementation of a number of popular recommendation algorithms.</li>
<li><a href="https://github.com/maciejkula/spotlight">spotlight</a> - Deep recommender models using PyTorch.</li>
<li><a href="https://github.com/NicolasHug/Surprise">Surprise</a> - A scikit for building and analyzing recommender systems.</li>
<li><a href="https://github.com/jfkirk/tensorrec">tensorrec</a> - A Recommendation Engine Framework in TensorFlow.</li>
</ul>
<h2 id="refactoring">Refactoring</h2>
<p><em>Refactoring tools and libraries for Python</em></p>
<ul>
<li><a href="http://bicyclerepair.sourceforge.net/">Bicycle Repair Man</a> - Bicycle Repair Man, a refactoring tool for Python.</li>
<li><a href="https://pybowler.io/">Bowler</a> - Safe code refactoring for modern Python.</li>
<li><a href="https://github.com/python-rope/rope">Rope</a> -  Rope is a python refactoring library.</li>
</ul>
<h2 id="restful-api">RESTful API</h2>
<p><em>Libraries for building RESTful APIs.</em></p>
<ul>
<li>Django
<ul>
<li><a href="http://www.django-rest-framework.org/">django-rest-framework</a> - A powerful and flexible toolkit to build web APIs.</li>
<li><a href="http://tastypieapi.org/">django-tastypie</a> - Creating delicious APIs for Django apps.</li>
</ul>
</li>
<li>Flask
<ul>
<li><a href="https://github.com/pyeve/eve">eve</a> - REST API framework powered by Flask, MongoDB and good intentions.</li>
<li><a href="https://github.com/flask-api/flask-api">flask-api</a> - Browsable Web APIs for Flask.</li>
<li><a href="https://github.com/flask-restful/flask-restful">flask-restful</a> - Quickly building REST APIs for Flask.</li>
</ul>
</li>
<li>Pyramid
<ul>
<li><a href="https://github.com/Cornices/cornice">cornice</a> - A RESTful framework for Pyramid.</li>
</ul>
</li>
<li>Framework agnostic
<ul>
<li><a href="https://github.com/encode/apistar">apistar</a> - A smart Web API framework, designed for Python 3.</li>
<li><a href="https://github.com/falconry/falcon">falcon</a> - A high-performance framework for building cloud APIs and web app backends.</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a> - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.</li>
<li><a href="https://github.com/hugapi/hug">hug</a> - A Python 3 framework for cleanly exposing APIs.</li>
<li><a href="https://github.com/jeffknupp/sandman2">sandman2</a> - Automated REST APIs for existing database-driven systems.</li>
<li><a href="https://github.com/huge-success/sanic">sanic</a> - A Python 3.6+ web server and web framework that&rsquo;s written to go fast.</li>
<li><a href="https://vibora.io/">vibora</a> - Fast, efficient and asynchronous Web framework inspired by Flask.</li>
</ul>
</li>
</ul>
<h2 id="robotics">Robotics</h2>
<p><em>Libraries for robotics.</em></p>
<ul>
<li><a href="https://github.com/AtsushiSakai/PythonRobotics">PythonRobotics</a> - This is a compilation of various robotics algorithms with visualizations.</li>
<li><a href="http://wiki.ros.org/rospy">rospy</a> - This is a library for ROS (Robot Operating System).</li>
</ul>
<h2 id="rpc-servers">RPC Servers</h2>
<p><em>RPC-compatible servers.</em></p>
<ul>
<li><a href="https://github.com/tomerfiliba/rpyc">RPyC</a> (Remote Python Call) - A transparent and symmetric RPC library for Python</li>
<li><a href="https://github.com/0rpc/zerorpc-python">zeroRPC</a> - zerorpc is a flexible RPC implementation based on <a href="http://zeromq.org/">ZeroMQ</a> and <a href="http://msgpack.org/">MessagePack</a>.</li>
</ul>
<h2 id="science">Science</h2>
<p><em>Libraries for scientific computing. Also see <a href="https://github.com/TomNicholas/Python-for-Scientists">Python-for-Scientists</a>.</em></p>
<ul>
<li><a href="http://www.astropy.org/">astropy</a> - A community Python library for Astronomy.</li>
<li><a href="https://github.com/chapmanb/bcbio-nextgen">bcbio-nextgen</a> - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li>
<li><a href="https://github.com/chapmanb/bcbb">bccb</a> - Collection of useful code related to biological analysis.</li>
<li><a href="http://biopython.org/wiki/Main_Page">Biopython</a> - Biopython is a set of freely available tools for biological computation.</li>
<li><a href="http://cclib.github.io/">cclib</a> - A library for parsing and interpreting the results of computational chemistry packages.</li>
<li><a href="http://colour-science.org/">Colour</a> - Implementing a comprehensive number of colour theory transformations and algorithms.</li>
<li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a> - Unsupervised machine learning toolbox for graph structured data.</li>
<li><a href="https://networkx.github.io/">NetworkX</a> - A high-productivity software for complex networks.</li>
<li><a href="http://nipy.org">NIPY</a> - A collection of neuroimaging toolkits.</li>
<li><a href="http://www.numpy.org/">NumPy</a> - A fundamental package for scientific computing with Python.</li>
<li><a href="https://github.com/obspy/obspy/wiki/">ObsPy</a> - A Python toolbox for seismology.</li>
<li><a href="http://openbabel.org/wiki/Main_Page">Open Babel</a> - A chemical toolbox designed to speak the many languages of chemical data.</li>
<li><a href="http://www.pydy.org/">PyDy</a> - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li>
<li><a href="https://github.com/pymc-devs/pymc3">PyMC</a> - Markov Chain Monte Carlo sampling toolkit.</li>
<li><a href="http://qutip.org/">QuTiP</a> - Quantum Toolbox in Python.</li>
<li><a href="http://www.rdkit.org/">RDKit</a> - Cheminformatics and Machine Learning Software.</li>
<li><a href="https://www.scipy.org/">SciPy</a> - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li>
<li><a href="https://gitlab.com/team-simpy/simpy">SimPy</a> -  A process-based discrete-event simulation framework.</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> - Statistical modeling and econometrics in Python.</li>
<li><a href="https://github.com/sympy/sympy">SymPy</a> - A Python library for symbolic mathematics.</li>
<li><a href="https://github.com/quantopian/zipline">Zipline</a> - A Pythonic algorithmic trading library.</li>
</ul>
<h2 id="search">Search</h2>
<p><em>Libraries and software for indexing and performing search queries on data.</em></p>
<ul>
<li><a href="https://github.com/django-haystack/django-haystack">django-haystack</a> - Modular search for Django.</li>
<li><a href="https://github.com/elastic/elasticsearch-dsl-py">elasticsearch-dsl-py</a> - The official high-level Python client for Elasticsearch.</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html">elasticsearch-py</a> - The official low-level Python client for <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>.</li>
<li><a href="https://github.com/django-haystack/pysolr">pysolr</a> - A lightweight Python wrapper for <a href="https://lucene.apache.org/solr/">Apache Solr</a>.</li>
<li><a href="http://whoosh.readthedocs.io/en/latest/">whoosh</a> - A fast, pure Python search engine library.</li>
</ul>
<h2 id="serialization">Serialization</h2>
<p><em>Libraries for serializing complex data types</em></p>
<ul>
<li><a href="https://github.com/marshmallow-code/marshmallow">marshmallow</a> - A lightweight library for converting complex objects to and from simple Python datatypes.</li>
<li><a href="https://github.com/TkTech/pysimdjson">pysimdjson</a> - A Python bindings for <a href="https://github.com/lemire/simdjson">simdjson</a>.</li>
<li><a href="https://github.com/python-rapidjson/python-rapidjson">python-rapidjson</a> - A Python wrapper around <a href="https://github.com/Tencent/rapidjson">RapidJSON</a>.</li>
<li><a href="https://github.com/esnme/ultrajson">ultrajson</a> - A fast JSON decoder and encoder written in C with Python bindings.</li>
</ul>
<h2 id="serverless-frameworks">Serverless Frameworks</h2>
<p><em>Frameworks for developing serverless Python code.</em></p>
<ul>
<li><a href="https://github.com/nficano/python-lambda">python-lambda</a> - A toolkit for developing and deploying Python code in AWS Lambda.</li>
<li><a href="https://github.com/Miserlou/Zappa">Zappa</a> - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li>
</ul>
<h2 id="shell">Shell</h2>
<p><em>Shells based on Python.</em></p>
<ul>
<li><a href="https://github.com/xonsh/xonsh/">xonsh</a> - A Python-powered, cross-platform, Unix-gazing shell language and command prompt.</li>
</ul>
<h2 id="specific-formats-processing">Specific Formats Processing</h2>
<p><em>Libraries for parsing and manipulating specific text formats.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/jazzband/tablib">tablib</a> - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li>
</ul>
</li>
<li>Office
<ul>
<li><a href="https://github.com/elapouya/python-docx-template">docxtpl</a> - Editing a docx document by jinja2 template</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li>
<li><a href="https://github.com/pyexcel/pyexcel">pyexcel</a> - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a> - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li>
<li><a href="https://github.com/scanny/python-pptx">python-pptx</a> - Python library for creating and updating PowerPoint (.pptx) files.</li>
<li><a href="https://github.com/unoconv/unoconv">unoconv</a> - Convert between any document format supported by LibreOffice/OpenOffice.</li>
<li><a href="https://github.com/jmcnamara/XlsxWriter">XlsxWriter</a> - A Python module for creating Excel .xlsx files.</li>
<li><a href="https://github.com/ZoomerAnalytics/xlwings">xlwings</a> - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li>
<li><a href="https://github.com/python-excel/xlwt">xlwt</a> / <a href="https://github.com/python-excel/xlrd">xlrd</a> - Writing and reading data and formatting information from Excel files.</li>
</ul>
</li>
<li>PDF
<ul>
<li><a href="https://github.com/euske/pdfminer">PDFMiner</a> - A tool for extracting information from PDF documents.</li>
<li><a href="https://github.com/mstamy2/PyPDF2">PyPDF2</a> - A library capable of splitting, merging and transforming PDF pages.</li>
<li><a href="https://www.reportlab.com/opensource/">ReportLab</a> - Allowing Rapid creation of rich PDF documents.</li>
</ul>
</li>
<li>Markdown
<ul>
<li><a href="https://github.com/lepture/mistune">Mistune</a> - Fastest and full featured pure Python parsers of Markdown.</li>
<li><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a> - A Python implementation of John Gruber’s Markdown.</li>
</ul>
</li>
<li>YAML
<ul>
<li><a href="http://pyyaml.org/">PyYAML</a> - YAML implementations for Python.</li>
</ul>
</li>
<li>CSV
<ul>
<li><a href="https://github.com/wireservice/csvkit">csvkit</a> - Utilities for converting to and working with CSV.</li>
</ul>
</li>
<li>Archive
<ul>
<li><a href="https://github.com/mitsuhiko/unp">unp</a> - A command line tool that can unpack archives easily.</li>
</ul>
</li>
</ul>
<h2 id="static-site-generator">Static Site Generator</h2>
<p><em>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</em></p>
<ul>
<li><a href="https://github.com/lektor/lektor">lektor</a> - An easy to use static CMS and blog engine.</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocs</a> - Markdown friendly documentation generator.</li>
<li><a href="https://github.com/sunainapai/makesite">makesite</a> - Simple, lightweight, and magic-free static site/blog generator (&lt; 130 lines).</li>
<li><a href="https://github.com/getnikola/nikola">nikola</a> - A static website and blog generator.</li>
<li><a href="https://github.com/getpelican/pelican">pelican</a> - Static site generator that supports Markdown and reST syntax.</li>
</ul>
<h2 id="tagging">Tagging</h2>
<p><em>Libraries for tagging items.</em></p>
<ul>
<li><a href="https://github.com/jazzband/django-taggit">django-taggit</a> - Simple tagging for Django.</li>
</ul>
<h2 id="task-queues">Task Queues</h2>
<p><em>Libraries for working with task queues.</em></p>
<ul>
<li><a href="https://docs.celeryproject.org/en/stable/">celery</a> - An asynchronous task queue/job queue based on distributed message passing.</li>
<li><a href="https://github.com/Bogdanp/dramatiq">dramatiq</a> - A fast and reliable background task processing library for Python 3.</li>
<li><a href="https://github.com/coleifer/huey">huey</a> - Little multi-threaded task queue.</li>
<li><a href="https://github.com/pricingassistant/mrq">mrq</a> - A distributed worker task queue in Python using Redis &amp; gevent.</li>
<li><a href="https://github.com/rq/rq">rq</a> - Simple job queues for Python.</li>
</ul>
<h2 id="template-engine">Template Engine</h2>
<p><em>Libraries and tools for templating and lexing.</em></p>
<ul>
<li><a href="https://genshi.edgewall.org/">Genshi</a> - Python templating toolkit for generation of web-aware output.</li>
<li><a href="https://github.com/pallets/jinja">Jinja2</a> - A modern and designer friendly templating language.</li>
<li><a href="http://www.makotemplates.org/">Mako</a> - Hyperfast and lightweight templating for the Python platform.</li>
</ul>
<h2 id="testing">Testing</h2>
<p><em>Libraries for testing codebases and generating test data.</em></p>
<ul>
<li>Testing Frameworks
<ul>
<li><a href="https://github.com/HypothesisWorks/hypothesis">hypothesis</a> - Hypothesis is an advanced Quickcheck style property based testing library.</li>
<li><a href="https://github.com/nose-devs/nose2">nose2</a> - The successor to <code>nose</code>, based on `unittest2.</li>
<li><a href="https://docs.pytest.org/en/latest/">pytest</a> - A mature full-featured Python testing tool.</li>
<li><a href="https://github.com/robotframework/robotframework">Robot Framework</a> - A generic test automation framework.</li>
<li><a href="https://docs.python.org/3/library/unittest.html">unittest</a> - (Python standard library) Unit testing framework.</li>
</ul>
</li>
<li>Test Runners
<ul>
<li><a href="https://github.com/CleanCut/green">green</a> - A clean, colorful test runner.</li>
<li><a href="http://nestorsalceda.github.io/mamba/">mamba</a> - The definitive testing tool for Python. Born under the banner of BDD.</li>
<li><a href="https://tox.readthedocs.io/en/latest/">tox</a> - Auto builds and tests distributions in multiple Python versions</li>
</ul>
</li>
<li>GUI / Web Testing
<ul>
<li><a href="https://github.com/locustio/locust">locust</a> - Scalable user load testing tool written in Python.</li>
<li><a href="https://github.com/asweigart/pyautogui">PyAutoGUI</a> - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li>
<li><a href="https://github.com/kiwicom/schemathesis">Schemathesis</a> - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications.</li>
<li><a href="https://pypi.org/project/selenium/">Selenium</a> - Python bindings for <a href="http://www.seleniumhq.org/">Selenium</a> WebDriver.</li>
<li><a href="https://github.com/seatgeek/sixpack">sixpack</a> - A language-agnostic A/B Testing framework.</li>
<li><a href="https://github.com/cobrateam/splinter">splinter</a> - Open source tool for testing web applications.</li>
</ul>
</li>
<li>Mock
<ul>
<li><a href="https://pypi.org/project/doublex/">doublex</a> - Powerful test doubles framework for Python.</li>
<li><a href="https://github.com/spulec/freezegun">freezegun</a> - Travel through time by mocking the datetime module.</li>
<li><a href="https://github.com/patrys/httmock">httmock</a> - A mocking library for requests for Python 2.6+ and 3.2+.</li>
<li><a href="https://github.com/gabrielfalcao/HTTPretty">httpretty</a> - HTTP request mock tool for Python.</li>
<li><a href="https://docs.python.org/3/library/unittest.mock.html">mock</a> - (Python standard library) A mocking and patching library.</li>
<li><a href="https://github.com/mindflayer/python-mocket">mocket</a> - A socket mock framework with gevent/asyncio/SSL support.</li>
<li><a href="https://github.com/getsentry/responses">responses</a> - A utility library for mocking out the requests Python library.</li>
<li><a href="https://github.com/kevin1024/vcrpy">VCR.py</a> - Record and replay HTTP interactions on your tests.</li>
</ul>
</li>
<li>Object Factories
<ul>
<li><a href="https://github.com/FactoryBoy/factory_boy">factory_boy</a> - A test fixtures replacement for Python.</li>
<li><a href="https://github.com/klen/mixer">mixer</a> - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc.</li>
<li><a href="https://github.com/vandersonmota/model_mommy">model_mommy</a> - Creating random fixtures for testing in Django.</li>
</ul>
</li>
<li>Code Coverage
<ul>
<li><a href="https://pypi.org/project/coverage/">coverage</a> - Code coverage measurement.</li>
</ul>
</li>
<li>Fake Data
<ul>
<li><a href="https://github.com/emirozer/fake2db">fake2db</a> - Fake database generator.</li>
<li><a href="https://github.com/joke2k/faker">faker</a> - A Python package that generates fake data.</li>
<li><a href="https://github.com/lk-geimfari/mimesis">mimesis</a> - is a Python library that help you generate fake data.</li>
<li><a href="https://pypi.org/project/radar/">radar</a> - Generate random datetime / time.</li>
</ul>
</li>
</ul>
<h2 id="text-processing">Text Processing</h2>
<p><em>Libraries for parsing and manipulating plain texts.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/chardet/chardet">chardet</a> - Python 2/3 compatible character encoding detector.</li>
<li><a href="https://docs.python.org/3/library/difflib.html">difflib</a> - (Python standard library) Helpers for computing deltas.</li>
<li><a href="https://github.com/LuminosoInsight/python-ftfy">ftfy</a> - Makes Unicode text less broken and more consistent automagically.</li>
<li><a href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a> - Fuzzy String Matching.</li>
<li><a href="https://github.com/ztane/python-Levenshtein/">Levenshtein</a> - Fast computation of Levenshtein distance and string similarity.</li>
<li><a href="https://github.com/vinta/pangu.py">pangu.py</a> - Paranoid text spacing.</li>
<li><a href="https://github.com/pwaller/pyfiglet">pyfiglet</a> - An implementation of figlet written in Python.</li>
<li><a href="https://github.com/mozillazg/python-pinyin">pypinyin</a> - Convert Chinese hanzi (漢字) to pinyin (拼音).</li>
<li><a href="https://github.com/orsinium/textdistance">textdistance</a> - Compute distance between sequences with 30+ algorithms.</li>
<li><a href="https://pypi.org/project/Unidecode/">unidecode</a> - ASCII transliterations of Unicode text.</li>
</ul>
</li>
<li>Slugify
<ul>
<li><a href="https://github.com/dimka665/awesome-slugify">awesome-slugify</a> - A Python slugify library that can preserve unicode.</li>
<li><a href="https://github.com/un33k/python-slugify">python-slugify</a> - A Python slugify library that translates unicode to ASCII.</li>
<li><a href="https://github.com/mozilla/unicode-slugify">unicode-slugify</a> - A slugifier that generates unicode slugs with Django as a dependency.</li>
</ul>
</li>
<li>Unique identifiers
<ul>
<li><a href="https://github.com/davidaurelio/hashids-python">hashids</a> - Implementation of <a href="http://hashids.org">hashids</a> in Python.</li>
<li><a href="https://github.com/skorokithakis/shortuuid">shortuuid</a> - A generator library for concise, unambiguous and URL-safe UUIDs.</li>
</ul>
</li>
<li>Parser
<ul>
<li><a href="https://github.com/dabeaz/ply">ply</a> - Implementation of lex and yacc parsing tools for Python.</li>
<li><a href="http://pygments.org/">pygments</a> - A generic syntax highlighter.</li>
<li><a href="https://github.com/pyparsing/pyparsing">pyparsing</a> - A general purpose framework for generating parsers.</li>
<li><a href="https://github.com/derek73/python-nameparser">python-nameparser</a> - Parsing human names into their individual components.</li>
<li><a href="https://github.com/daviddrysdale/python-phonenumbers">python-phonenumbers</a> - Parsing, formatting, storing and validating international phone numbers.</li>
<li><a href="https://github.com/selwin/python-user-agents">python-user-agents</a> - Browser user agent parser.</li>
<li><a href="https://github.com/andialbrecht/sqlparse">sqlparse</a> - A non-validating SQL parser.</li>
</ul>
</li>
</ul>
<h2 id="third-party-apis">Third-party APIs</h2>
<p><em>Libraries for accessing third party services APIs. Also see <a href="https://github.com/realpython/list-of-python-api-wrappers">List of Python API Wrappers and Libraries</a>.</em></p>
<ul>
<li><a href="https://libcloud.apache.org/">apache-libcloud</a> - One Python library for all clouds.</li>
<li><a href="https://github.com/boto/boto3">boto3</a> - Python interface to Amazon Web Services.</li>
<li><a href="https://github.com/istrategylabs/django-wordpress">django-wordpress</a> - WordPress models and views for Django.</li>
<li><a href="https://github.com/mobolic/facebook-sdk">facebook-sdk</a> - Facebook Platform Python SDK.</li>
<li><a href="https://github.com/google/google-api-python-client">google-api-python-client</a> - Google APIs Client Library for Python.</li>
<li><a href="https://github.com/burnash/gspread">gspread</a> - Google Spreadsheets Python API.</li>
<li><a href="https://github.com/ryanmcgrath/twython">twython</a> - A Python wrapper for the Twitter API.</li>
</ul>
<h2 id="url-manipulation">URL Manipulation</h2>
<p><em>Libraries for parsing URLs.</em></p>
<ul>
<li><a href="https://github.com/gruns/furl">furl</a> - A small Python library that makes parsing and manipulating URLs easy.</li>
<li><a href="https://github.com/codeinthehole/purl">purl</a> - A simple, immutable URL class with a clean API for interrogation and manipulation.</li>
<li><a href="https://github.com/ellisonleao/pyshorteners">pyshorteners</a> - A pure Python URL shortening lib.</li>
<li><a href="https://github.com/marshmallow-code/webargs">webargs</a> - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.</li>
</ul>
<h2 id="video">Video</h2>
<p><em>Libraries for manipulating video and GIFs.</em></p>
<ul>
<li><a href="https://zulko.github.io/moviepy/">moviepy</a> - A module for script-based movie editing with many formats, including animated GIFs.</li>
<li><a href="https://github.com/aizvorski/scikit-video">scikit-video</a> - Video processing routines for SciPy.</li>
<li><a href="https://github.com/abhiTronix/vidgear">vidgear</a> - Most Powerful multi-threaded Video Processing framework.</li>
</ul>
<h2 id="web-asset-management">Web Asset Management</h2>
<p><em>Tools for managing, compressing and minifying website assets.</em></p>
<ul>
<li><a href="https://github.com/django-compressor/django-compressor">django-compressor</a> - Compresses linked and inline JavaScript or CSS into a single cached file.</li>
<li><a href="https://github.com/jazzband/django-pipeline">django-pipeline</a> - An asset packaging library for Django.</li>
<li><a href="https://github.com/jschneier/django-storages">django-storages</a> - A collection of custom storage back ends for Django.</li>
<li><a href="http://www.fanstatic.org/en/latest/">fanstatic</a> - Packages, optimizes, and serves static file dependencies as Python packages.</li>
<li><a href="http://wimleers.com/fileconveyor">fileconveyor</a> - A daemon to detect and sync files to CDNs, S3 and FTP.</li>
<li><a href="https://github.com/miracle2k/flask-assets">flask-assets</a> - Helps you integrate webassets into your Flask app.</li>
<li><a href="https://github.com/miracle2k/webassets">webassets</a> - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li>
</ul>
<h2 id="web-content-extracting">Web Content Extracting</h2>
<p><em>Libraries for extracting web contents.</em></p>
<ul>
<li><a href="https://github.com/Alir3z4/html2text">html2text</a> - Convert HTML to Markdown-formatted text.</li>
<li><a href="https://github.com/michaelhelmick/lassie">lassie</a> - Web Content Retrieval for Humans.</li>
<li><a href="https://github.com/coleifer/micawber">micawber</a> - A small library for extracting rich content from URLs.</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> - News extraction, article extraction and content curation in Python.</li>
<li><a href="https://github.com/buriy/python-readability">python-readability</a> - Fast Python port of arc90&rsquo;s readability tool.</li>
<li><a href="https://github.com/psf/requests-html">requests-html</a> - Pythonic HTML Parsing for Humans.</li>
<li><a href="https://github.com/miso-belica/sumy">sumy</a> - A module for automatic summarization of text documents and HTML pages.</li>
<li><a href="https://github.com/deanmalmgren/textract">textract</a> - Extract text from any document, Word, PowerPoint, PDFs, etc.</li>
<li><a href="https://github.com/gaojiuli/toapi">toapi</a> - Every web site provides APIs.</li>
</ul>
<h2 id="web-crawling">Web Crawling</h2>
<p><em>Libraries to automate web scraping.</em></p>
<ul>
<li><a href="https://github.com/chineking/cola">cola</a> - A distributed crawling framework.</li>
<li><a href="https://pythonhosted.org/feedparser/">feedparser</a> - Universal feed parser.</li>
<li><a href="https://github.com/lorien/grab">grab</a> - Site scraping framework.</li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup">MechanicalSoup</a> - A Python library for automating interaction with websites.</li>
<li><a href="https://github.com/scrapinghub/portia">portia</a> - Visual scraping for Scrapy.</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> - A powerful spider system.</li>
<li><a href="https://github.com/jmcarp/robobrowser">robobrowser</a> - A simple, Pythonic library for browsing the web without a standalone web browser.</li>
<li><a href="https://scrapy.org/">scrapy</a> - A fast high-level screen scraping and web crawling framework.</li>
</ul>
<h2 id="web-frameworks">Web Frameworks</h2>
<p><em>Traditional full stack web frameworks. Also see <a href="https://github.com/vinta/awesome-python#restful-api">RESTful API</a>.</em></p>
<ul>
<li>Synchronous
<ul>
<li><a href="https://www.djangoproject.com/">Django</a> - The most popular web framework in Python.
<ul>
<li><a href="https://github.com/shahraizali/awesome-django">awesome-django</a></li>
<li><a href="https://github.com/wsvincent/awesome-django">awesome-django</a></li>
</ul>
</li>
<li><a href="http://flask.pocoo.org/">Flask</a> - A microframework for Python.
<ul>
<li><a href="https://github.com/humiaozuzu/awesome-flask">awesome-flask</a></li>
</ul>
</li>
<li><a href="https://pylonsproject.org/">Pyramid</a> - A small, fast, down-to-earth, open source Python web framework.
<ul>
<li><a href="https://github.com/uralbash/awesome-pyramid">awesome-pyramid</a></li>
</ul>
</li>
<li><a href="https://github.com/MasoniteFramework/masonite">Masonite</a> - The modern and developer centric Python web framework.</li>
</ul>
</li>
<li>Asynchronous
<ul>
<li><a href="http://www.tornadoweb.org/en/latest/">Tornado</a> - A web framework and asynchronous networking library.</li>
</ul>
</li>
</ul>
<h2 id="websocket">WebSocket</h2>
<p><em>Libraries for working with WebSocket.</em></p>
<ul>
<li><a href="https://github.com/crossbario/autobahn-python">autobahn-python</a> - WebSocket &amp; WAMP for Python on Twisted and <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>.</li>
<li><a href="https://github.com/django/channels">channels</a> - Developer-friendly asynchrony for Django.</li>
<li><a href="https://github.com/aaugustin/websockets">websockets</a> - A library for building WebSocket servers and clients with a focus on correctness and simplicity.</li>
</ul>
<h2 id="wsgi-servers">WSGI Servers</h2>
<p><em>WSGI-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/jonashaag/bjoern">bjoern</a> - Asynchronous, very fast and written in C.</li>
<li><a href="https://github.com/benoitc/gunicorn">gunicorn</a> - Pre-forked, ported from Ruby&rsquo;s Unicorn project.</li>
<li><a href="https://uwsgi-docs.readthedocs.io/en/latest/">uWSGI</a> - A project aims at developing a full stack for building hosting services, written in C.</li>
<li><a href="https://github.com/Pylons/waitress">waitress</a> - Multi-threaded, powers Pyramid.</li>
<li><a href="https://github.com/pallets/werkzeug">werkzeug</a> - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li>
</ul>
<h1 id="resources">Resources</h1>
<p>Where to discover learning resources or new Python libraries.</p>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.oreilly.com/library/view/fluent-python/9781491946237/">Fluent Python</a></li>
<li><a href="https://greenteapress.com/wp/think-python-2e/">Think Python</a></li>
</ul>
<h2 id="websites">Websites</h2>
<ul>
<li>Tutorials
<ul>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://www.pythoncheatsheet.org/">Python Cheatsheet</a></li>
<li><a href="https://realpython.com">Real Python</a></li>
<li><a href="https://docs.python-guide.org/">The Hitchhiker’s Guide to Python</a></li>
<li><a href="https://github.com/huangsam/ultimate-python">Ultimate Python study guide</a></li>
</ul>
</li>
<li>Libraries
<ul>
<li><a href="https://python.libhunt.com/">Awesome Python @LibHunt</a></li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://python.zeef.com/alan.richmond">Python ZEEF</a></li>
<li><a href="https://news.python.sc/">Pythonic News</a></li>
<li><a href="https://github.com/satwikkansal/wtfpython">What the f*ck Python!</a></li>
</ul>
</li>
</ul>
<h2 id="newsletters">Newsletters</h2>
<ul>
<li><a href="http://python.libhunt.com/newsletter">Awesome Python Newsletter</a></li>
<li><a href="http://pycoders.com/">Pycoder&rsquo;s Weekly</a></li>
<li><a href="https://realpython.com/python-tricks/">Python Tricks</a></li>
<li><a href="http://www.pythonweekly.com/">Python Weekly</a></li>
</ul>
<h2 id="podcasts">Podcasts</h2>
<ul>
<li><a href="https://djangochat.com/">Django Chat</a></li>
<li><a href="https://podcastinit.com/">Podcast.__init__</a></li>
<li><a href="https://pythonbytes.fm">Python Bytes</a></li>
<li><a href="https://runninginproduction.com/">Running in Production</a></li>
<li><a href="https://talkpython.fm/">Talk Python To Me</a></li>
<li><a href="https://testandcode.com/">Test and Code</a></li>
<li><a href="https://realpython.com/podcasts/rpp/">The Real Python Podcast</a></li>
</ul>
<h1 id="contributing">Contributing</h1>
<p>Your contributions are always welcome! Please take a look at the <a href="https://github.com/vinta/awesome-python/blob/master/CONTRIBUTING.md">contribution guidelines</a> first.</p>
<p>I will keep some pull requests open if I&rsquo;m not sure whether those libraries are awesome, you could <a href="https://github.com/vinta/awesome-python/pulls">vote for them</a> by adding 👍 to them. Pull requests will be merged when their votes reach <strong>20</strong>.</p>
<hr>
<p>If you have any question about this opinionated list, do not hesitate to contact me <a href="https://twitter.com/VintaChen">@VintaChen</a> on Twitter or open an issue on GitHub.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Lists of Technical Interview Questions</title>
      <link>https://samirpaul1.github.io/blog/posts/lists-of-technical-interview-questions/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/lists-of-technical-interview-questions/</guid>
      <description>Lists of Technical Interview Questions</description>
      <content:encoded><![CDATA[<blockquote>
<p>A curated list of lists of technical interview questions.</p>
</blockquote>
<h3 id="table-of-contents">Table of Contents</h3>
<ul>
<li>
<p><a href="#programming-languagesframeworksplatforms">Programming Languages/Frameworks/Platforms</a></p>
<ul>
<li><a href="#android">Android</a></li>
<li><a href="#angularjs">AngularJS</a></li>
<li><a href="#angular">Angular</a></li>
<li><a href="#backbonejs">BackboneJS</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#c-1">C</a></li>
<li><a href="#c-2">C♯</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#clojure">Clojure</a></li>
<li><a href="#css">CSS</a></li>
<li><a href="#cucumber">Cucumber</a></li>
<li><a href="#django">Django</a></li>
<li><a href="#docker">Docker</a></li>
<li><a href="#elastic">Elastic</a></li>
<li><a href="#emberjs">EmberJS</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#golang">Golang</a></li>
<li><a href="#graphql">GraphQl</a></li>
<li><a href="#html">HTML</a></li>
<li><a href="#ionic">Ionic</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#front-end-build-tools">Front-end build tools</a></li>
<li><a href="#knockoutjs">KnockoutJS</a></li>
<li><a href="#less">Less</a></li>
<li><a href="#lisp">Lisp</a></li>
<li><a href="#nodejs">NodeJS</a></li>
<li><a href="#objective-c">Objective-C</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#reactjs">ReactJS</a></li>
<li><a href="#ruby-on-rails">Rails</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#sass">Sass</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#spark">Spark</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#vuejs">Vue.js</a></li>
<li><a href="#wordpress">Wordpress</a></li>
<li><a href="#typescript">TypeScript</a></li>
</ul>
</li>
<li>
<p><a href="#database-technologies">Database technologies</a></p>
<ul>
<li><a href="#cassandra">Cassandra</a></li>
<li><a href="#microsoft-access">Microsoft Access</a></li>
<li><a href="#mongodb">MongoDB</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#neo4j">Neo4j</a></li>
<li><a href="#oracle">Oracle</a></li>
<li><a href="#postgres">Postgres</a></li>
<li><a href="#sql">SQL</a></li>
<li>SQL Lite</li>
</ul>
</li>
<li>
<p><a href="#caching-technologies">Caching technologies</a></p>
<ul>
<li><a href="#memcached">Memcached</a></li>
<li><a href="#redis">Redis</a></li>
</ul>
</li>
<li>
<p><a href="#os">OS</a></p>
<ul>
<li><a href="#linux">Linux</a></li>
<li><a href="#windows">Windows</a></li>
</ul>
</li>
<li>
<p><a href="#algorithms">Algorithms</a></p>
</li>
<li>
<p><a href="#blockchain">Blockchain</a></p>
</li>
<li>
<p><a href="#coding-exercises">Coding exercises</a></p>
</li>
<li>
<p><a href="#comprehensive-lists">Comprehensive lists</a></p>
</li>
<li>
<p><a href="#design-patterns">Design patterns</a></p>
</li>
<li>
<p><a href="#data-structures">Data structures</a></p>
</li>
<li>
<p><a href="#networks">Networks</a></p>
</li>
<li>
<p><a href="#security">Security</a></p>
</li>
<li>
<p><a href="#data-science">Data Science</a></p>
</li>
</ul>
<h2 id="programming-languagesframeworksplatforms">Programming Languages/Frameworks/Platforms</h2>
<h3 id="android">Android</h3>
<ul>
<li><a href="http://www.careerride.com/android-interview-questions.aspx">10 Android interview question answers for Freshers</a></li>
<li><a href="http://www.toptal.com/android/interview-questions">20 Essential Android Interview Questions from Toptal</a></li>
<li><a href="https://adevait.com/android/interview-questions">25 Essential Android Interview Questions from Adeva</a></li>
<li><a href="https://www.quora.com/What-are-good-job-interview-questions-for-an-Android-developer">A couple of Android questions posted by Quora users</a></li>
<li><a href="http://www.tutorialspoint.com/android/android_interview_questions.htm">A great list of Android interview questions covering all the aspects of this career</a></li>
<li><a href="https://github.com/derekargueta/Android-Interview-Questions">Collection of Android and Java related questions and topics, including general developer questions, Java core, Data structures, Build Tools, Programming Paradigms, Core Android, Databases and etc</a></li>
<li><a href="https://medium.com/@neteinstein/not-another-android-interviews-article-the-questions-3dedafa30bec">Collection of Android and Java questions divided by experience</a></li>
<li><a href="https://github.com/mindash/android-structured-interview">RocketSkill App Android Interview Questions</a></li>
<li><a href="https://github.com/anitaa1990/Android-Cheat-sheet">Android cheat sheet: Coding program, Data structure, Android and Java interview questions with answers and categorized by topics</a></li>
<li><a href="https://www.andreasschrade.com/2017/02/23/android-interview-questions/">Android Interview Questions And Answers From Beginner To Advanced</a></li>
<li><a href="https://github.com/mohsenoid/Android-Interview-Questions">Interview Questions for Senior Android Developers</a></li>
<li><a href="https://www.interviewbit.com/android-interview-questions/">35+ Android Interview Questions</a></li>
</ul>
<h3 id="angularjs">AngularJS</h3>
<ul>
<li><a href="http://www.toptal.com/angular-js/interview-questions">12 Essential AngularJS Interview Questions from Toptal</a></li>
<li><a href="https://github.com/gdi2290/ngExam">An AngularJS exam with questions from beginner to expert by @gdi2290 from @AngularClass</a></li>
<li><a href="https://www.codementor.io/angularjs/tutorial/angularjs-interview-questions-sample-answers">29 AngularJS Interview Questions – Can You Answer Them All? Great Article from Codementor</a></li>
<li><a href="http://www.web-technology-experts-notes.in/2014/11/angularjs-interview-questions-and-answers-for-experienced.html">AngularJS interview questions and answers for experienced developers</a></li>
<li><a href="http://www.tutorialspoint.com/angularjs/angularjs_interview_questions.htm">AngularJS Interview Questions which have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of AngularJS</a></li>
<li><a href="http://www.codeproject.com/Articles/891718/AngularJS-Interview-Questions-and-Answers">This article discusses the top 50 Most occurred AngularJS interview question with answers</a></li>
<li><a href="http://career.guru99.com/top-25-angular-js-interview-questions/">Top 25 Angularjs Interview Questions and Quiz</a></li>
<li><a href="https://www.techbeamers.com/latest-angularjs-interview-questions-answers/">100 AngularJS Interview Questions - Quick Refresher</a></li>
</ul>
<h3 id="angular">Angular</h3>
<ul>
<li><a href="https://github.com/Yonet/Angular-Interview-Questions">A list of helpful Angular related questions you can use to interview potential candidates, test yourself or completely ignore</a></li>
<li><a href="https://www.onlineinterviewquestions.com/angular2-interview-questions/">Angular 2 Interview Questions</a></li>
<li><a href="https://github.com/sudheerj/angular-interview-questions">List of 300 Angular Interview Questions and Answers</a></li>
<li><a href="https://www.interviewbit.com/angular-interview-questions/">Angular Interview Questions (2020)</a></li>
<li><a href="https://hackr.io/blog/angular-interview-questions">Top Angular Interview Questions and Answers in 2021</a></li>
</ul>
<h3 id="backbonejs">BackboneJS</h3>
<ul>
<li><a href="http://www.toptal.com/backbone-js/interview-questions">8 Essential Backbonejs Interview Questions from Toptal</a></li>
<li><a href="http://www.web-technology-experts-notes.in/2015/01/backbone-js-interview-questions-and-answers.html">Backbonejs Interview Questions And Answers from web technology experts notes</a></li>
<li><a href="http://career.guru99.com/top-25-backbone-js-interview-questions/">Top 25 Backbone.js interview questions</a></li>
</ul>
<h3 id="c">C++</h3>
<ul>
<li><a href="http://www.sanfoundry.com/cplusplus-interview-questions-answers/">1000+ Multiple Choice Questions &amp; Answers in C++ with explanations</a></li>
<li><a href="http://www.careerride.com/C++-Interview-questions-Answer.aspx">200 C++ interview questions and answers</a></li>
<li><a href="http://www.toptal.com/c-plus-plus/interview-questions">24 Essential C++ Interview Questions from Toptal</a></li>
<li><a href="http://www.geekinterview.com/Interview-Questions/Languages/C-Plus-Plus">C++ Interview Questions from GeekInterview</a></li>
<li><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming Q&amp;A and quizzes from computer science portal for geeks</a></li>
<li><a href="http://www.indiabix.com/cpp-programming/questions-and-answers/">C++ Programming Questions and Answers related to such topics as OOPs concepts, Object and Classes, Functions, Constructors and Destructors, Inheritance and etc</a></li>
<li><a href="https://github.com/haoel/leetcode">LeetCode Problems&rsquo; Solutions written in C++</a></li>
</ul>
<h3 id="c-1">C</h3>
<ul>
<li><a href="http://www.cquestions.com/2010/10/c-interview-questions-and-answers.html">Basic C language technical frequently asked interview questions and answers It includes data structures, pointers interview questions and answers for experienced</a></li>
<li><a href="http://www.indiabix.com/technical/c/">C Programming Interview Questions and Answers for such topics as Bits and Bytes, Preprocessors, Functions, Strings, Language basics and etc</a></li>
<li><a href="http://www.tutorialspoint.com/cprogramming/cprogramming_interview_questions.htm">C Programming Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of C Programming</a></li>
<li><a href="http://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-1/">First set of commonly asked C programming interview questions from computer science portal for geeks</a></li>
<li><a href="http://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-2/">Second set of commonly asked C programming interview questions from computer science portal for geeks</a></li>
<li><a href="https://www.toptal.com/c/interview-questions">9 Essential C Interview Questions with answers</a></li>
<li><a href="https://www.interviewbit.com/c-interview-questions/">Top C Interview Questions and Answers</a></li>
</ul>
<h3 id="c-2">C#</h3>
<ul>
<li><a href="http://www.toptal.com/c-sharp/interview-questions">15 Essential C# Interview Question from Toptal</a></li>
<li><a href="http://www.dotnetfunda.com/interviews/cat/6/csharp">C# interview questions from dotnetfunda.com</a></li>
<li><a href="http://career.guru99.com/top-50-c-sharp-interview-questions-answers/">Top 50 C# Interview Questions &amp; Answers</a></li>
<li><a href="https://www.techbeamers.com/csharp-coding-interview-questions-developers/">50 C# Coding Interview Questions and Answers</a></li>
<li><a href="https://www.techbeamers.com/csharp-oops-interview-questions-answers/">20 C# OOPS Interview Questions and Answers</a></li>
<li><a href="https://www.interviewbit.com/c-sharp-interview-questions/">30+ C# Interview Questions</a></li>
</ul>
<h3 id="net">.NET</h3>
<ul>
<li><a href="http://www.careerride.com/ASPNet-Questions.aspx">300 ASPNET interview questions and answers</a></li>
<li><a href="https://www.talkingdotnet.com/asp-net-core-interview-questions/">ASP.NET Core Interview Questions</a></li>
<li><a href="http://www.indiabix.com/technical/dotnet/">Great list of NET interview questions covering all the NET platform topics</a></li>
<li><a href="http://www.dotnetcurry.com/dotnetinterview/70/dotnet-interview-questions-answers-beginners">NET Interview Questions and Answers for Beginners which consists of the most frequently asked questions in NET This list of 100+ questions and answers gauge your familiarity with the NET platform</a></li>
<li><a href="http://stackoverflow.com/questions/365489/questions-every-good-net-developer-should-be-able-to-answer">Questions gathered by community of the StackOverflow</a></li>
<li><a href="http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx">What Great NET Developers Ought To Know (More NET Interview Questions)</a></li>
</ul>
<h3 id="clojure">Clojure</h3>
<ul>
<li><a href="http://www.learningclojure.com/2014/05/fizz-buzz-interview-question.html">Classic &lsquo;Fizz Buzz&rsquo; interview question for Clojure developers</a></li>
<li><a href="http://ita2zguide.blogspot.com.by/p/cc.html">Clojure Interview Questions for experienced devs</a></li>
<li><a href="https://github.com/dpetrovics/coding-exercises">Coding exercises in Clojure, handy practice for technical interview questions</a></li>
<li><a href="https://www.reddit.com/r/Clojure/comments/34qhha/clojure_coding_job_interview_experience/">Experience and questions from Clojure developer interview collected by Reddit users</a></li>
<li><a href="https://github.com/DerekCuevas/interview-cake-clj">Interview cake Clojure solutions</a></li>
</ul>
<h3 id="css">CSS</h3>
<ul>
<li><a href="http://www.careerride.com/Interview-Questions-CSS.aspx">CSS interview questions and answers for freshers and experienced candidates Also there you can find CSS online practice tests to fight written tests and certification exams on CSS</a></li>
<li><a href="http://www.techrepublic.com/blog/software-engineer/css-interview-questions-and-answers/">Development hiring managers and potential interviewees may find there sample CSS proficiency interview Q&amp;As and code snippets useful</a></li>
<li><a href="https://css-tricks.com/interview-questions-css/">Interview Questions and Exercises About CSS</a></li>
<li><a href="http://career.guru99.com/top-50-csscascading-style-sheet-interview-questions/">Top 50 CSS(Cascading Style Sheet) Interview Questions covering the most of tricky CSS moments</a></li>
<li><a href="https://frontendinterviewhandbook.com/css-questions/">Front End Interview Handbook - CSS Questions and Answers</a></li>
</ul>
<h3 id="cucumber">Cucumber</h3>
<ul>
<li><a href="https://ratedr05.wordpress.com/2017/09/22/cucumber-interview-questions/">Cucumber Web Application BDD Sample Interview Questions</a></li>
<li><a href="http://watir.com/simple-cucumber-watir-page-object-pattern-framework/">Guide to building a simple Cucumber + Watir page object pattern framework</a></li>
</ul>
<h3 id="django">Django</h3>
<ul>
<li><a href="http://insights.dice.com/2014/04/30/interview-questions-pythondjango-developers/">Some abstract interview questions for Python/Django developers</a></li>
<li><a href="http://www.ilian.io/django-interview-questions/">Some Django basic interview questions to establish the basic level of the candidates</a></li>
<li><a href="http://career.guru99.com/top-16-django-interview-questions/">Top 16 Django Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="docker">Docker</h3>
<ul>
<li><a href="https://mindmajix.com/docker-interview-questions">Docker Interview Questions</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/docker-interview-questions/">Top Docker Interview Questions You Must Prepare In 2019</a></li>
<li><a href="https://intellipaat.com/interview-question/docker-interview-questions/">Top Docker Interview Questions And Answers</a></li>
<li><a href="https://www.wisdomjobs.com/e-university/docker-software-interview-questions.html">DOCKER (SOFTWARE) INTERVIEW QUESTIONS &amp; ANSWERS</a></li>
<li><a href="https://www.fullstack.cafe/blog/docker-interview-questions-and-answers">30 Docker Interview Questions and Answers in 2019</a></li>
<li><a href="https://www.interviewbit.com/docker-interview-questions/">Docker Interview Questions &amp; Answers</a></li>
<li><a href="https://www.wissenhive.com/blogs/top-50-docker-interview-questions-and-answers">Top 50 Docker Interview Questions &amp; Answers</a></li>
<li><a href="https://www.techgeekbuzz.com/top-docker-interview-questions/">Top 50+ Docker Interview Questions and Answers in 2021</a></li>
</ul>
<h3 id="elastic">Elastic</h3>
<ul>
<li><a href="https://logit.io/blog/post/the-top-50-elk-stack-and-elasticsearch-interview-questions">Top Elastic Stack Interview Questions</a></li>
</ul>
<h3 id="emberjs">EmberJS</h3>
<ul>
<li><a href="http://www.toptal.com/emberjs/interview-questions">8 Essential Emberjs Interview Questions from Toptal</a></li>
<li><a href="http://career.guru99.com/top-25-ember-js-interview-questions/">Top 25 Emberjs Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="erlang">Erlang</h3>
<ul>
<li><a href="http://career.guru99.com/top-22-erlang-interview-questions/">Top 22 Erlang Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="golang">Golang</h3>
<ul>
<li><a href="https://github.com/mrekucci/epi">Solutions for Elements of Programming Interviews problems written in Golang</a></li>
<li><a href="https://github.com/efischer19/golang_ctci">Solutions for some basic coding interview tasks written in Go</a></li>
<li><a href="http://career.guru99.com/top-20-go-programming-interview-questions/">Top 20 GO Programming Interview Questions for both freshers and experienced developers</a></li>
</ul>
<h3 id="graphql">GraphQl</h3>
<ul>
<li><a href="https://www.fullstack.cafe/blog/5-graphql-interview-questions-you-should-know">8 GraphQl Interview Questions To Know</a></li>
<li><a href="https://www.howtographql.com/advanced/5-common-questions/">How to GraphQl - Common Questions</a></li>
</ul>
<h3 id="html">HTML</h3>
<ul>
<li><a href="http://www.sitepoint.com/10-typical-html-interview-exercises/">10 Typical HTML Interview Exercises from SitePoint.com</a></li>
<li><a href="http://www.toptal.com/html5/interview-questions">16 Essential HTML5 Interview Questions from Toptal</a></li>
<li><a href="http://www.codeproject.com/Articles/702051/important-HTML-Interview-questions-with-answe">40 important HTML 5 Interview questions with answers</a></li>
<li><a href="http://www.careerride.com/Interview-Questions-HTML.aspx">HTML interview questions and answers for freshers and experienced candidates Also find HTML online practice tests to fight written tests and certification exams on HTML</a></li>
<li><a href="http://career.guru99.com/top-50-html-interview-questions/">Top 50 HTML Interview Questions for both freshers and experienced developers</a></li>
<li><a href="http://www.javatpoint.com/html-interview-questions">Common HTML interview questions for freshers</a></li>
<li><a href="https://frontendinterviewhandbook.com/html-questions/">Front End Interview Handbook - HTML Questions and Answers</a></li>
<li><a href="https://www.techbeamers.com/latest-html-interview-questions/">30 HTML Interview Questions and Answers</a></li>
<li><a href="https://www.interviewbit.com/html-interview-questions/">30+ HTML Interview Questions (2021)</a></li>
</ul>
<h3 id="ionic">Ionic</h3>
<ul>
<li><a href="http://www.codeandyou.com/p/ionic-interview-questions.html">23 Beginner Level Ionic Framework Questions</a></li>
<li><a href="https://www.toptal.com/ionic/interview-questions">12 Essential Ionic Interview Questions</a></li>
<li><a href="https://www.javatpoint.com/ionic-interview-questions">45 Ionic Interview Questions</a></li>
<li><a href="https://www.maheshbhusanoor.com/article/ionic-interview-questions-answers.html">Most Asked Ionic Interview Questions</a></li>
</ul>
<h3 id="ios">iOS</h3>
<ul>
<li><a href="http://www.toptal.com/ios/interview-questions">14 Essential iOS Interview Questions from Toptal</a></li>
<li><a href="https://www.codementor.io/ios/tutorial/ios-interview-tips-questions-answers-objective-c">20 iOS Developer Interview Questions and Answers for getting you ready for your interview</a></li>
<li><a href="https://adevait.com/ios/interview-questions">25 Essential iOS Interview Questions from Adeva</a></li>
<li><a href="https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions">A small guide to help those looking to hire a developer or designer for iOS work While tailored for iOS, many questions could be used for Android developers or designers as well A great self-test if you&rsquo;re looking to keep current or practice for your own interview</a></li>
<li><a href="http://www.raywenderlich.com/53962/ios-interview-questions">All you need to know about iOS technical interview including some tips for preparing, questions and some coding exercises</a></li>
<li><a href="https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html">Interview Questions for iOS and Mac Developers from the CEO of Black Pixel</a></li>
<li><a href="http://www.geekinterview.com/Interview-Questions/iOS">iOS Interview Questions and Answers including such topics as Development Basics, App states and multitasking, App states, Core app objects</a></li>
<li><a href="https://m.smartcloud.io/ios-interview-questions-for-senior-developers-in-2017-a94cc81c8205">iOS Interview Questions For Senior Developers</a></li>
<li><a href="https://medium.com/ios-os-x-development/ios-interview-questions-13840247a57a">50 iOS Interview Questions And Answers 1</a></li>
<li><a href="https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-2-45f952230b9f">50 iOS Interview Questions And Answers Part 2</a></li>
<li><a href="https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-3-3fad146b6c3d">50 iOS Interview Questions And Answers Part 3</a></li>
<li><a href="https://medium.com/@duruldalkanat/50-ios-interview-questions-and-answers-part-4-6f26b26341a">50 iOS Interview Questions And Answers Part 4</a></li>
<li><a href="https://medium.com/@duruldalkanat/50-ios-interview-questions-and-answers-part-5-de6241374a8f">50 iOS Interview Questions And Answers Part 5</a></li>
<li><a href="https://www.upwork.com/i/interview-questions/ios/">10 iOS interview questions and answers</a></li>
<li><a href="https://github.com/9magnets/iOS-Developer-and-Designer-Interview-Questions#tech">iOS Developer and Designer Interview Questions</a></li>
<li><a href="http://www.thecrazyprogrammer.com/2015/11/ios-interview-questions-and-answers.html">IOS Interview Questions and Answers</a></li>
<li><a href="http://ichuiphonedev.blogspot.com/2014/05/iphone-latest-interview-questions-and.html">iOS Interview Questions For Beginners</a></li>
<li><a href="https://github.com/Babylonpartners/ios-playbook/blob/master/Interview/questions.md">Babylon iOS Interview Questions</a></li>
<li><a href="https://github.com/mindash/iOS-structured-interview">RocketSkill App iOS Interview Questions</a></li>
<li><a href="https://medium.com/flawless-app-stories/static-vs-dynamic-dispatch-in-swift-a-decisive-choice-cece1e872d">iOS Static vs Dynamic Dispatch</a></li>
</ul>
<h3 id="java">Java</h3>
<ul>
<li><a href="https://onurdesk.com/category/interview/interview-program-java/">List of Java programs for interview Categoriwise</a></li>
<li><a href="http://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html">115 Java Interview Questions and Answers – The ULTIMATE List</a></li>
<li><a href="https://www.codementor.io/java/tutorial/java-interview-sample-questions-answers">37 Java Interview Questions to Practice With from Codementor</a></li>
<li><a href="http://www.toptal.com/java/interview-questions">21 Essential Java Interview Questions</a></li>
<li><a href="https://www.janbasktraining.com/blog/core-java-interview-questions-answers/">Top 30 Core Java Interview Questions</a></li>
<li><a href="https://adevait.com/java/interview-questions">29 Essential Java Interview Questions from Adeva</a></li>
<li><a href="https://github.com/svozniuk/java-interviews">A collection of Java interview questions and answers to them</a></li>
<li><a href="https://github.com/donbeave/interview">Data Structures and Algorithms in Java which can be useful in interview process</a></li>
<li><a href="https://blog.udemy.com/java-interview-questions/">Java Interview Questions: How to crack the TOP 15 questions</a></li>
<li><a href="http://www.javatpoint.com/corejava-interview-questions">300 Core Java Interview Questions</a></li>
<li><a href="http://java67.blogspot.com.by/2012/09/top-10-tricky-java-interview-questions-answers.html">Top 10 Tricky Java interview questions and Answers</a></li>
<li><a href="http://javahungry.blogspot.com/2013/06/top-25-most-frequently-asked-core-java.html">Top 25 Most Frequently Asked Interview Core Java Interview Questions And Answers</a></li>
<li><a href="http://java67.blogspot.sg/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html">Top 40 Core Java Interview Questions Answers from Telephonic Round</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/spring-interview-questions/">Top 50 Spring Interview Questions You Must Prepare For In 2020</a></li>
<li><a href="https://www.journaldev.com/2696/spring-interview-questions-and-answers">Spring Interview Questions And Answers</a></li>
<li><a href="https://www.interviewcake.com/java-interview-questions">Interview Cake Java Interview Questions</a></li>
<li><a href="https://www.techbeamers.com/java-interview-questions/">Java Interview Questions &amp; Quizzes</a></li>
<li><a href="https://fdk.codes/some-java-interview-questions/">Essetial Java Interview Questions</a></li>
<li><a href="https://www.interviewbit.com/java-interview-questions/">Fundamental Java Interview Questions</a></li>
</ul>
<h3 id="javascript">JavaScript</h3>
<ul>
<li><a href="https://github.com/ignacio-chiazzo/Algorithms-Leetcode-Javascript">Practice common algorithms using JavaScript</a></li>
<li><a href="https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95">10 Interview Questions Every JavaScript Developer Should Know</a></li>
<li><a href="https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers">21 Essential JavaScript Interview Questions from best mentors all over the world</a></li>
<li><a href="https://adevait.com/javascript-developers/interview-questions">20 Essential JavaScript Interview Questions from Adeva</a></li>
<li><a href="http://www.toptal.com/javascript/interview-questions">37 Essential JavaScript Interview Questions from Toptal</a></li>
<li><a href="http://www.sitepoint.com/5-javascript-interview-exercises/">5 More JavaScript Interview Exercises</a></li>
<li><a href="http://www.sitepoint.com/5-typical-javascript-interview-exercises/">5 Typical JavaScript Interview Exercises</a></li>
<li><a href="http://www.techrepublic.com/blog/software-engineer/javascript-interview-questions-and-answers/">Development hiring managers and potential interviewees may find these sample JavaScript proficiency interview Q&amp;As and code snippets useful</a></li>
<li><a href="https://github.com/nishant8BITS/123-Essential-JavaScript-Interview-Question">123 Essential JavaScript Interview Question</a></li>
<li><a href="http://www.tutorialspoint.com/javascript/javascript_interview_questions.htm">JavaScript Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of JavaScript</a></li>
<li><a href="http://www.thatjsdude.com/interview/js2.html">JS: Basics and Tricky Questions</a></li>
<li><a href="http://thatjsdude.com/interview/js1.html">JS: Interview Algorithm</a></li>
<li><a href="https://github.com/kolodny/exercises">Some basic javascript coding challenges and interview questions</a></li>
<li><a href="https://github.com/csvenja/javascript-exercises">Some JavaScript interview exercises</a></li>
<li><a href="https://www.reddit.com/r/javascript/comments/3rb88w/ten_questions_ive_been_asked_most_more_than_once">Ten Questions I&rsquo;ve Been Asked, Most More Than Once, Over Six Technical JavaScript / Front-End Engineer Job Interviews.</a></li>
<li><a href="http://career.guru99.com/top-85-javascript-interview-questions/">Top 85 JavaScript Interview Questions</a></li>
<li><a href="https://www.interviewcake.com/javascript-interview-questions">Interview Cake JavaScript Interview Questions</a></li>
<li><a href="https://performancejs.com/post/hde6d32/The-Best-Frontend-JavaScript-Interview-Questions-(written-by-a-Frontend-Engineer)">The Best Frontend JavaScript Interview Questions (written by a Frontend Engineer)</a></li>
<li><a href="https://dev.to/arnavaggarwal/10-javascript-concepts-you-need-to-know-for-interviews">10 JavaScript Concepts You Need to Know for Interviews</a></li>
<li><a href="https://frontendinterviewhandbook.com/javascript-questions/">Front End Interview Handbook - JavaScript Questions and Answers</a></li>
<li><a href="https://www.techbeamers.com/javascript-interview-questions-answers/">JavaScript Interview Questions - Quick Refresher</a></li>
<li><a href="https://github.com/danieldelcore/mega-interview-guide">The MEGA Interview Guide</a></li>
<li><a href="https://www.interviewbit.com/javascript-interview-questions/">Javascript Interview Questions and Answers (2020)</a></li>
<li><a href="https://github.com/sadanandpai/javascript-code-challenges">JavaScript Modern Interview Code Challenges 2021</a></li>
<li><a href="https://dev.to/macmacky/70-javascript-interview-questions-5gfi">70 JavaScript Interview Questions</a></li>
</ul>
<h3 id="jquery">jQuery</h3>
<ul>
<li><a href="https://career.guru99.com/top-50-jquery-interview-questions/">Top 50 jquery interview questions</a></li>
<li><a href="https://www.toptal.com/jquery/interview-questions">17 Essential jQuery Interview Questions From Toptal</a></li>
<li><a href="https://www.techgeekbuzz.com/top-jquery-interview-questions/">Top JQuery Interview Questions and Answers</a></li>
</ul>
<h3 id="front-end-build-tools">Front-end build tools</h3>
<ul>
<li><a href="https://github.com/styopdev/webpack-interview-questions">Webpack interview questions &amp; answers</a></li>
<li><a href="https://www.codeproject.com/Articles/1065184/Latest-Gulp-js-interview-questions">Gulp js interview questions</a></li>
<li><a href="http://www.talkingdotnet.com/grunt-js-interview-questions/">Grunt js interview questions for beginners</a></li>
<li><a href="https://mindmajix.com/grunt-interview-questions">Grunt js interview questions</a></li>
</ul>
<h3 id="knockoutjs">KnockoutJS</h3>
<ul>
<li><a href="http://www.code-sample.com/2014/01/knockout-js-interview-questions-and.html">15 interview questions from CodeSample.com</a></li>
<li><a href="http://www.codeproject.com/Articles/987899/KnockoutJS-interview-questions">20 questions you might be asked about KnockoutJS in an interview for both freshers and experienced developers</a></li>
</ul>
<h3 id="less">Less</h3>
<ul>
<li><a href="http://career.guru99.com/top-25-less-interview-questions/">Top 25 LESS Interview Questions</a></li>
</ul>
<h3 id="lisp">Lisp</h3>
<ul>
<li><a href="http://www.sanfoundry.com/lisp-mcqs-class/">10 LISP Questions &amp; Answers</a></li>
<li><a href="http://career.guru99.com/top-18-lisp-interview-questions/">Top 18 Lisp Interview Questions from Career Guru</a></li>
</ul>
<h3 id="nodejs">NodeJS</h3>
<ul>
<li><a href="https://adevait.com/nodejs/interview-questions">25 Essential Node.js Interview Questions from Adeva</a></li>
<li><a href="http://www.toptal.com/nodejs/interview-questions">8 Essential Nodejs Interview Questions from Toptal</a></li>
<li><a href="http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm">Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Node.JS</a></li>
<li><a href="https://blog.risingstack.com/node-js-interview-questions/">Node.js Interview Questions and Answers</a></li>
<li><a href="http://career.guru99.com/top-25-interview-questions-on-node-js/">Top 25 Nodejs Interview Questions &amp; Answers from Career Guru</a></li>
<li><a href="https://www.techbeamers.com/top-30-node-js-interview-questions-answers/">Top 30 Node.Js Interview Questions With Answers</a></li>
<li><a href="https://www.interviewbit.com/node-js-interview-questions/">Top Nodejs Interview Questions &amp; Answers</a></li>
<li><a href="https://github.com/haizlin/fe-interview/blob/master/category/nodejs.md">Node.js Interview Questions in Chinese</a></li>
<li><a href="https://github.com/learning-zone/nodejs-interview-questions">Node.js Interview Questions by learning-zone</a></li>
</ul>
<h3 id="objective-c">Objective-C</h3>
<ul>
<li><a href="http://insights.dice.com/2015/07/21/interview-qs-objective-c-swift/">Interview Qs for Objective-C and Swift</a></li>
<li><a href="http://ichuiphonedev.blogspot.com/2014/05/iphone-latest-interview-questions-and.html">iOS Interview Questions For Beginners</a></li>
</ul>
<h3 id="php">PHP</h3>
<ul>
<li><a href="http://www.careerride.com/PHP-Interview-Questions.aspx">100 PHP interview questions and answers from CareerRide.com</a></li>
<li><a href="http://www.toptal.com/php/interview-questions">21 Essential PHP Interview Questions from Toptal</a></li>
<li><a href="http://www.woodstitch.com/resources/php-interview-questions.php">20 Common PHP Job Interview Questions and Answers</a></li>
<li><a href="https://adevait.com/php/interview-questions">25 Essential PHP Interview Questions from Adeva</a></li>
<li><a href="http://phpinterviewquestions.co.in/">PHP interview questions and answers for freshers</a></li>
<li><a href="http://career.guru99.com/top-100-php-interview-questions-answers/">Top 100 PHP Interview Questions &amp; Answers from CareerGuru</a></li>
<li><a href="https://www.codementor.io/php/tutorial/php-interview-questions-sample-answers">25 PHP Interview Questions</a></li>
<li><a href="https://pangara.com/blog/php-interview-questions">26 Essential PHP Interview Questions for 2018</a></li>
<li><a href="https://bootsity.com/books">Cracking PHP Interviews Questions ebook 300+ Q&amp;A</a></li>
<li><a href="https://www.techbeamers.com/latest-php-interview-questions-answers/">PHP Interview Questions - Quick Refresher</a></li>
<li><a href="https://www.interviewbit.com/php-interview-questions/">30+ PHP Interview Questions</a></li>
</ul>
<h3 id="python">Python</h3>
<ul>
<li><a href="https://adevait.com/python/interview-questions">26 Essential Python Interview Questions from Adeva</a></li>
<li><a href="http://www.careerride.com/python-interview-questions.aspx">20 Python interview questions and answers</a></li>
<li><a href="http://www.toptal.com/python/interview-questions">11 Essential Python Interview Questions from Toptal</a></li>
<li><a href="https://github.com/sigmavirus24/python-interview-questions">A listing of questions that could potentially be asked for a python job listing</a></li>
<li><a href="http://www.bogotobogo.com/python/python_interview_questions.php">Interview Questions for both beginners and experts</a></li>
<li><a href="https://www.interviewcake.com/python-interview-questions">Interview Cake Python Interview Questions</a></li>
<li><a href="https://docs.python.org/2/faq/programming.html">Python Frequently Asked Questions (Programming)</a></li>
<li><a href="https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions">Python interview questions collected by Reddit users</a></li>
<li><a href="http://career.guru99.com/top-25-python-interview-questions/">Top 25 Python Interview Questions from Career Guru</a></li>
<li><a href="https://www.youtube.com/watch?v=DEwgZNC-KyE">Python Interview 10 questions from Corey Schafer</a></li>
<li><a href="https://luminousmen.com/post/6">Python interview questions. Part I. Junior</a></li>
<li><a href="https://luminousmen.com/post/7">Python interview questions. Part II. Middle</a></li>
<li><a href="https://luminousmen.com/post/8">Python interview questions. Part III. Senior</a></li>
<li><a href="https://www.interviewbit.com/python-interview-questions/">Python Interview Questions and Answers (2019)</a></li>
<li><a href="https://www.techbeamers.com/python-interview-questions-programmers/">100 Python Interview Questions - Quick Refresher</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/python-interview-questions/">Top 100 Python Interview Questions from Edureka (2021)</a></li>
</ul>
<h3 id="ruby-on-rails">Ruby on Rails</h3>
<ul>
<li><a href="http://www.careerride.com/ruby-on-rails-interview-questions.aspx">20 Ruby on Rails interview questions and answers from CareerRide.com</a></li>
<li><a href="http://www.toptal.com/ruby-on-rails/interview-questions">9 Essential Ruby on Rails Interview Questions from Toptal</a></li>
<li><a href="https://github.com/rishiip/ruby-on-rails-interview-questions">High-level Ruby on Rails Interview Questions</a></li>
<li><a href="http://anilpunjabi.tumblr.com/post/25948339235/ruby-and-rails-interview-questions-and-answers">Ruby And Ruby On Rails interview Q&amp;A</a></li>
<li><a href="https://srikantmahapatra.wordpress.com/2013/11/07/ruby-on-rails-interview-questions-and-answers/">Some of the most frequently asked Ruby on Rails questions and how to answer them confidently</a></li>
<li><a href="https://www.codementor.io/ruby-on-rails/tutorial/ruby-on-rails-interview-questions">11 Ruby on Rails Interview Practice Questions</a></li>
<li><a href="https://career.guru99.com/top-34-ruby-on-rail-interview-questions/">Top 53 Ruby on Rails Interview Questions &amp; Answers</a></li>
<li><a href="https://www.upwork.com/i/interview-questions/ruby-on-rails/">10 Ruby on Rails interview questions and answers</a></li>
</ul>
<h3 id="reactjs">ReactJS</h3>
<ul>
<li><a href="https://www.reddit.com/r/reactjs/comments/3m5equ/react_what_interview_questions_to_expect/">Reddit users share their expectations from ReactJS interview</a></li>
<li><a href="https://www.codementor.io/reactjs/tutorial/5-essential-reactjs-interview-questions">5 Essential React.js Interview Questions</a></li>
<li><a href="https://tylermcginnis.com/react-interview-questions/">React Interview Questions</a></li>
<li><a href="https://www.toptal.com/react/interview-questions">Toptal&rsquo;s 21 Essential React.js Interview Questions</a></li>
<li><a href="https://www.educba.com/reactjs-interview-questions/">19 Essential ReactJs Interview Questions</a></li>
<li><a href="https://github.com/sudheerj/reactjs-interview-questions">React Interview Questions &amp; Answers</a></li>
</ul>
<h3 id="ruby">Ruby</h3>
<ul>
<li><a href="http://www.toptal.com/ruby/interview-questions">21 Essential Ruby Interview Questions from Toptal</a></li>
<li><a href="https://gist.github.com/ryansobol/5252653">15 Questions to Ask During a Ruby Interview</a></li>
<li><a href="https://github.com/undr/ruby-trivia">A list of questions about Ruby programming you can use to quiz yourself</a></li>
<li><a href="http://technology.customink.com/blog/2015/11/23/the-art-of-ruby-technical-interviews/">The Art of Ruby Technical Interview</a></li>
<li><a href="https://www.interviewcake.com/ruby-interview-questions">Interview Cake Ruby Interview Questions</a></li>
<li><a href="https://www.javatpoint.com/ruby-interview-questions">Frequently Asked Ruby Interview Questions</a></li>
</ul>
<h3 id="rust">Rust</h3>
<ul>
<li><a href="https://www.wisdomjobs.com/e-university/rust-programming-language-interview-questions.html">Top 250+ Rust Programming Language Interview Questions</a></li>
<li><a href="https://www.code-sample.com/2018/02/rust-programming-interview-questions.html">Rust Programming Interview Questions and Answers</a></li>
<li><a href="https://github.com/jean553/rust-exam">rust-exam: A set of questions about the Rust programming language</a></li>
<li><a href="https://www.bestinterviewquestion.com/rust-programming-language-interview-questions">Best Rust Programming Language Interview Questions and answers</a></li>
</ul>
<h3 id="sass">Sass</h3>
<ul>
<li><a href="http://career.guru99.com/top-17-sass-interview-questions/">Top 17 Sass Interview Questions from Career Guru</a></li>
<li><a href="https://www.educba.com/sass-interview-questions/">Top 10 Sass Interview Questions from educba</a></li>
</ul>
<h3 id="scala">Scala</h3>
<ul>
<li><a href="http://insights.dice.com/2014/09/12/4-interview-questions-scala-developers/">4 Interview Questions for Scala Developers</a></li>
<li><a href="http://www.scala-lang.org/old/faq">A list of Frequently Asked Questions and their answers, sorted by category</a></li>
<li><a href="https://github.com/Jarlakxen/Scala-Interview-Questions">A list of helpful Scala related questions you can use to interview potential candidates</a></li>
<li><a href="http://programmers.stackexchange.com/questions/58145/how-scala-developers-are-being-interviewed">How Scala Developers Are Being Interviewed</a></li>
<li><a href="http://career.guru99.com/top-25-interview-questions-on-scala/">Top 25 Scala Interview Questions &amp; Answers from Toptal</a></li>
</ul>
<h3 id="sharepoint">SharePoint</h3>
<ul>
<li><a href="http://www.rajeshg.me/2013/05/sharepoint-developer-2010-interview.html">Sharepoint Interview Question For Developer</a></li>
<li><a href="https://intellipaat.com/blog/interview-question/sharepoint-interview-questions/">Top SharePoint Interview Questions and Answers</a></li>
</ul>
<h3 id="shell">Shell</h3>
<ul>
<li><a href="http://career.guru99.com/shell-scripting-interview-questions/">Top 50 Shell Scripting Interview Questions from Career Guru</a></li>
</ul>
<h3 id="spark">Spark</h3>
<ul>
<li><a href="https://github.com/ankurchavda/SparkLearning#spark-learning-guide">Carefully Curated 70 Spark Questions with Additional Optimization Guides (First in the series)</a></li>
</ul>
<h3 id="swift">Swift</h3>
<ul>
<li><a href="http://www.toptal.com/swift/interview-questions">10 Essential Swift Interview Questions from Toptal</a></li>
<li><a href="https://github.com/diwu/LeetCode-Solutions-in-Swift">Get prepared for your next iOS job interview by studying high quality LeetCode solutions in Swift 5</a></li>
<li><a href="https://www.raywenderlich.com/762435-swift-interview-questions-and-answers">Swift Interview Questions and Answers</a></li>
<li><a href="http://mycodetips.com/swift-ios/swift-programming-language-interview-questions-answers-987.html">Swift Programming Language Interview Questions And Answers from mycodetips.com</a></li>
<li><a href="http://blog.udacity.com/2014/11/your-top-10-swift-questions-answered.html">Your top 10 Swift questions answered</a></li>
<li><a href="https://www.raywenderlich.com/762435-swift-interview-questions-and-answers">Swift interview questions and answers on Swift 5 by Raywenderlich</a></li>
<li><a href="https://cocoacasts.com/what-does-the-dynamic-keyword-mean-in-swift-3">Dynamic keyword in Swift</a></li>
</ul>
<h3 id="vuejs">Vue.js</h3>
<ul>
<li><a href="https://github.com/sudheerj/vuejs-interview-questions">List of 300 VueJS Interview Questions</a></li>
</ul>
<h3 id="wordpress">WordPress</h3>
<ul>
<li><a href="https://pangara.com/blog/blog45-wordpress-interview-questions-and-answers/">Top 45 WordPress interview questions</a></li>
<li><a href="https://www.toptal.com/wordpress/interview-questions">10 Essential WordPress Interview Questions</a></li>
</ul>
<h3 id="typescript">TypeScript</h3>
<ul>
<li><a href="https://www.onlineinterviewquestions.com/typescript-interview-questions">Typescript Interview Questions</a></li>
<li><a href="https://www.positronx.io/typescript-interview-questions-answers-2109/">Top 10 TypeScript Interview Questions and Answers for Beginner Web Developers 2019</a></li>
</ul>
<h2 id="database-technologies">Database technologies</h2>
<h3 id="cassandra">Cassandra</h3>
<ul>
<li><a href="http://career.guru99.com/top-23-cassandra-interview-questions/">Top 23 Cassandra Interview Questions from Career Guru</a></li>
</ul>
<h3 id="microsoft-access">Microsoft Access</h3>
<ul>
<li><a href="http://career.guru99.com/top-16-ms-access-database-interview-questions/">Top 16 Microsoft Access Database Interview Questions from Career Guru</a></li>
</ul>
<h3 id="mongodb">MongoDB</h3>
<ul>
<li>
<p><a href="http://theprofessionalspoint.blogspot.com.by/2014/01/28-mongodb-nosql-database-interview.html">28 MongoDB NoSQL Database Interview Questions and Answers</a></p>
</li>
<li>
<p><a href="http://www.globalguideline.com/interview_questions/Questions.php?sc=MongoDB">MongoDB frequently Asked Questions by expert members with experience in MongoDB These questions and answers will help you strengthen your technical skills, prepare for the new job test and quickly revise the concepts</a></p>
</li>
<li>
<p><a href="http://www.javatpoint.com/mongodb-interview-questions">MongoDB Interview Questions from JavaTPointcom</a></p>
</li>
<li>
<p><a href="http://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm">MongoDB Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of MongoDB</a></p>
</li>
<li>
<p><a href="http://career.guru99.com/top-20-mongodb-interview-questions/">Top 20 MongoDB interview questions from Career Guru</a></p>
</li>
</ul>
<h3 id="mysql">MySQL</h3>
<ul>
<li><a href="http://www.tecmint.com/10-mysql-database-interview-questions-for-beginners-and-intermediates/">10 MySQL Database Interview Questions for Beginners and Intermediates</a></li>
<li><a href="http://www.careerride.com/MySQL-Interview-Questions.aspx">100 MySQL interview questions</a></li>
<li><a href="http://www.tecmint.com/basic-mysql-interview-questions-for-database-administrators/">15 Basic MySQL Interview Questions for Database Administrators</a></li>
<li><a href="http://www.javatpoint.com/mysql-interview-questions">28 MySQL interview questions from JavaTPoint.com</a></li>
<li><a href="http://www.testingbrain.com/interview/mysql-interview-questions.html">40 Basic MySQL Interview Questions with Answers</a></li>
<li><a href="http://career.guru99.com/top-50-mysql-interview-questions-answers/">Top 50 MySQL Interview Questions &amp; Answers from Career Guru</a></li>
</ul>
<h3 id="neo4j">Neo4j</h3>
<ul>
<li><a href="http://career.guru99.com/top-20-ne04j-interview-questions/">Top 20 Neo4j Interview Questions from Career Guru</a></li>
</ul>
<h3 id="oracle">Oracle</h3>
<ul>
<li><a href="http://www.coolinterview.com/type.asp?iType=57">General Oracle Interview Questions &amp; Answers</a></li>
</ul>
<h3 id="postgres">Postgres</h3>
<ul>
<li><a href="http://www.dotnetfunda.com/interviews/cat/208/postgresql">13 PostgreSQL Interview Q&amp;A</a></li>
<li><a href="http://nazafbtemplate.blogspot.com.by/2014/06/frequently-asked-basic-postgresql.html">Frequently Asked Basic PostgreSQL Interview Questions and Answers</a></li>
<li><a href="http://www.globalguideline.com/interview_questions/Questions.php?sc=postgresqk_database_">PostgreSQL Interview Preparation Guide</a></li>
<li><a href="http://www.coolinterview.com/type.asp?iType=411">PostgreSQL Interview Q&amp;A from CoolInterview.com</a></li>
</ul>
<h3 id="sql">SQL</h3>
<ul>
<li><a href="http://java67.blogspot.com.by/2013/04/10-frequently-asked-sql-query-interview-questions-answers-database.html">10 Frequently asked SQL Query Interview Questions</a></li>
<li><a href="http://www.toptal.com/sql/interview-questions">45 Essential SQL Interview Questions from Toptal</a></li>
<li><a href="http://www.indiabix.com/technical/sql-server-common-questions/">Common Interview Questions and Answers</a></li>
<li><a href="http://www.indiabix.com/technical/sql-server-general-questions/">General Interview Questions and Answers</a></li>
<li><a href="https://github.com/XD-DENG/SQL-exercise">Schema, Questions &amp; Solutions for SQL Exercising</a></li>
<li><a href="http://www.tutorialspoint.com/sql/sql_interview_questions.htm">SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL</a></li>
<li><a href="https://www.interviewbit.com/sql-interview-questions/">SQL Interview Questions CHEAT SHEET</a></li>
</ul>
<h3 id="sqlite">SQLite</h3>
<ul>
<li><a href="http://career.guru99.com/top-20-sql-lite-interview-questions/">Top 20 SQLITE  Interview Questions from Career Guru</a></li>
</ul>
<h2 id="caching-technologies">Caching technologies</h2>
<h3 id="memcached">Memcached</h3>
<ul>
<li><a href="https://www.javatpoint.com/memcached-interview-questions-and-answers">Memcached Interview Questions from Javapoint</a></li>
<li><a href="https://www.wisdomjobs.com/e-university/memcached-interview-questions.html">Memcached Interview Questions from Wisdomjobs</a></li>
</ul>
<h3 id="redis">Redis</h3>
<ul>
<li><a href="https://www.javatpoint.com/redis-interview-questions-and-answers">Redis Interview Questions from Javapoint</a></li>
<li><a href="https://www.wisdomjobs.com/e-university/redis-interview-questions-answers.html">Redis Interview Questions from Wisdomjobs</a></li>
<li><a href="https://career.guru99.com/top-10-redis-interview-questions/">Redis Interview Questions from Career Guru</a></li>
</ul>
<h2 id="os">OS</h2>
<h3 id="linux">Linux</h3>
<ul>
<li><a href="https://www.linuxfoundation.org/blog/2015/07/10-job-interview-questions-for-linux-system-administrators/">10 Job Interview Questions for Linux System Administrators from Linux.com</a></li>
<li><a href="http://www.tecmint.com/useful-random-linux-interview-questions-and-answers/">10 Useful Random Linux Interview Questions and Answers</a></li>
<li><a href="http://www.tecmint.com/basic-linux-interview-questions-and-answers/">11 Basic Linux Interview Questions and Answers</a></li>
<li><a href="http://www.toptal.com/linux/interview-questions">11 Essential Linux Interview Questions from Toptal</a></li>
<li><a href="http://www.linuxtechi.com/experience-linux-admin-interview-questions/">Top 30 Linux System Admin Interview Questions &amp; Answers</a></li>
<li><a href="http://career.guru99.com/top-50-linux-interview-questions/">Top 50 Linux Interview Questions from Career Guru</a></li>
<li><a href="https://github.com/trimstray/test-your-sysadmin-skills">278 Test Questions and Answers for *nix System Administrators</a></li>
<li><a href="https://www.techbeamers.com/essential-linux-questions-answers/">Linux Interview Questions - Quick Refresher</a></li>
</ul>
<h3 id="windows">Windows</h3>
<ul>
<li><a href="http://www.brentozar.com/archive/2009/07/top-10-interview-questions-for-windows-sysadmins/">Top 10 Interview Questions for Windows Administrators</a></li>
<li><a href="http://career.guru99.com/top-22-windows-server-interview-questions/">Top 22 Windows Server Interview Questions from Career Guru</a></li>
<li><a href="http://www.01world.in/p/windows.html">Windows Admin Interview Questions &amp; Answers</a></li>
</ul>
<h2 id="devops">DevOps</h2>
<ul>
<li><a href="https://github.com/chassing/linux-sysadmin-interview-questions">Linux System Administrator/DevOps Interview Questions</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/top-devops-interview-questions-2016/">Top DevOps Interview Questions You Must Prepare In 2021</a></li>
<li><a href="https://intellipaat.com/interview-question/devops-interview-questions/">Top 60+ DevOps Interview Questions &amp; Answers in 2021</a></li>
<li><a href="https://www.interviewbit.com/devops-interview-questions/">DevOps Interview Questions &amp; Answers</a></li>
</ul>
<h2 id="algorithms">Algorithms</h2>
<ul>
<li><a href="https://github.com/rishabh115/Interview-Questions">Comprehensive list of interview questions of top tech companies</a></li>
<li><a href="http://java2novice.com/java-interview-programs/">A great list of Java interview questions</a></li>
<li><a href="https://github.com/sagivo/algorithms">Algorithms playground for common interview questions written in Ruby</a></li>
<li><a href="https://github.com/EvgenyKarkan/EKAlgorithms">EKAlgorithms contains some well known CS algorithms &amp; data structures</a></li>
<li><a href="http://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/">Top 10 Algorithms for Coding Interview</a></li>
<li><a href="http://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html">Top 15 Data Structures and Algorithm Interview Questions for Java programmer</a></li>
<li><a href="https://techinterviewhandbook.org/best-practice-questions/">Tech Interview Handbook Best Practice Questions</a></li>
<li><a href="https://www.techseries.dev/daily">Daily Coding Interview Practice</a></li>
</ul>
<h2 id="blockchain">Blockchain</h2>
<ul>
<li><a href="https://www.edureka.co/blog/interview-questions/blockchain-interview-questions/">Top 55 Blockchain Interview Questions You Must Prepare In 2018</a></li>
<li><a href="https://mindmajix.com/blockchain-interview-questions">Blockchain Interview Questions</a></li>
<li><a href="https://intellipaat.com/interview-question/blockchain-interview-questions/">Top Blockchain Interview Questions</a></li>
<li><a href="https://applicature.com/blog/blockchain-interview-questions">Blockchain Developer Interview Questions and Answers</a></li>
<li><a href="https://www.toptal.com/blockchain/interview-questions">10 Essential Blockchain Interview Questions </a></li>
<li><a href="https://data-flair.training/blogs/blockchain-interview-questions/">Top 30 Blockchain Interview Questions – For Freshers to Experienced</a></li>
<li><a href="https://www.digitalvidya.com/blog/blockchain-interview-questions/">Most Frequently Asked Blockchain Interview Questions</a></li>
</ul>
<h2 id="coding-exercises">Coding exercises</h2>
<ul>
<li><a href="https://github.com/mre/the-coding-interview">Common interview questions and puzzles solved in several languages</a></li>
<li><a href="https://github.com/donnemartin/interactive-coding-challenges">Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions</a></li>
<li><a href="https://github.com/roseperrone/interview-questions">Interview questions solved in python</a></li>
<li><a href="https://www.makeuseof.com/tag/swift-coding-challenges/">7 Swift Coding Challenges to Practice Your Skills</a></li>
</ul>
<h2 id="comprehensive-lists">Comprehensive lists</h2>
<ul>
<li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions">A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore</a></li>
<li><a href="http://www.aperfectmix.com/free_web_design/front-end-interview-questions.html">Front End Developer Interview Questions</a></li>
<li><a href="https://frontendinterviewhandbook.com/">Front End Interview Handbook</a></li>
<li><a href="https://github.com/starandtina/backend-interview-questions">Some simple questions to interview potential backend candidates</a></li>
</ul>
<h2 id="design-patterns">Design Patterns</h2>
<ul>
<li><a href="http://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm">Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern</a></li>
<li><a href="https://github.com/kamranahmedse/design-patterns-for-humans">Design Patterns for Humans™ - An ultra-simplified explanation</a></li>
<li><a href="https://github.com/iluwatar/java-design-patterns">Design Patterns implemented in Java</a></li>
<li><a href="https://www.dofactory.com/net/design-patterns">Design Patterns implemented in DotNet</a></li>
</ul>
<h2 id="data-structures">Data structures</h2>
<ul>
<li><a href="http://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html">Top 15 Data Structures and Algorithm Interview Questions for Java programmer</a></li>
<li><a href="http://career.guru99.com/top-50-data-structure-interview-questions/">Top 50 Data Structure Interview Questions from Career Guru</a></li>
<li><a href="https://www.interviewbit.com/data-structure-interview-questions/">What is Data Structure? | Top 40 Data Structure Interview Questions</a></li>
</ul>
<h2 id="networks">Networks</h2>
<ul>
<li><a href="http://career.guru99.com/top-100-networking-interview-questions-answers/">Top 100 Networking Interview Questions &amp; Answers from Career Guru</a></li>
<li><a href="https://www.interviewbit.com/networking-interview-questions/">Networking Interview Questions</a></li>
</ul>
<h2 id="security">Security</h2>
<ul>
<li><a href="http://careers.simplicable.com/careers/new/101-IT-security-interview-questions">101 IT Security Interview Questions</a></li>
<li><a href="http://searchsecurity.techtarget.com/tip/How-to-prepare-for-an-information-security-job-interview">How to prepare for an information security job interview?</a></li>
<li><a href="https://danielmiessler.com/study/infosec_interview_questions/">Information Security Interview Questions from Daniel Miessler</a></li>
<li><a href="http://resources.infosecinstitute.com/top-50-information-security-interview-questions/">Top 50 Information Security Interview Questions for freshers and experts</a></li>
</ul>
<h2 id="data-science">Data Science</h2>
<ul>
<li><a href="https://www.dezyre.com/article/-data-science-interview-questions-for-top-tech-companies/189">Data Science Interview Questions for Top Tech Companies</a></li>
<li><a href="http://www.datasciencecentral.com/profiles/blogs/66-job-interview-questions-for-data-scientists">66 Job Interview Questions for Data Scientists</a></li>
<li><a href="https://www.edureka.co/blog/interview-questions/data-science-interview-questions/">Top 45 Data Science Interview Questions You Must Prepare In 2021</a></li>
<li><a href="https://towardsdatascience.com/top-30-data-science-interview-questions-7dd9a96d3f5c">Top 30 data science interview questions</a></li>
<li><a href="https://www.datacamp.com/community/news/top-100-data-science-interview-questions-cc3lts7gj5j">Top 100 Data science interview questions</a></li>
<li><a href="https://hackr.io/blog/data-science-interview-questions">Data Science Interview Questions</a></li>
<li><a href="https://hackernoon.com/160-data-science-interview-questions-415s3y2a">160+ Data Science Interview Questions</a></li>
<li><a href="https://www.interviewbit.com/data-science-interview-questions/">Top Data Science Interview Questions</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Online PDF Compression Tool</title>
      <link>https://samirpaul1.github.io/blog/posts/online-pdf-compression-tool/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/online-pdf-compression-tool/</guid>
      <description>Online PDF Compression Tool</description>
      <content:encoded><![CDATA[<h3 id="about-the-project">About The Project:</h3>
<p>An online PDF file compression tool to reduce the size of a .pdf file. Python Flask is used to upload the file to a temporary location on the server.
In the backend, using the <code>PDFNetPython</code> library that file gets reduced and saved to its final location. After download, the files are automatically deleted from the server after 1 hour. Technologies used in this project: <code>Python3</code>, <code>Flask</code>, <code>C</code>, <code>Shell</code>, <code>Nix</code>, <code>Replit</code>, <code>Git</code>, <code>HTML</code>, <code>CSS</code>, <code>JavaScript</code>.</p>
<ul>
<li><a href="https://filecompressor.samirpaul1.repl.co">Live Demo 🚀 </a></li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172896703-9e4998c1-40da-46ae-810e-780e47a391f9.mp4" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li>Landing Page:
<img loading="lazy" src="https://samirpaulb.github.io/assets/filecompressor-samirpaul1-repl-co-landing-page.webp" alt="Landing Page"  />
</li>
</ul>
<h3 id="flask-file-uploading">Flask File Uploading:</h3>
<p>In HTML form, the enctype property is set to <code>&quot;multipart/form-data&quot;</code> to publish the file to the URL.The URL handler extracts the file from the <code>request.files []</code> object and saves it to the required location. The path to the upload folder is defined as <code>app.config['UPLOAD_FOLDER']</code> and maximum size (in bytes) as
<code>maximum size (in bytes)</code>.
The server-side flask script fetches the file from the request object using <code>name = request.files['file'].filename</code>.
On successfully uploading the file, it is saved to the desired location on the server.
Here’s the Python code for the Flask application.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">werkzeug</span> <span class="kn">import</span> <span class="n">secure_filename</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;upload.html&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s1">&#39;/uploader&#39;</span><span class="p">,</span> <span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="n">f</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">secure_filename</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">filename</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s1">&#39;file uploaded successfully&#39;</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">   <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="how-pdf-is-compressed-in-backend">How PDF is compressed in backend:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PDFNetPython3.PDFNetPython</span> <span class="kn">import</span> <span class="n">PDFDoc</span><span class="p">,</span> <span class="n">Optimizer</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="p">,</span> <span class="n">PDFNet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">output_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">output_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_file</span> <span class="o">=</span> <span class="n">input_file</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">PDFNet</span><span class="o">.</span><span class="n">Initialize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span> <span class="o">=</span> <span class="n">PDFDoc</span><span class="p">(</span><span class="n">input_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">InitSecurityHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">Optimizer</span><span class="o">.</span><span class="n">Optimize</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Save</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="n">SDFDoc</span><span class="o">.</span><span class="n">e_linearized</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">doc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">input_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_file</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">compress_file</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="file-download">File Download:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">downloadFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">response</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fname</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">filename</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&#34;static/resource/&#34;</span> <span class="o">+</span> <span class="nx">fname</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="p">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">blob</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">blob</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	      <span class="kr">const</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nx">fname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	      <span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	  <span class="p">})</span>
</span></span><span class="line"><span class="cl">	  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="-how-to-contribute">🤔 How to contribute</h2>
<ul>
<li><input checked="" disabled="" type="checkbox"> Fork this repository;</li>
<li><input checked="" disabled="" type="checkbox"> Create a branch with your feature: <code>git checkout -b my-feature</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Commit your changes: <code>git commit -m &quot;feat: my new feature&quot;</code>;</li>
<li><input checked="" disabled="" type="checkbox"> Push to your branch: <code>git push origin my-feature</code>.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Text File Compressor De-compressor Web App</title>
      <link>https://samirpaul1.github.io/blog/posts/text-file-compressor-de-compressor-web-app/</link>
      <pubDate>Tue, 04 Oct 2022 15:58:26 +0800</pubDate>
      
      <guid>https://samirpaul1.github.io/blog/posts/text-file-compressor-de-compressor-web-app/</guid>
      <description>Text File Compressor De-compressor Web App</description>
      <content:encoded><![CDATA[<ul>
<li>This webapp uses Huffman Coding for Text Compression and De-compression.</li>
<li>Made with <code>JavaScript</code>, <code>HTML5</code> and <code>CSS3</code>.</li>
<li>Live Demo: <a href="https://samirpaul1.github.io/txt-compressor/"><strong>samirpaul1.github.io/txt-compressor</strong></a></li>
<li>Repository: <a href="https://github.com/SamirPaul1/txt-compressor">github.com/SamirPaul1/txt-compressor</a></li>
</ul>
<h2 id="about-this-application">About this application:</h2>
<ul>
<li>An online text(.txt) file compressor, decompressor which uses Huffman Algorithm to encode/compress files by 35% and decode them back to the original size.</li>
<li>This tool assigns a variable-length code to the characters of the uploaded file based on the frequency of occurrence. Then converts characters to that special code which takes less size than the original ASCII codes. Huffman code forms a binary tree assigning the most frequent characters with the smallest codes and longer codes for the least frequent characters.</li>
<li>A Huffman code is a tree, built bottom up, starting with the list of different characters appearing in a text and their frequency.</li>
<li>With this lossless data compression method, this tool can compress the file size by 35 to 40%.</li>
<li>As file size gets reduced and original characters get changed to special characters so this encoding also improves security by encrypting the file during file sharing.</li>
<li>With the decoding feature, the user can decode the encoded file and get back the original file of the previous size.</li>
<li>I have used JavaScript to implement the algorithms so that browser can compile the code and HTML, CSS to make the website responsive.</li>
<li>Additional instructions and warnings are provided if steps are not followed correctly.</li>
<li>An <a href="https://samirpaul1.github.io/txt-compressor/info.html">Info page</a> is added to give more information about tecnique of <strong>Lossless Data Compression</strong> with Huffman coding.</li>
</ul>
<h2 id="video-demo">Video Demo:</h2>
<iframe title="Video Demo" src="https://user-images.githubusercontent.com/77569653/172716965-50560f4a-2acf-4013-ae87-8b474b2a09e3.mp4" width="100%" height = "380" autoplay="autoplay" loop="loop" frameborder="0" allowfullscreen></iframe>
<ul>
<li><input checked="" disabled="" type="checkbox"> Landing Page:</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-landing-page.png" alt="landing-page"  />
</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Upload File</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-step1.png" alt="step1"  />
</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Select Action (Compress / De-compress)</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-step2.png" alt="step2"  />
</p>
<ul>
<li>
<p><input checked="" disabled="" type="checkbox"> Wait for File Download</p>
<ul>
<li>
<p>File gets downloaded automatically when selected process is complete.</p>
</li>
<li>
<p>Compression - Compression Ratio is also displayed</p>
</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-step3.png" alt="compression"  />
</p>
<ul>
<li>De-compression</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-decompression.png" alt="decompression"  />
</p>
</li>
</ul>
<ul>
<li>Additional Instructions and Warnings are provided if the above steps are not followed correctly</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-nofile.png" alt="noFile"  />
</p>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-verysmallfile.png" alt="smallFile"  />
</p>
<ul>
<li>About the tecnique of Lossless Data Compression with Huffman coding.</li>
</ul>
<p><img loading="lazy" src="https://samirpaulb.github.io/assets/text-file-compressor-de-compressor-web-app-info.jpeg" alt="info1"  />
</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
